{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Problem Statement :\n",
    "\n",
    "X Education sells online courses to industry professionals.The company markets its courses on several websites and search engines like Google.\n",
    "Once these people land on the website, they might browse the courses or fill up a form for the course or watch some videos.When \n",
    "these people fill up a form providing their email address or phone number, they are classified to be a lead. Moreover, the \n",
    "company also gets leads through past referrals. \n",
    "\n",
    "Once these leads are acquired, employees from the sales team start making calls, writing emails, etc. Through this process, \n",
    "some of the leads get converted while most do not.The typical lead conversion rate at X education is around 30%. \n",
    "\n",
    "### Business Goal :\n",
    "\n",
    "X Education needs help in selecting the most promising leads, i.e. the leads that are most likely to convert into paying \n",
    "customers. \n",
    "\n",
    "The company needs a model wherein you a lead score is assigned to each of the leads such that the customers with higher lead \n",
    "score have a higher conversion chance and the customers with lower lead score have a lower conversion chance. \n",
    "\n",
    "The CEO, in particular, has given a ballpark of the target lead conversion rate to be around 80%."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 1: Reading and Understanding the Data\n",
    "\n",
    "Let us first import NumPy and Pandas and read the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Supress Warnings\n",
    "\n",
    "import warnings\n",
    "warnings.filterwarnings('ignore')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Importing all required packages\n",
    "\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "#import pandas_profile\n",
    "\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Data display coustomization\n",
    "pd.set_option('display.max_rows', 100)\n",
    "pd.set_option('display.max_columns', 100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prospect ID</th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Lead Origin</th>\n",
       "      <th>Lead Source</th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Do Not Call</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>Last Activity</th>\n",
       "      <th>Country</th>\n",
       "      <th>Specialization</th>\n",
       "      <th>How did you hear about X Education</th>\n",
       "      <th>What is your current occupation</th>\n",
       "      <th>What matters most to you in choosing a course</th>\n",
       "      <th>Search</th>\n",
       "      <th>Magazine</th>\n",
       "      <th>Newspaper Article</th>\n",
       "      <th>X Education Forums</th>\n",
       "      <th>Newspaper</th>\n",
       "      <th>Digital Advertisement</th>\n",
       "      <th>Through Recommendations</th>\n",
       "      <th>Receive More Updates About Our Courses</th>\n",
       "      <th>Tags</th>\n",
       "      <th>Lead Quality</th>\n",
       "      <th>Update me on Supply Chain Content</th>\n",
       "      <th>Get updates on DM Content</th>\n",
       "      <th>Lead Profile</th>\n",
       "      <th>City</th>\n",
       "      <th>Asymmetrique Activity Index</th>\n",
       "      <th>Asymmetrique Profile Index</th>\n",
       "      <th>Asymmetrique Activity Score</th>\n",
       "      <th>Asymmetrique Profile Score</th>\n",
       "      <th>I agree to pay the amount through cheque</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Last Notable Activity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7927b2df-8bba-4d29-b9a2-b6e0beafe620</td>\n",
       "      <td>660737</td>\n",
       "      <td>API</td>\n",
       "      <td>Olark Chat</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Page Visited on Website</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Select</td>\n",
       "      <td>Select</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>Better Career Prospects</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Interested in other courses</td>\n",
       "      <td>Low in Relevance</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Select</td>\n",
       "      <td>Select</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>15.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2a272436-5132-4136-86fa-dcc88c88f482</td>\n",
       "      <td>660728</td>\n",
       "      <td>API</td>\n",
       "      <td>Organic Search</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>674</td>\n",
       "      <td>2.5</td>\n",
       "      <td>Email Opened</td>\n",
       "      <td>India</td>\n",
       "      <td>Select</td>\n",
       "      <td>Select</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>Better Career Prospects</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ringing</td>\n",
       "      <td>NaN</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Select</td>\n",
       "      <td>Select</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>15.0</td>\n",
       "      <td>15.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8cc8c611-a219-4f35-ad23-fdfd2656bd8a</td>\n",
       "      <td>660727</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1532</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Email Opened</td>\n",
       "      <td>India</td>\n",
       "      <td>Business Administration</td>\n",
       "      <td>Select</td>\n",
       "      <td>Student</td>\n",
       "      <td>Better Career Prospects</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Will revert after reading the email</td>\n",
       "      <td>Might be</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Potential Lead</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>01.High</td>\n",
       "      <td>14.0</td>\n",
       "      <td>20.0</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0cc2df48-7cf4-4e39-9de9-19797f9b38cc</td>\n",
       "      <td>660719</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Unreachable</td>\n",
       "      <td>India</td>\n",
       "      <td>Media and Advertising</td>\n",
       "      <td>Word Of Mouth</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>Better Career Prospects</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Ringing</td>\n",
       "      <td>Not Sure</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Select</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>01.High</td>\n",
       "      <td>13.0</td>\n",
       "      <td>17.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3256f628-e534-4826-9d63-4a8b88782852</td>\n",
       "      <td>660681</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Google</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1428</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Converted to Lead</td>\n",
       "      <td>India</td>\n",
       "      <td>Select</td>\n",
       "      <td>Other</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>Better Career Prospects</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Will revert after reading the email</td>\n",
       "      <td>Might be</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Select</td>\n",
       "      <td>Mumbai</td>\n",
       "      <td>02.Medium</td>\n",
       "      <td>01.High</td>\n",
       "      <td>15.0</td>\n",
       "      <td>18.0</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Prospect ID  Lead Number              Lead Origin  \\\n",
       "0  7927b2df-8bba-4d29-b9a2-b6e0beafe620       660737                      API   \n",
       "1  2a272436-5132-4136-86fa-dcc88c88f482       660728                      API   \n",
       "2  8cc8c611-a219-4f35-ad23-fdfd2656bd8a       660727  Landing Page Submission   \n",
       "3  0cc2df48-7cf4-4e39-9de9-19797f9b38cc       660719  Landing Page Submission   \n",
       "4  3256f628-e534-4826-9d63-4a8b88782852       660681  Landing Page Submission   \n",
       "\n",
       "      Lead Source Do Not Email Do Not Call  Converted  TotalVisits  \\\n",
       "0      Olark Chat           No          No          0          0.0   \n",
       "1  Organic Search           No          No          0          5.0   \n",
       "2  Direct Traffic           No          No          1          2.0   \n",
       "3  Direct Traffic           No          No          0          1.0   \n",
       "4          Google           No          No          1          2.0   \n",
       "\n",
       "   Total Time Spent on Website  Page Views Per Visit            Last Activity  \\\n",
       "0                            0                   0.0  Page Visited on Website   \n",
       "1                          674                   2.5             Email Opened   \n",
       "2                         1532                   2.0             Email Opened   \n",
       "3                          305                   1.0              Unreachable   \n",
       "4                         1428                   1.0        Converted to Lead   \n",
       "\n",
       "  Country           Specialization How did you hear about X Education  \\\n",
       "0     NaN                   Select                             Select   \n",
       "1   India                   Select                             Select   \n",
       "2   India  Business Administration                             Select   \n",
       "3   India    Media and Advertising                      Word Of Mouth   \n",
       "4   India                   Select                              Other   \n",
       "\n",
       "  What is your current occupation  \\\n",
       "0                      Unemployed   \n",
       "1                      Unemployed   \n",
       "2                         Student   \n",
       "3                      Unemployed   \n",
       "4                      Unemployed   \n",
       "\n",
       "  What matters most to you in choosing a course Search Magazine  \\\n",
       "0                       Better Career Prospects     No       No   \n",
       "1                       Better Career Prospects     No       No   \n",
       "2                       Better Career Prospects     No       No   \n",
       "3                       Better Career Prospects     No       No   \n",
       "4                       Better Career Prospects     No       No   \n",
       "\n",
       "  Newspaper Article X Education Forums Newspaper Digital Advertisement  \\\n",
       "0                No                 No        No                    No   \n",
       "1                No                 No        No                    No   \n",
       "2                No                 No        No                    No   \n",
       "3                No                 No        No                    No   \n",
       "4                No                 No        No                    No   \n",
       "\n",
       "  Through Recommendations Receive More Updates About Our Courses  \\\n",
       "0                      No                                     No   \n",
       "1                      No                                     No   \n",
       "2                      No                                     No   \n",
       "3                      No                                     No   \n",
       "4                      No                                     No   \n",
       "\n",
       "                                  Tags      Lead Quality  \\\n",
       "0          Interested in other courses  Low in Relevance   \n",
       "1                              Ringing               NaN   \n",
       "2  Will revert after reading the email          Might be   \n",
       "3                              Ringing          Not Sure   \n",
       "4  Will revert after reading the email          Might be   \n",
       "\n",
       "  Update me on Supply Chain Content Get updates on DM Content    Lead Profile  \\\n",
       "0                                No                        No          Select   \n",
       "1                                No                        No          Select   \n",
       "2                                No                        No  Potential Lead   \n",
       "3                                No                        No          Select   \n",
       "4                                No                        No          Select   \n",
       "\n",
       "     City Asymmetrique Activity Index Asymmetrique Profile Index  \\\n",
       "0  Select                   02.Medium                  02.Medium   \n",
       "1  Select                   02.Medium                  02.Medium   \n",
       "2  Mumbai                   02.Medium                    01.High   \n",
       "3  Mumbai                   02.Medium                    01.High   \n",
       "4  Mumbai                   02.Medium                    01.High   \n",
       "\n",
       "   Asymmetrique Activity Score  Asymmetrique Profile Score  \\\n",
       "0                         15.0                        15.0   \n",
       "1                         15.0                        15.0   \n",
       "2                         14.0                        20.0   \n",
       "3                         13.0                        17.0   \n",
       "4                         15.0                        18.0   \n",
       "\n",
       "  I agree to pay the amount through cheque  \\\n",
       "0                                       No   \n",
       "1                                       No   \n",
       "2                                       No   \n",
       "3                                       No   \n",
       "4                                       No   \n",
       "\n",
       "  A free copy of Mastering The Interview Last Notable Activity  \n",
       "0                                     No              Modified  \n",
       "1                                     No          Email Opened  \n",
       "2                                    Yes          Email Opened  \n",
       "3                                     No              Modified  \n",
       "4                                     No              Modified  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Importing dataset\n",
    "\n",
    "leadInfo = pd.read_csv('Leads.csv', encoding = 'latin')\n",
    "leadInfo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "*********************************  Info *******************************************\n",
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 9240 entries, 0 to 9239\n",
      "Data columns (total 37 columns):\n",
      " #   Column                                         Non-Null Count  Dtype  \n",
      "---  ------                                         --------------  -----  \n",
      " 0   Prospect ID                                    9240 non-null   object \n",
      " 1   Lead Number                                    9240 non-null   int64  \n",
      " 2   Lead Origin                                    9240 non-null   object \n",
      " 3   Lead Source                                    9204 non-null   object \n",
      " 4   Do Not Email                                   9240 non-null   object \n",
      " 5   Do Not Call                                    9240 non-null   object \n",
      " 6   Converted                                      9240 non-null   int64  \n",
      " 7   TotalVisits                                    9103 non-null   float64\n",
      " 8   Total Time Spent on Website                    9240 non-null   int64  \n",
      " 9   Page Views Per Visit                           9103 non-null   float64\n",
      " 10  Last Activity                                  9137 non-null   object \n",
      " 11  Country                                        6779 non-null   object \n",
      " 12  Specialization                                 7802 non-null   object \n",
      " 13  How did you hear about X Education             7033 non-null   object \n",
      " 14  What is your current occupation                6550 non-null   object \n",
      " 15  What matters most to you in choosing a course  6531 non-null   object \n",
      " 16  Search                                         9240 non-null   object \n",
      " 17  Magazine                                       9240 non-null   object \n",
      " 18  Newspaper Article                              9240 non-null   object \n",
      " 19  X Education Forums                             9240 non-null   object \n",
      " 20  Newspaper                                      9240 non-null   object \n",
      " 21  Digital Advertisement                          9240 non-null   object \n",
      " 22  Through Recommendations                        9240 non-null   object \n",
      " 23  Receive More Updates About Our Courses         9240 non-null   object \n",
      " 24  Tags                                           5887 non-null   object \n",
      " 25  Lead Quality                                   4473 non-null   object \n",
      " 26  Update me on Supply Chain Content              9240 non-null   object \n",
      " 27  Get updates on DM Content                      9240 non-null   object \n",
      " 28  Lead Profile                                   6531 non-null   object \n",
      " 29  City                                           7820 non-null   object \n",
      " 30  Asymmetrique Activity Index                    5022 non-null   object \n",
      " 31  Asymmetrique Profile Index                     5022 non-null   object \n",
      " 32  Asymmetrique Activity Score                    5022 non-null   float64\n",
      " 33  Asymmetrique Profile Score                     5022 non-null   float64\n",
      " 34  I agree to pay the amount through cheque       9240 non-null   object \n",
      " 35  A free copy of Mastering The Interview         9240 non-null   object \n",
      " 36  Last Notable Activity                          9240 non-null   object \n",
      "dtypes: float64(4), int64(3), object(30)\n",
      "memory usage: 2.6+ MB\n",
      "None\n",
      "*********************************  Shape ******************************************\n",
      "(9240, 37)\n",
      "**************************** Columns having null values *****************************\n",
      "Prospect ID                                      False\n",
      "Lead Number                                      False\n",
      "Lead Origin                                      False\n",
      "Lead Source                                       True\n",
      "Do Not Email                                     False\n",
      "Do Not Call                                      False\n",
      "Converted                                        False\n",
      "TotalVisits                                       True\n",
      "Total Time Spent on Website                      False\n",
      "Page Views Per Visit                              True\n",
      "Last Activity                                     True\n",
      "Country                                           True\n",
      "Specialization                                    True\n",
      "How did you hear about X Education                True\n",
      "What is your current occupation                   True\n",
      "What matters most to you in choosing a course     True\n",
      "Search                                           False\n",
      "Magazine                                         False\n",
      "Newspaper Article                                False\n",
      "X Education Forums                               False\n",
      "Newspaper                                        False\n",
      "Digital Advertisement                            False\n",
      "Through Recommendations                          False\n",
      "Receive More Updates About Our Courses           False\n",
      "Tags                                              True\n",
      "Lead Quality                                      True\n",
      "Update me on Supply Chain Content                False\n",
      "Get updates on DM Content                        False\n",
      "Lead Profile                                      True\n",
      "City                                              True\n",
      "Asymmetrique Activity Index                       True\n",
      "Asymmetrique Profile Index                        True\n",
      "Asymmetrique Activity Score                       True\n",
      "Asymmetrique Profile Score                        True\n",
      "I agree to pay the amount through cheque         False\n",
      "A free copy of Mastering The Interview           False\n",
      "Last Notable Activity                            False\n",
      "dtype: bool\n",
      "**************************** Describe *****************************\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>Asymmetrique Activity Score</th>\n",
       "      <th>Asymmetrique Profile Score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9240.000000</td>\n",
       "      <td>9240.000000</td>\n",
       "      <td>9103.000000</td>\n",
       "      <td>9240.000000</td>\n",
       "      <td>9103.000000</td>\n",
       "      <td>5022.000000</td>\n",
       "      <td>5022.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>617188.435606</td>\n",
       "      <td>0.385390</td>\n",
       "      <td>3.445238</td>\n",
       "      <td>487.698268</td>\n",
       "      <td>2.362820</td>\n",
       "      <td>14.306252</td>\n",
       "      <td>16.344883</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>23405.995698</td>\n",
       "      <td>0.486714</td>\n",
       "      <td>4.854853</td>\n",
       "      <td>548.021466</td>\n",
       "      <td>2.161418</td>\n",
       "      <td>1.386694</td>\n",
       "      <td>1.811395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>579533.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>11.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>596484.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>15.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>615479.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>248.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>14.000000</td>\n",
       "      <td>16.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>637387.250000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>936.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>18.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>660737.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>251.000000</td>\n",
       "      <td>2272.000000</td>\n",
       "      <td>55.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>20.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Lead Number    Converted  TotalVisits  Total Time Spent on Website  \\\n",
       "count    9240.000000  9240.000000  9103.000000                  9240.000000   \n",
       "mean   617188.435606     0.385390     3.445238                   487.698268   \n",
       "std     23405.995698     0.486714     4.854853                   548.021466   \n",
       "min    579533.000000     0.000000     0.000000                     0.000000   \n",
       "25%    596484.500000     0.000000     1.000000                    12.000000   \n",
       "50%    615479.000000     0.000000     3.000000                   248.000000   \n",
       "75%    637387.250000     1.000000     5.000000                   936.000000   \n",
       "max    660737.000000     1.000000   251.000000                  2272.000000   \n",
       "\n",
       "       Page Views Per Visit  Asymmetrique Activity Score  \\\n",
       "count           9103.000000                  5022.000000   \n",
       "mean               2.362820                    14.306252   \n",
       "std                2.161418                     1.386694   \n",
       "min                0.000000                     7.000000   \n",
       "25%                1.000000                    14.000000   \n",
       "50%                2.000000                    14.000000   \n",
       "75%                3.000000                    15.000000   \n",
       "max               55.000000                    18.000000   \n",
       "\n",
       "       Asymmetrique Profile Score  \n",
       "count                 5022.000000  \n",
       "mean                    16.344883  \n",
       "std                      1.811395  \n",
       "min                     11.000000  \n",
       "25%                     15.000000  \n",
       "50%                     16.000000  \n",
       "75%                     18.000000  \n",
       "max                     20.000000  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# inspect leadInfo dataframe\n",
    "\n",
    "print(\"*********************************  Info *******************************************\") \n",
    "print(leadInfo.info())\n",
    "print(\"*********************************  Shape ******************************************\") \n",
    "print(leadInfo.shape)\n",
    "print(\"**************************** Columns having null values *****************************\")\n",
    "print(leadInfo.isnull().any())\n",
    "print(\"**************************** Describe *****************************\")\n",
    "leadInfo.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9240"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "row1 = leadInfo.shape[0]\n",
    "row1"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 2: Data Cleaning"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prospect ID                                       0.00\n",
      "Lead Number                                       0.00\n",
      "Lead Origin                                       0.00\n",
      "Lead Source                                       0.39\n",
      "Do Not Email                                      0.00\n",
      "Do Not Call                                       0.00\n",
      "Converted                                         0.00\n",
      "TotalVisits                                       1.48\n",
      "Total Time Spent on Website                       0.00\n",
      "Page Views Per Visit                              1.48\n",
      "Last Activity                                     1.11\n",
      "Country                                          26.63\n",
      "Specialization                                   15.56\n",
      "How did you hear about X Education               23.89\n",
      "What is your current occupation                  29.11\n",
      "What matters most to you in choosing a course    29.32\n",
      "Search                                            0.00\n",
      "Magazine                                          0.00\n",
      "Newspaper Article                                 0.00\n",
      "X Education Forums                                0.00\n",
      "Newspaper                                         0.00\n",
      "Digital Advertisement                             0.00\n",
      "Through Recommendations                           0.00\n",
      "Receive More Updates About Our Courses            0.00\n",
      "Tags                                             36.29\n",
      "Lead Quality                                     51.59\n",
      "Update me on Supply Chain Content                 0.00\n",
      "Get updates on DM Content                         0.00\n",
      "Lead Profile                                     29.32\n",
      "City                                             15.37\n",
      "Asymmetrique Activity Index                      45.65\n",
      "Asymmetrique Profile Index                       45.65\n",
      "Asymmetrique Activity Score                      45.65\n",
      "Asymmetrique Profile Score                       45.65\n",
      "I agree to pay the amount through cheque          0.00\n",
      "A free copy of Mastering The Interview            0.00\n",
      "Last Notable Activity                             0.00\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# check for percentage of null values in each column\n",
    "\n",
    "percent_missing = round(100*(leadInfo.isnull().sum()/len(leadInfo.index)), 2)\n",
    "print(percent_missing)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are some columns that have more than 25% null values."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prospect ID</th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Lead Origin</th>\n",
       "      <th>Lead Source</th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Do Not Call</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>Last Activity</th>\n",
       "      <th>Country</th>\n",
       "      <th>Specialization</th>\n",
       "      <th>How did you hear about X Education</th>\n",
       "      <th>What is your current occupation</th>\n",
       "      <th>What matters most to you in choosing a course</th>\n",
       "      <th>Search</th>\n",
       "      <th>Magazine</th>\n",
       "      <th>Newspaper Article</th>\n",
       "      <th>X Education Forums</th>\n",
       "      <th>Newspaper</th>\n",
       "      <th>Digital Advertisement</th>\n",
       "      <th>Through Recommendations</th>\n",
       "      <th>Receive More Updates About Our Courses</th>\n",
       "      <th>Tags</th>\n",
       "      <th>Lead Quality</th>\n",
       "      <th>Update me on Supply Chain Content</th>\n",
       "      <th>Get updates on DM Content</th>\n",
       "      <th>Lead Profile</th>\n",
       "      <th>City</th>\n",
       "      <th>Asymmetrique Activity Index</th>\n",
       "      <th>Asymmetrique Profile Index</th>\n",
       "      <th>Asymmetrique Activity Score</th>\n",
       "      <th>Asymmetrique Profile Score</th>\n",
       "      <th>I agree to pay the amount through cheque</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Last Notable Activity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Empty DataFrame\n",
       "Columns: [Prospect ID, Lead Number, Lead Origin, Lead Source, Do Not Email, Do Not Call, Converted, TotalVisits, Total Time Spent on Website, Page Views Per Visit, Last Activity, Country, Specialization, How did you hear about X Education, What is your current occupation, What matters most to you in choosing a course, Search, Magazine, Newspaper Article, X Education Forums, Newspaper, Digital Advertisement, Through Recommendations, Receive More Updates About Our Courses, Tags, Lead Quality, Update me on Supply Chain Content, Get updates on DM Content, Lead Profile, City, Asymmetrique Activity Index, Asymmetrique Profile Index, Asymmetrique Activity Score, Asymmetrique Profile Score, I agree to pay the amount through cheque, A free copy of Mastering The Interview, Last Notable Activity]\n",
       "Index: []"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check if there are any duplicate values in the dataset\n",
    "\n",
    "leadInfo[leadInfo.duplicated(keep=False)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "There are no duplicate values in the data."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Following columns have a value called select. Convert those values as nan since the customer has not selected any options for \n",
    "# these columns while entering the data.\n",
    "\n",
    "# a) Specialization\n",
    "# b) How did you hear about X Education\n",
    "# c) Lead Profile\n",
    "# d) City\n",
    "\n",
    "# Converting 'Select' values to NaN.\n",
    "\n",
    "leadInfo['Specialization'] = leadInfo['Specialization'].replace('Select', np.nan)\n",
    "leadInfo['How did you hear about X Education'] = leadInfo['How did you hear about X Education'].replace('Select', np.nan)\n",
    "leadInfo['Lead Profile'] = leadInfo['Lead Profile'].replace('Select', np.nan)\n",
    "leadInfo['City'] = leadInfo['City'].replace('Select', np.nan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prospect ID                                       0.00\n",
      "Lead Number                                       0.00\n",
      "Lead Origin                                       0.00\n",
      "Lead Source                                       0.39\n",
      "Do Not Email                                      0.00\n",
      "Do Not Call                                       0.00\n",
      "Converted                                         0.00\n",
      "TotalVisits                                       1.48\n",
      "Total Time Spent on Website                       0.00\n",
      "Page Views Per Visit                              1.48\n",
      "Last Activity                                     1.11\n",
      "Country                                          26.63\n",
      "Specialization                                   36.58\n",
      "How did you hear about X Education               78.46\n",
      "What is your current occupation                  29.11\n",
      "What matters most to you in choosing a course    29.32\n",
      "Search                                            0.00\n",
      "Magazine                                          0.00\n",
      "Newspaper Article                                 0.00\n",
      "X Education Forums                                0.00\n",
      "Newspaper                                         0.00\n",
      "Digital Advertisement                             0.00\n",
      "Through Recommendations                           0.00\n",
      "Receive More Updates About Our Courses            0.00\n",
      "Tags                                             36.29\n",
      "Lead Quality                                     51.59\n",
      "Update me on Supply Chain Content                 0.00\n",
      "Get updates on DM Content                         0.00\n",
      "Lead Profile                                     74.19\n",
      "City                                             39.71\n",
      "Asymmetrique Activity Index                      45.65\n",
      "Asymmetrique Profile Index                       45.65\n",
      "Asymmetrique Activity Score                      45.65\n",
      "Asymmetrique Profile Score                       45.65\n",
      "I agree to pay the amount through cheque          0.00\n",
      "A free copy of Mastering The Interview            0.00\n",
      "Last Notable Activity                             0.00\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# check for percentage of null values in each column\n",
    "\n",
    "percent_missing = round(100*(leadInfo.isnull().sum()/len(leadInfo.index)), 2)\n",
    "print(percent_missing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Let us drop the following columns that have more than 30% null values\n",
    "\n",
    "# a) Specialization\n",
    "# b) How did you hear about X Education\n",
    "# c) Tags\n",
    "# d) Lead Quality\n",
    "# e) Lead Profile\n",
    "# f) City\n",
    "# g) Asymmetrique Activity Index\n",
    "# h) Asymmetrique Profile Index\n",
    "# i) Asymmetrique Activity Score\n",
    "# j) Asymmetrique Profile Score\n",
    "\n",
    "leadInfo = leadInfo.drop(['Specialization','How did you hear about X Education', 'Lead Quality',\n",
    "                          'Lead Profile','Tags','City', 'Asymmetrique Activity Index', 'Asymmetrique Profile Index',\n",
    "                          'Asymmetrique Activity Score', 'Asymmetrique Profile Score'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prospect ID                                       0.00\n",
      "Lead Number                                       0.00\n",
      "Lead Origin                                       0.00\n",
      "Lead Source                                       0.39\n",
      "Do Not Email                                      0.00\n",
      "Do Not Call                                       0.00\n",
      "Converted                                         0.00\n",
      "TotalVisits                                       1.48\n",
      "Total Time Spent on Website                       0.00\n",
      "Page Views Per Visit                              1.48\n",
      "Last Activity                                     1.11\n",
      "Country                                          26.63\n",
      "What is your current occupation                  29.11\n",
      "What matters most to you in choosing a course    29.32\n",
      "Search                                            0.00\n",
      "Magazine                                          0.00\n",
      "Newspaper Article                                 0.00\n",
      "X Education Forums                                0.00\n",
      "Newspaper                                         0.00\n",
      "Digital Advertisement                             0.00\n",
      "Through Recommendations                           0.00\n",
      "Receive More Updates About Our Courses            0.00\n",
      "Update me on Supply Chain Content                 0.00\n",
      "Get updates on DM Content                         0.00\n",
      "I agree to pay the amount through cheque          0.00\n",
      "A free copy of Mastering The Interview            0.00\n",
      "Last Notable Activity                             0.00\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# check for percentage of null values in each column after dropping columns having more than 30% null values\n",
    "\n",
    "percent_missing = round(100*(leadInfo.isnull().sum()/len(leadInfo.index)), 2)\n",
    "print(percent_missing)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Following columns have null values :\n",
    "    - Country\n",
    "    - Lead Source\n",
    "    - Total Visits\n",
    "    - Page Views Per Visit\n",
    "    - Last Activity    \n",
    "    - What is your current occupation\n",
    "    - What matters most to you in choosing a course\n",
    "    \n",
    "Let us see and decide whather we need to impute values in the above column or drop the columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "India                   6492\n",
       "United States             69\n",
       "United Arab Emirates      53\n",
       "Singapore                 24\n",
       "Saudi Arabia              21\n",
       "United Kingdom            15\n",
       "Australia                 13\n",
       "Qatar                     10\n",
       "Bahrain                    7\n",
       "Hong Kong                  7\n",
       "Oman                       6\n",
       "France                     6\n",
       "unknown                    5\n",
       "South Africa               4\n",
       "Nigeria                    4\n",
       "Kuwait                     4\n",
       "Canada                     4\n",
       "Germany                    4\n",
       "Sweden                     3\n",
       "China                      2\n",
       "Asia/Pacific Region        2\n",
       "Italy                      2\n",
       "Belgium                    2\n",
       "Bangladesh                 2\n",
       "Netherlands                2\n",
       "Ghana                      2\n",
       "Philippines                2\n",
       "Uganda                     2\n",
       "Tanzania                   1\n",
       "Liberia                    1\n",
       "Kenya                      1\n",
       "Russia                     1\n",
       "Vietnam                    1\n",
       "Sri Lanka                  1\n",
       "Malaysia                   1\n",
       "Indonesia                  1\n",
       "Denmark                    1\n",
       "Switzerland                1\n",
       "Name: Country, dtype: int64"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Lets check the value counts for each values in the country column\n",
    "\n",
    "leadInfo.Country.value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70.26\n"
     ]
    }
   ],
   "source": [
    "# check the percentage of India as value in the country column\n",
    "\n",
    "country_percentage = round(100*len(leadInfo[leadInfo['Country'] == 'India'])/len(leadInfo['Country']),2)\n",
    "print(country_percentage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prospect ID</th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Lead Origin</th>\n",
       "      <th>Lead Source</th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Do Not Call</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>Last Activity</th>\n",
       "      <th>What is your current occupation</th>\n",
       "      <th>What matters most to you in choosing a course</th>\n",
       "      <th>Search</th>\n",
       "      <th>Magazine</th>\n",
       "      <th>Newspaper Article</th>\n",
       "      <th>X Education Forums</th>\n",
       "      <th>Newspaper</th>\n",
       "      <th>Digital Advertisement</th>\n",
       "      <th>Through Recommendations</th>\n",
       "      <th>Receive More Updates About Our Courses</th>\n",
       "      <th>Update me on Supply Chain Content</th>\n",
       "      <th>Get updates on DM Content</th>\n",
       "      <th>I agree to pay the amount through cheque</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Last Notable Activity</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7927b2df-8bba-4d29-b9a2-b6e0beafe620</td>\n",
       "      <td>660737</td>\n",
       "      <td>API</td>\n",
       "      <td>Olark Chat</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Page Visited on Website</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>Better Career Prospects</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2a272436-5132-4136-86fa-dcc88c88f482</td>\n",
       "      <td>660728</td>\n",
       "      <td>API</td>\n",
       "      <td>Organic Search</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>674</td>\n",
       "      <td>2.5</td>\n",
       "      <td>Email Opened</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>Better Career Prospects</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8cc8c611-a219-4f35-ad23-fdfd2656bd8a</td>\n",
       "      <td>660727</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1532</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Email Opened</td>\n",
       "      <td>Student</td>\n",
       "      <td>Better Career Prospects</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Yes</td>\n",
       "      <td>Email Opened</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0cc2df48-7cf4-4e39-9de9-19797f9b38cc</td>\n",
       "      <td>660719</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Unreachable</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>Better Career Prospects</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3256f628-e534-4826-9d63-4a8b88782852</td>\n",
       "      <td>660681</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Google</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1428</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Converted to Lead</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>Better Career Prospects</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>No</td>\n",
       "      <td>Modified</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Prospect ID  Lead Number              Lead Origin  \\\n",
       "0  7927b2df-8bba-4d29-b9a2-b6e0beafe620       660737                      API   \n",
       "1  2a272436-5132-4136-86fa-dcc88c88f482       660728                      API   \n",
       "2  8cc8c611-a219-4f35-ad23-fdfd2656bd8a       660727  Landing Page Submission   \n",
       "3  0cc2df48-7cf4-4e39-9de9-19797f9b38cc       660719  Landing Page Submission   \n",
       "4  3256f628-e534-4826-9d63-4a8b88782852       660681  Landing Page Submission   \n",
       "\n",
       "      Lead Source Do Not Email Do Not Call  Converted  TotalVisits  \\\n",
       "0      Olark Chat           No          No          0          0.0   \n",
       "1  Organic Search           No          No          0          5.0   \n",
       "2  Direct Traffic           No          No          1          2.0   \n",
       "3  Direct Traffic           No          No          0          1.0   \n",
       "4          Google           No          No          1          2.0   \n",
       "\n",
       "   Total Time Spent on Website  Page Views Per Visit            Last Activity  \\\n",
       "0                            0                   0.0  Page Visited on Website   \n",
       "1                          674                   2.5             Email Opened   \n",
       "2                         1532                   2.0             Email Opened   \n",
       "3                          305                   1.0              Unreachable   \n",
       "4                         1428                   1.0        Converted to Lead   \n",
       "\n",
       "  What is your current occupation  \\\n",
       "0                      Unemployed   \n",
       "1                      Unemployed   \n",
       "2                         Student   \n",
       "3                      Unemployed   \n",
       "4                      Unemployed   \n",
       "\n",
       "  What matters most to you in choosing a course Search Magazine  \\\n",
       "0                       Better Career Prospects     No       No   \n",
       "1                       Better Career Prospects     No       No   \n",
       "2                       Better Career Prospects     No       No   \n",
       "3                       Better Career Prospects     No       No   \n",
       "4                       Better Career Prospects     No       No   \n",
       "\n",
       "  Newspaper Article X Education Forums Newspaper Digital Advertisement  \\\n",
       "0                No                 No        No                    No   \n",
       "1                No                 No        No                    No   \n",
       "2                No                 No        No                    No   \n",
       "3                No                 No        No                    No   \n",
       "4                No                 No        No                    No   \n",
       "\n",
       "  Through Recommendations Receive More Updates About Our Courses  \\\n",
       "0                      No                                     No   \n",
       "1                      No                                     No   \n",
       "2                      No                                     No   \n",
       "3                      No                                     No   \n",
       "4                      No                                     No   \n",
       "\n",
       "  Update me on Supply Chain Content Get updates on DM Content  \\\n",
       "0                                No                        No   \n",
       "1                                No                        No   \n",
       "2                                No                        No   \n",
       "3                                No                        No   \n",
       "4                                No                        No   \n",
       "\n",
       "  I agree to pay the amount through cheque  \\\n",
       "0                                       No   \n",
       "1                                       No   \n",
       "2                                       No   \n",
       "3                                       No   \n",
       "4                                       No   \n",
       "\n",
       "  A free copy of Mastering The Interview Last Notable Activity  \n",
       "0                                     No              Modified  \n",
       "1                                     No          Email Opened  \n",
       "2                                    Yes          Email Opened  \n",
       "3                                     No              Modified  \n",
       "4                                     No              Modified  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Since \"India\" occurs around 70% of times in the Country column, and country column also has around 27% as missing values, \n",
    "# we shall go ahead and drop the column\n",
    "\n",
    "leadInfo = leadInfo.drop(['Country'], axis=1)\n",
    "leadInfo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Google               2868\n",
       "Direct Traffic       2543\n",
       "Olark Chat           1755\n",
       "Organic Search       1154\n",
       "Reference             534\n",
       "Welingak Website      142\n",
       "Referral Sites        125\n",
       "Facebook               55\n",
       "bing                    6\n",
       "google                  5\n",
       "Click2call              4\n",
       "Press_Release           2\n",
       "Live Chat               2\n",
       "Social Media            2\n",
       "NC_EDM                  1\n",
       "blog                    1\n",
       "welearnblog_Home        1\n",
       "youtubechannel          1\n",
       "Pay per Click Ads       1\n",
       "WeLearn                 1\n",
       "testone                 1\n",
       "Name: Lead Source, dtype: int64"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the value counts for the column Lead Source\n",
    "\n",
    "leadInfo['Lead Source'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# From the above it can be noticed that Google appears twice with different cases. Hence we shall convert all rows with value \n",
    "# \"Google\" to the same case.\n",
    "# Also since \"Google\" has the major chunk of data, we can impute the null values with Google\n",
    "\n",
    "leadInfo['Lead Source'] = leadInfo['Lead Source'].replace('google', 'Google')\n",
    "leadInfo['Lead Source'] = leadInfo['Lead Source'].replace(np.nan, 'Google')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Google              2909\n",
       "Direct Traffic      2543\n",
       "Olark Chat          1755\n",
       "Organic Search      1154\n",
       "Reference            534\n",
       "Welingak Website     142\n",
       "Referral Sites       125\n",
       "Other Source          78\n",
       "Name: Lead Source, dtype: int64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "leadInfo['Lead Source'] = leadInfo['Lead Source'].replace(['Facebook','bing','Click2call','Press_Release','Live Chat','Social Media','NC_EDM','Pay per Click Ads','youtubechannel','testone','WeLearn','welearnblog_Home','welearnblog_Home','blog'],'Other Source')\n",
    "leadInfo['Lead Source'].value_counts()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.0      2189\n",
       "2.0      1680\n",
       "3.0      1306\n",
       "4.0      1120\n",
       "5.0       783\n",
       "6.0       466\n",
       "1.0       395\n",
       "7.0       309\n",
       "8.0       224\n",
       "9.0       164\n",
       "10.0      114\n",
       "11.0       86\n",
       "13.0       48\n",
       "12.0       45\n",
       "14.0       36\n",
       "16.0       21\n",
       "15.0       18\n",
       "17.0       16\n",
       "18.0       15\n",
       "20.0       12\n",
       "19.0        9\n",
       "21.0        6\n",
       "23.0        6\n",
       "25.0        5\n",
       "24.0        5\n",
       "27.0        5\n",
       "22.0        3\n",
       "28.0        2\n",
       "29.0        2\n",
       "26.0        2\n",
       "115.0       1\n",
       "41.0        1\n",
       "55.0        1\n",
       "251.0       1\n",
       "141.0       1\n",
       "32.0        1\n",
       "42.0        1\n",
       "74.0        1\n",
       "43.0        1\n",
       "30.0        1\n",
       "54.0        1\n",
       "Name: TotalVisits, dtype: int64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the value counts for the column Total Visits\n",
    "\n",
    "leadInfo['TotalVisits'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "3.0"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the median of column \n",
    "\n",
    "leadInfo['TotalVisits'].median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We shall impute the null values in TotalVisits by the median value which is 3.0\n",
    "\n",
    "leadInfo['TotalVisits'] = leadInfo['TotalVisits'].replace(np.nan, leadInfo['TotalVisits'].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.00    2189\n",
       "2.00    1795\n",
       "3.00    1196\n",
       "4.00     896\n",
       "1.00     651\n",
       "        ... \n",
       "2.13       1\n",
       "4.40       1\n",
       "6.67       1\n",
       "8.33       1\n",
       "2.45       1\n",
       "Name: Page Views Per Visit, Length: 114, dtype: int64"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the value counts for Page Views Per Visit\n",
    "\n",
    "leadInfo['Page Views Per Visit'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2.0"
      ]
     },
     "execution_count": 23,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the median of the column\n",
    "\n",
    "leadInfo['Page Views Per Visit'].median()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [],
   "source": [
    "# We shall impute the null values in 'Page Views Per Visit' by the median value which is 2.0\n",
    "\n",
    "leadInfo['Page Views Per Visit'] = leadInfo['Page Views Per Visit'].replace(np.nan, leadInfo['Page Views Per Visit'].median())"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Email Opened                    3437\n",
       "SMS Sent                        2745\n",
       "Olark Chat Conversation          973\n",
       "Page Visited on Website          640\n",
       "Converted to Lead                428\n",
       "Email Bounced                    326\n",
       "Email Link Clicked               267\n",
       "Form Submitted on Website        116\n",
       "Unreachable                       93\n",
       "Unsubscribed                      61\n",
       "Had a Phone Conversation          30\n",
       "Approached upfront                 9\n",
       "View in browser link Clicked       6\n",
       "Email Received                     2\n",
       "Email Marked Spam                  2\n",
       "Resubscribed to emails             1\n",
       "Visited Booth in Tradeshow         1\n",
       "Name: Last Activity, dtype: int64"
      ]
     },
     "execution_count": 25,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the value counts for the column Last Activity\n",
    "\n",
    "leadInfo['Last Activity'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Since we do not have any information of what the last activity of the customer would have been, we can add a new category \n",
    "# called 'Not Sure' for the null values\n",
    "\n",
    "leadInfo['Last Activity'] = leadInfo['Last Activity'].replace(np.nan, 'Not Sure')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unemployed              5600\n",
       "Working Professional     706\n",
       "Student                  210\n",
       "Other                     16\n",
       "Housewife                 10\n",
       "Businessman                8\n",
       "Name: What is your current occupation, dtype: int64"
      ]
     },
     "execution_count": 27,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the value counts for the column \"What is your current Occupation\"\n",
    "\n",
    "leadInfo['What is your current occupation'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Since no information has been provided Current Occupation, we can add a new category called No Information and set that \n",
    "# as value for the null columns\n",
    "\n",
    "leadInfo['What is your current occupation'] = leadInfo['What is your current occupation'].replace(np.nan, 'Other') "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Unemployed              5600\n",
       "Other                   2724\n",
       "Working Professional     706\n",
       "Student                  210\n",
       "Name: What is your current occupation, dtype: int64"
      ]
     },
     "execution_count": 29,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "\n",
    "leadInfo['What is your current occupation'] = leadInfo['What is your current occupation'].replace(['Housewife','Businessman'], 'Other')\n",
    "leadInfo['What is your current occupation'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Better Career Prospects      6528\n",
       "Flexibility & Convenience       2\n",
       "Other                           1\n",
       "Name: What matters most to you in choosing a course, dtype: int64"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check the value counts for the column What matters most to you in choosing a course \n",
    "\n",
    "leadInfo['What matters most to you in choosing a course'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "70.65\n"
     ]
    }
   ],
   "source": [
    "matters_most_percentage = round(100*len(leadInfo[leadInfo['What matters most to you in choosing a course'] \n",
    "                            == 'Better Career Prospects'])/len(leadInfo['What matters most to you in choosing a course']),2)\n",
    "print(matters_most_percentage)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Since Better Career Prospects occurs around 70% of times in the What matters most to you in choosing a course column, and\n",
    "# since the column also has around 29% as missing values, we shall go ahead and drop the column\n",
    "\n",
    "leadInfo = leadInfo.drop(['What matters most to you in choosing a course'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Prospect ID                                 0.0\n",
      "Lead Number                                 0.0\n",
      "Lead Origin                                 0.0\n",
      "Lead Source                                 0.0\n",
      "Do Not Email                                0.0\n",
      "Do Not Call                                 0.0\n",
      "Converted                                   0.0\n",
      "TotalVisits                                 0.0\n",
      "Total Time Spent on Website                 0.0\n",
      "Page Views Per Visit                        0.0\n",
      "Last Activity                               0.0\n",
      "What is your current occupation             0.0\n",
      "Search                                      0.0\n",
      "Magazine                                    0.0\n",
      "Newspaper Article                           0.0\n",
      "X Education Forums                          0.0\n",
      "Newspaper                                   0.0\n",
      "Digital Advertisement                       0.0\n",
      "Through Recommendations                     0.0\n",
      "Receive More Updates About Our Courses      0.0\n",
      "Update me on Supply Chain Content           0.0\n",
      "Get updates on DM Content                   0.0\n",
      "I agree to pay the amount through cheque    0.0\n",
      "A free copy of Mastering The Interview      0.0\n",
      "Last Notable Activity                       0.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# check for percentage of null values in each column\n",
    "\n",
    "percent_missing = round(100*(leadInfo.isnull().sum()/len(leadInfo.index)), 2)\n",
    "print(percent_missing)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "All the null values in the columns now have either been imputed or we have dropped the columns which have more than 70% data \n",
    "concentrated towards one value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Since the following columns have only one value \"No\" in all the rows, we can eliminate the columns :\n",
    "\n",
    "# a) Magazine\n",
    "# b) Receive More Updates About Our Courses\n",
    "# c) Update me on Supply Chain Content\n",
    "# d) Get updates on DM Content\n",
    "# e) I agree to pay the amount through cheque\n",
    "\n",
    "leadInfo = leadInfo.drop(['Magazine', 'Receive More Updates About Our Courses', 'Update me on Supply Chain Content', \n",
    "                          'Get updates on DM Content', 'I agree to pay the amount through cheque'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9240, 20)"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "leadInfo.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Outlier Treatment"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9240.000000</td>\n",
       "      <td>9240.000000</td>\n",
       "      <td>9240.000000</td>\n",
       "      <td>9240.000000</td>\n",
       "      <td>9240.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>617188.435606</td>\n",
       "      <td>0.385390</td>\n",
       "      <td>3.438636</td>\n",
       "      <td>487.698268</td>\n",
       "      <td>2.357440</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>23405.995698</td>\n",
       "      <td>0.486714</td>\n",
       "      <td>4.819024</td>\n",
       "      <td>548.021466</td>\n",
       "      <td>2.145781</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>579533.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>596484.500000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>12.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>615479.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>248.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>637387.250000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>936.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90%</th>\n",
       "      <td>650506.100000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1380.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95%</th>\n",
       "      <td>655404.050000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1562.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99%</th>\n",
       "      <td>659592.980000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>17.000000</td>\n",
       "      <td>1840.610000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>660737.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>251.000000</td>\n",
       "      <td>2272.000000</td>\n",
       "      <td>55.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Lead Number    Converted  TotalVisits  Total Time Spent on Website  \\\n",
       "count    9240.000000  9240.000000  9240.000000                  9240.000000   \n",
       "mean   617188.435606     0.385390     3.438636                   487.698268   \n",
       "std     23405.995698     0.486714     4.819024                   548.021466   \n",
       "min    579533.000000     0.000000     0.000000                     0.000000   \n",
       "25%    596484.500000     0.000000     1.000000                    12.000000   \n",
       "50%    615479.000000     0.000000     3.000000                   248.000000   \n",
       "75%    637387.250000     1.000000     5.000000                   936.000000   \n",
       "90%    650506.100000     1.000000     7.000000                  1380.000000   \n",
       "95%    655404.050000     1.000000    10.000000                  1562.000000   \n",
       "99%    659592.980000     1.000000    17.000000                  1840.610000   \n",
       "max    660737.000000     1.000000   251.000000                  2272.000000   \n",
       "\n",
       "       Page Views Per Visit  \n",
       "count           9240.000000  \n",
       "mean               2.357440  \n",
       "std                2.145781  \n",
       "min                0.000000  \n",
       "25%                1.000000  \n",
       "50%                2.000000  \n",
       "75%                3.000000  \n",
       "90%                5.000000  \n",
       "95%                6.000000  \n",
       "99%                9.000000  \n",
       "max               55.000000  "
      ]
     },
     "execution_count": 36,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking outliers at 25%,50%,75%,90%,95% and above\n",
    "leadInfo.describe(percentiles=[.25,.5,.75,.90,.95,.99])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above, it can be seen that outlier exists in the columns TotalVisits and Page Views Per Visit columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1800 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Check the outliers in all the numeric columns\n",
    "\n",
    "plt.figure(figsize=(20, 25))\n",
    "plt.subplot(4,3,1)\n",
    "sns.boxplot(y = 'TotalVisits', palette='Set3', data = leadInfo)\n",
    "plt.subplot(4,3,2)\n",
    "sns.boxplot(y = 'Total Time Spent on Website', palette='Set3', data = leadInfo)\n",
    "plt.subplot(4,3,3)\n",
    "sns.boxplot(y = 'Page Views Per Visit', palette='Set3', data = leadInfo)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    9141.000000\n",
       "mean        3.179740\n",
       "std         2.913631\n",
       "min         0.000000\n",
       "25%         1.000000\n",
       "50%         3.000000\n",
       "75%         5.000000\n",
       "90%         7.000000\n",
       "95%         9.000000\n",
       "99%        13.000000\n",
       "max        16.000000\n",
       "Name: TotalVisits, dtype: float64"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Removing values beyond 99% for Total Visits\n",
    "\n",
    "nn_quartile_total_visits = leadInfo['TotalVisits'].quantile(0.99)\n",
    "leadInfo = leadInfo[leadInfo[\"TotalVisits\"] < nn_quartile_total_visits]\n",
    "leadInfo[\"TotalVisits\"].describe(percentiles=[.25,.5,.75,.90,.95,.99])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9141.00000</td>\n",
       "      <td>9141.000000</td>\n",
       "      <td>9141.000000</td>\n",
       "      <td>9141.000000</td>\n",
       "      <td>9141.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>617233.45192</td>\n",
       "      <td>0.385406</td>\n",
       "      <td>3.179740</td>\n",
       "      <td>486.074609</td>\n",
       "      <td>2.329506</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>23413.72193</td>\n",
       "      <td>0.486718</td>\n",
       "      <td>2.913631</td>\n",
       "      <td>547.856302</td>\n",
       "      <td>2.046673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>579533.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>596519.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>615563.00000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>247.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>637414.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>933.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90%</th>\n",
       "      <td>650514.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1379.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95%</th>\n",
       "      <td>655406.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>1561.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99%</th>\n",
       "      <td>659592.80000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>1839.600000</td>\n",
       "      <td>9.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>660737.00000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>2272.000000</td>\n",
       "      <td>16.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Lead Number    Converted  TotalVisits  Total Time Spent on Website  \\\n",
       "count    9141.00000  9141.000000  9141.000000                  9141.000000   \n",
       "mean   617233.45192     0.385406     3.179740                   486.074609   \n",
       "std     23413.72193     0.486718     2.913631                   547.856302   \n",
       "min    579533.00000     0.000000     0.000000                     0.000000   \n",
       "25%    596519.00000     0.000000     1.000000                    10.000000   \n",
       "50%    615563.00000     0.000000     3.000000                   247.000000   \n",
       "75%    637414.00000     1.000000     5.000000                   933.000000   \n",
       "90%    650514.00000     1.000000     7.000000                  1379.000000   \n",
       "95%    655406.00000     1.000000     9.000000                  1561.000000   \n",
       "99%    659592.80000     1.000000    13.000000                  1839.600000   \n",
       "max    660737.00000     1.000000    16.000000                  2272.000000   \n",
       "\n",
       "       Page Views Per Visit  \n",
       "count           9141.000000  \n",
       "mean               2.329506  \n",
       "std                2.046673  \n",
       "min                0.000000  \n",
       "25%                1.000000  \n",
       "50%                2.000000  \n",
       "75%                3.000000  \n",
       "90%                5.000000  \n",
       "95%                6.000000  \n",
       "99%                9.000000  \n",
       "max               16.000000  "
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking outliers at 25%,50%,75%,90%,95% and above\n",
    "\n",
    "leadInfo.describe(percentiles=[.25,.5,.75,.90,.95,.99])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "count    9029.000000\n",
       "mean        2.226383\n",
       "std         1.823395\n",
       "min         0.000000\n",
       "25%         1.000000\n",
       "50%         2.000000\n",
       "75%         3.000000\n",
       "90%         5.000000\n",
       "95%         6.000000\n",
       "99%         7.000000\n",
       "max         8.000000\n",
       "Name: Page Views Per Visit, dtype: float64"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Removing values beyond 99% for page Views Per Visit\n",
    "\n",
    "nn_quartile_page_visits = leadInfo['Page Views Per Visit'].quantile(0.99)\n",
    "leadInfo = leadInfo[leadInfo[\"Page Views Per Visit\"] < nn_quartile_page_visits]\n",
    "leadInfo[\"Page Views Per Visit\"].describe(percentiles=[.25,.5,.75,.90,.95,.99])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>9029.000000</td>\n",
       "      <td>9029.000000</td>\n",
       "      <td>9029.000000</td>\n",
       "      <td>9029.000000</td>\n",
       "      <td>9029.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>617223.248422</td>\n",
       "      <td>0.385092</td>\n",
       "      <td>3.087164</td>\n",
       "      <td>483.133016</td>\n",
       "      <td>2.226383</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>23372.383121</td>\n",
       "      <td>0.486644</td>\n",
       "      <td>2.801244</td>\n",
       "      <td>547.420675</td>\n",
       "      <td>1.823395</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>579533.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>596530.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>615645.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>245.000000</td>\n",
       "      <td>2.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>637360.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>929.000000</td>\n",
       "      <td>3.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>90%</th>\n",
       "      <td>650463.200000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>7.000000</td>\n",
       "      <td>1378.000000</td>\n",
       "      <td>5.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>95%</th>\n",
       "      <td>655351.600000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>1558.000000</td>\n",
       "      <td>6.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>99%</th>\n",
       "      <td>659577.800000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>1839.720000</td>\n",
       "      <td>7.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>660737.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>16.000000</td>\n",
       "      <td>2272.000000</td>\n",
       "      <td>8.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         Lead Number    Converted  TotalVisits  Total Time Spent on Website  \\\n",
       "count    9029.000000  9029.000000  9029.000000                  9029.000000   \n",
       "mean   617223.248422     0.385092     3.087164                   483.133016   \n",
       "std     23372.383121     0.486644     2.801244                   547.420675   \n",
       "min    579533.000000     0.000000     0.000000                     0.000000   \n",
       "25%    596530.000000     0.000000     1.000000                     7.000000   \n",
       "50%    615645.000000     0.000000     3.000000                   245.000000   \n",
       "75%    637360.000000     1.000000     4.000000                   929.000000   \n",
       "90%    650463.200000     1.000000     7.000000                  1378.000000   \n",
       "95%    655351.600000     1.000000     8.000000                  1558.000000   \n",
       "99%    659577.800000     1.000000    13.000000                  1839.720000   \n",
       "max    660737.000000     1.000000    16.000000                  2272.000000   \n",
       "\n",
       "       Page Views Per Visit  \n",
       "count           9029.000000  \n",
       "mean               2.226383  \n",
       "std                1.823395  \n",
       "min                0.000000  \n",
       "25%                1.000000  \n",
       "50%                2.000000  \n",
       "75%                3.000000  \n",
       "90%                5.000000  \n",
       "95%                6.000000  \n",
       "99%                7.000000  \n",
       "max                8.000000  "
      ]
     },
     "execution_count": 41,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Checking outliers at 25%,50%,75%,90%,95% and above\n",
    "leadInfo.describe(percentiles=[.25,.5,.75,.90,.95,.99])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "97.72\n"
     ]
    }
   ],
   "source": [
    "# Determine the percentage of data retained\n",
    "\n",
    "num_data = round(100*(len(leadInfo)/9240),2)\n",
    "print(num_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "At this point, the data has been cleaned and around 98% of data has been retained"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "9029"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "row2 = leadInfo.shape[0]\n",
    "row2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "97.71645021645021"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "(row2/row1)*100"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 3: Data Analysis\n",
    "Let us try and understand the data now based on each columns effect on the conversion rates"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 144x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Conversion Rate \n",
    "\n",
    "plot = sns.catplot(x=\"Converted\", kind=\"count\", data=leadInfo, palette=\"Set2\", aspect= 0.4);\n",
    "\n",
    "plt.title('Converted', fontsize = 14)\n",
    "plt.xlabel(\"Converted\", fontsize = 12)\n",
    "plt.ylabel(\"Count\", fontsize = 12)\n",
    "\n",
    "# Print the counts\n",
    "\n",
    "ax = plot.facet_axis(0,0)\n",
    "for p in ax.patches:        \n",
    "    ax.text(p.get_x() + p.get_width()/2., p.get_height(), p.get_height(), fontsize=12, color='blue', ha='center', va='bottom')\n",
    "    \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- From the above graph, there has been a overall conversion rate of around 39%"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 671.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lead Origin\n",
    "\n",
    "plot = sns.catplot(x=\"Lead Origin\", hue = \"Converted\", kind=\"count\", data=leadInfo, palette=\"Set2\", aspect= 1.7);\n",
    "\n",
    "plt.title('Lead Origin Vs Converted', fontsize = 14)\n",
    "plt.xlabel(\"Lead Origin\", fontsize = 12)\n",
    "plt.ylabel(\"Count\", fontsize = 12)\n",
    "\n",
    "# Print the counts\n",
    "\n",
    "ax = plot.facet_axis(0,0)\n",
    "for p in ax.patches:\n",
    "    \n",
    "    if np.isnan(p.get_height()):\n",
    "        height = 0\n",
    "    else:\n",
    "        height = p.get_height()\n",
    "    \n",
    "    height = int(height)\n",
    "    ax.text(p.get_x()+p.get_width()/2., height, height, fontsize=12, color='blue', ha='center', va='bottom')\n",
    "    \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- From the above graph, it can be seen that the maximum conversion happened from Landing Page Submission\n",
    "Also there was only one request from quick add form which got converted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1319.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Lead Source\n",
    "\n",
    "plot = sns.catplot(x=\"Lead Source\", hue = \"Converted\", kind=\"count\", data=leadInfo, palette=\"Set2\", aspect = 3.5);\n",
    "\n",
    "plt.title('Lead Source Vs Converted', fontsize = 14)\n",
    "plt.xlabel(\"Lead Source\", fontsize = 12)\n",
    "plt.ylabel(\"Count\", fontsize = 12)\n",
    "plt.xticks(rotation=90)\n",
    "\n",
    "# Print the counts\n",
    "\n",
    "ax = plot.facet_axis(0,0)\n",
    "for p in ax.patches:\n",
    "    \n",
    "    if np.isnan(p.get_height()):\n",
    "        height = 0\n",
    "    else:\n",
    "        height = p.get_height()\n",
    "    \n",
    "    height = int(height)\n",
    "    ax.text(p.get_x()+p.get_width()/2., height, height, fontsize=12, color='blue', ha='center', va='bottom')\n",
    "   \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above graph, it can be seen that major conversion in the lead source is from google"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 275.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Do not Email\n",
    "\n",
    "plot = sns.catplot(x=\"Do Not Email\", hue = \"Converted\", kind=\"count\", data=leadInfo, palette=\"Set2\", aspect = 0.6);\n",
    "\n",
    "plt.title('Do Not Email Vs Converted', fontsize = 14)\n",
    "plt.xlabel(\"Do Not Email\", fontsize = 12)\n",
    "plt.ylabel(\"Count\", fontsize = 12)\n",
    "\n",
    "ax = plot.facet_axis(0,0)\n",
    "for p in ax.patches:        \n",
    "    ax.text(p.get_x() + p.get_width()/2., p.get_height(), p.get_height(), fontsize=12, color='blue', ha='center', va='bottom')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Based on the above graph, major conversion has happend from the emails that have been sent"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 275.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Do not Call\n",
    "\n",
    "plot = sns.catplot(x=\"Do Not Call\", hue = \"Converted\", kind=\"count\", data=leadInfo, palette=\"Set2\", aspect = 0.6);\n",
    "\n",
    "plt.title('Do Not Call Vs Converted', fontsize = 14)\n",
    "plt.xlabel(\"Do Not Call\", fontsize = 12)\n",
    "plt.ylabel(\"Count\", fontsize = 12)\n",
    "\n",
    "# Print the counts\n",
    "\n",
    "ax = plot.facet_axis(0,0)\n",
    "for p in ax.patches:\n",
    "    \n",
    "    if np.isnan(p.get_height()):\n",
    "        height = 0\n",
    "    else:\n",
    "        height = p.get_height()\n",
    "    \n",
    "    height = int(height)\n",
    "    ax.text(p.get_x()+p.get_width()/2., height, height, fontsize=12, color='blue', ha='center', va='bottom')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "From the above graph , it can be noticed that major conversions happened when calls were made.\n",
    "However, it can also be seen that 2 leads opted for \"Do Not Call\", but they still got converted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1139.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Last Activity\n",
    "\n",
    "plot = sns.catplot(x=\"Last Activity\", hue = \"Converted\", kind=\"count\", data=leadInfo, palette=\"Set2\", aspect = 3.0);\n",
    "\n",
    "plt.title('Last Activity Vs Converted', fontsize = 14)\n",
    "plt.xlabel(\"Last Activity\", fontsize = 12)\n",
    "plt.ylabel(\"Count\", fontsize = 12)\n",
    "plt.xticks(rotation=90)\n",
    "\n",
    "# Print the counts\n",
    "\n",
    "ax = plot.facet_axis(0,0)\n",
    "for p in ax.patches:\n",
    "    \n",
    "    if np.isnan(p.get_height()):\n",
    "        height = 0\n",
    "    else:\n",
    "        height = p.get_height()\n",
    "    \n",
    "    height = int(height)\n",
    "    ax.text(p.get_x()+p.get_width()/2., height, height, fontsize=12, color='blue', ha='center', va='bottom')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As per the above graph, last activity value of 'SMS Sent' had more conversion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 779.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# What is your current occupation\n",
    "\n",
    "plot = sns.catplot(x=\"What is your current occupation\", hue = \"Converted\", kind=\"count\", data=leadInfo, palette=\"Set2\", \n",
    "                   aspect = 2.0);\n",
    "\n",
    "plt.title('Current Occupation Vs Converted', fontsize = 14)\n",
    "plt.xlabel(\"Current Occupation\", fontsize = 12)\n",
    "plt.ylabel(\"Count\", fontsize = 12)\n",
    "\n",
    "# Print the counts\n",
    "\n",
    "ax = plot.facet_axis(0,0)\n",
    "for p in ax.patches:\n",
    "    \n",
    "    if np.isnan(p.get_height()):\n",
    "        height = 0\n",
    "    else:\n",
    "        height = p.get_height()\n",
    "    \n",
    "    height = int(height)\n",
    "    ax.text(p.get_x()+p.get_width()/2., height, height, fontsize=12, color='blue', ha='center', va='bottom')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "More conversion happend with people who are unemployed. It can also be noticed from the above data that \n",
    "    - Out of 7 business men, 4 got converted\n",
    "    - Out 10 housewives, all 10 leads got converted."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 311.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Search\n",
    "\n",
    "plot = sns.catplot(x=\"Search\", hue = \"Converted\", kind=\"count\", data=leadInfo, palette=\"Set2\", aspect = 0.7);\n",
    "\n",
    "plt.title('Search Vs Converted', fontsize = 14)\n",
    "plt.xlabel(\"Search\", fontsize = 12)\n",
    "plt.ylabel(\"Count\", fontsize = 12)\n",
    "\n",
    "ax = plot.facet_axis(0,0)\n",
    "for p in ax.patches:        \n",
    "    ax.text(p.get_x() + p.get_width()/2., p.get_height(), p.get_height(), fontsize=12, color='blue', ha='center', va='bottom')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Conversion rate is high on leads who are not through search"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 53,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 239.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Newspaper Article\n",
    "\n",
    "plot = sns.catplot(x=\"Newspaper Article\", hue = \"Converted\", kind=\"count\", data=leadInfo, palette=\"Set2\", aspect = 0.5);\n",
    "\n",
    "plt.title('Newspaper Article Vs Converted', fontsize = 14)\n",
    "plt.xlabel(\"Newspaper Article\", fontsize = 12)\n",
    "plt.ylabel(\"Count\", fontsize = 12)\n",
    "\n",
    "ax = plot.facet_axis(0,0)\n",
    "for p in ax.patches:        \n",
    "    ax.text(p.get_x() + p.get_width()/2., p.get_height(), p.get_height(), fontsize=12, color='blue', ha='center', va='bottom')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since \"Newspaper Article\" column now has only one value for all rows - \"No\" , it is safe to drop this column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping Newspaper Article\n",
    "\n",
    "leadInfo = leadInfo.drop(['Newspaper Article'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 55,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 239.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# X Education Forums\n",
    "\n",
    "plot = sns.catplot(x=\"X Education Forums\", hue = \"Converted\", kind=\"count\", data=leadInfo, palette=\"Set2\", aspect = 0.5);\n",
    "\n",
    "plt.title('X Education Forums Vs Converted', fontsize = 14)\n",
    "plt.xlabel(\"X Education Forums\", fontsize = 12)\n",
    "plt.ylabel(\"Count\", fontsize = 12)\n",
    "\n",
    "ax = plot.facet_axis(0,0)\n",
    "for p in ax.patches:        \n",
    "    ax.text(p.get_x() + p.get_width()/2., p.get_height(), p.get_height(), fontsize=12, color='blue', ha='center', va='bottom')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since \"X Education Forums\" column now has only one value for all rows - \"No\" , it is safe to drop this column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping X Education Forum column\n",
    "\n",
    "leadInfo = leadInfo.drop(['X Education Forums'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 311.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plot = sns.catplot(x=\"Newspaper\", hue = \"Converted\", kind=\"count\", data=leadInfo, palette=\"Set2\", aspect = 0.7);\n",
    "\n",
    "plt.title('Newspaper Vs Converted', fontsize = 14)\n",
    "plt.xlabel(\"Newspaper\", fontsize = 12)\n",
    "plt.ylabel(\"Count\", fontsize = 12)\n",
    "\n",
    "# Print the counts\n",
    "\n",
    "ax = plot.facet_axis(0,0)\n",
    "for p in ax.patches:\n",
    "    \n",
    "    if np.isnan(p.get_height()):\n",
    "        height = 0\n",
    "    else:\n",
    "        height = p.get_height()\n",
    "    \n",
    "    height = int(height)\n",
    "    ax.text(p.get_x()+p.get_width()/2., height, height, fontsize=12, color='blue', ha='center', va='bottom')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since Newspaper column has only one row with \"Yes\" as the value and further since this lead did not get converted and rest of all the values are \"No\", we can safely drop the column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Dropping Newspaper column\n",
    "\n",
    "leadInfo = leadInfo.drop(['Newspaper'], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 311.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Digital Advertisement\n",
    "\n",
    "plot = sns.catplot(x=\"Digital Advertisement\", hue = \"Converted\", kind=\"count\", data=leadInfo, palette=\"Set2\", aspect = 0.7);\n",
    "\n",
    "plt.title('Digital Advertisement Vs Converted', fontsize = 14)\n",
    "plt.xlabel(\"Digital Advertisement\", fontsize = 12)\n",
    "plt.ylabel(\"Count\", fontsize = 12)\n",
    "\n",
    "ax = plot.facet_axis(0,0)\n",
    "for p in ax.patches:        \n",
    "    ax.text(p.get_x() + p.get_width()/2., p.get_height(), p.get_height(), fontsize=12, color='blue', ha='center', va='bottom')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can be noticed above that there were 2 leads that came from digital advertisement of which one lead got converted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 311.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Through Recommendations\n",
    "\n",
    "plot = sns.catplot(x=\"Through Recommendations\", hue = \"Converted\", kind=\"count\", data=leadInfo, palette=\"Set2\", aspect = 0.7);\n",
    "\n",
    "plt.title('Through Recommendations Vs Converted', fontsize = 14)\n",
    "plt.xlabel(\"Through Recommendations\", fontsize = 12)\n",
    "plt.ylabel(\"Count\", fontsize = 12)\n",
    "\n",
    "ax = plot.facet_axis(0,0)\n",
    "for p in ax.patches:        \n",
    "    ax.text(p.get_x() + p.get_width()/2., p.get_height(), p.get_height(), fontsize=12, color='blue', ha='center', va='bottom')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can be seen that a total of 6 leads came through recommendations of which 5 leads got converted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 61,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 311.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# A free copy of Mastering The Interview\n",
    "\n",
    "plot = sns.catplot(x=\"A free copy of Mastering The Interview\", hue = \"Converted\", kind=\"count\", data=leadInfo, palette=\"Set2\",\n",
    "                   aspect = 0.7);\n",
    "\n",
    "plt.title('Mastering Interview Copy Vs Converted', fontsize = 14)\n",
    "plt.xlabel(\"Mastering Interview Copy\", fontsize = 12)\n",
    "plt.ylabel(\"Count\", fontsize = 12)\n",
    "\n",
    "ax = plot.facet_axis(0,0)\n",
    "for p in ax.patches:        \n",
    "    ax.text(p.get_x() + p.get_width()/2., p.get_height(), p.get_height(), fontsize=12, color='blue', ha='center', va='bottom')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Conversion rate is high on leads who do not want a free copy of Mastering Interviews"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 62,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1139.75x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Last Notable Activity\n",
    "\n",
    "plot = sns.catplot(x=\"Last Notable Activity\", hue = \"Converted\", kind=\"count\", data=leadInfo, palette=\"Set2\", aspect = 3.0);\n",
    "\n",
    "plt.title('Last Notable Activity Vs Converted', fontsize = 14)\n",
    "plt.xlabel(\"Last Notable Activity\", fontsize = 12)\n",
    "plt.ylabel(\"Count\", fontsize = 12)\n",
    "plt.xticks(rotation=90)\n",
    "\n",
    "# Print the counts\n",
    "\n",
    "ax = plot.facet_axis(0,0)\n",
    "for p in ax.patches:\n",
    "    \n",
    "    if np.isnan(p.get_height()):\n",
    "        height = 0\n",
    "    else:\n",
    "        height = p.get_height()\n",
    "    \n",
    "    height = int(height)\n",
    "    ax.text(p.get_x()+p.get_width()/2., height, height, fontsize=12, color='blue', ha='center', va='bottom')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "It can be noticed that the conversion rate is high for \"SMS Sent\""
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1440x1440 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Now check the conversions for all numeric values\n",
    "\n",
    "plt.figure(figsize=(20,20))\n",
    "plt.subplot(4,3,1)\n",
    "sns.barplot(y = 'TotalVisits', x='Converted', palette='Set2', data = leadInfo)\n",
    "plt.subplot(4,3,2)\n",
    "sns.barplot(y = 'Total Time Spent on Website', x='Converted', palette='Set2', data = leadInfo)\n",
    "plt.subplot(4,3,3)\n",
    "sns.barplot(y = 'Page Views Per Visit', x='Converted', palette='Set2', data = leadInfo)\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The conversion rated were high for Total Visits, Total Time Spent on Website and Page Views Per Visit"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Step 4: Data Preparation - Creating Dummies"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Converting some binary variables (Yes/No) to 0/1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 64,
   "metadata": {},
   "outputs": [],
   "source": [
    "variablelist =  variablelist =  ['Do Not Email', 'Do Not Call', 'Search', 'Digital Advertisement', 'Through Recommendations', \n",
    "                                 'A free copy of Mastering The Interview']\n",
    "\n",
    "# Defining the map function\n",
    "def binary_map(x):\n",
    "    return x.map({'Yes': 1, \"No\": 0})\n",
    "\n",
    "# Applying the function to the columns\n",
    "leadInfo[variablelist] = leadInfo[variablelist].apply(binary_map)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prospect ID</th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Lead Origin</th>\n",
       "      <th>Lead Source</th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Do Not Call</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>What is your current occupation</th>\n",
       "      <th>Search</th>\n",
       "      <th>Digital Advertisement</th>\n",
       "      <th>Through Recommendations</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7927b2df-8bba-4d29-b9a2-b6e0beafe620</td>\n",
       "      <td>660737</td>\n",
       "      <td>API</td>\n",
       "      <td>Olark Chat</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2a272436-5132-4136-86fa-dcc88c88f482</td>\n",
       "      <td>660728</td>\n",
       "      <td>API</td>\n",
       "      <td>Organic Search</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>674</td>\n",
       "      <td>2.5</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8cc8c611-a219-4f35-ad23-fdfd2656bd8a</td>\n",
       "      <td>660727</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1532</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Student</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0cc2df48-7cf4-4e39-9de9-19797f9b38cc</td>\n",
       "      <td>660719</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3256f628-e534-4826-9d63-4a8b88782852</td>\n",
       "      <td>660681</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Google</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1428</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Prospect ID  Lead Number              Lead Origin  \\\n",
       "0  7927b2df-8bba-4d29-b9a2-b6e0beafe620       660737                      API   \n",
       "1  2a272436-5132-4136-86fa-dcc88c88f482       660728                      API   \n",
       "2  8cc8c611-a219-4f35-ad23-fdfd2656bd8a       660727  Landing Page Submission   \n",
       "3  0cc2df48-7cf4-4e39-9de9-19797f9b38cc       660719  Landing Page Submission   \n",
       "4  3256f628-e534-4826-9d63-4a8b88782852       660681  Landing Page Submission   \n",
       "\n",
       "      Lead Source  Do Not Email  Do Not Call  Converted  TotalVisits  \\\n",
       "0      Olark Chat             0            0          0          0.0   \n",
       "1  Organic Search             0            0          0          5.0   \n",
       "2  Direct Traffic             0            0          1          2.0   \n",
       "3  Direct Traffic             0            0          0          1.0   \n",
       "4          Google             0            0          1          2.0   \n",
       "\n",
       "   Total Time Spent on Website  Page Views Per Visit  \\\n",
       "0                            0                   0.0   \n",
       "1                          674                   2.5   \n",
       "2                         1532                   2.0   \n",
       "3                          305                   1.0   \n",
       "4                         1428                   1.0   \n",
       "\n",
       "  What is your current occupation  Search  Digital Advertisement  \\\n",
       "0                      Unemployed       0                      0   \n",
       "1                      Unemployed       0                      0   \n",
       "2                         Student       0                      0   \n",
       "3                      Unemployed       0                      0   \n",
       "4                      Unemployed       0                      0   \n",
       "\n",
       "   Through Recommendations  A free copy of Mastering The Interview  \n",
       "0                        0                                       0  \n",
       "1                        0                                       0  \n",
       "2                        0                                       1  \n",
       "3                        0                                       0  \n",
       "4                        0                                       0  "
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "leadInfo = leadInfo.drop(['Last Activity','Last Notable Activity'],1)\n",
    "leadInfo.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 66,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Prospect ID</th>\n",
       "      <th>Lead Number</th>\n",
       "      <th>Lead Origin</th>\n",
       "      <th>Lead Source</th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Do Not Call</th>\n",
       "      <th>Converted</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>What is your current occupation</th>\n",
       "      <th>Search</th>\n",
       "      <th>Digital Advertisement</th>\n",
       "      <th>Through Recommendations</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Lead Origin_Landing Page Submission</th>\n",
       "      <th>Lead Origin_Lead Add Form</th>\n",
       "      <th>Lead Origin_Lead Import</th>\n",
       "      <th>Lead Origin_Quick Add Form</th>\n",
       "      <th>Lead Source_Google</th>\n",
       "      <th>Lead Source_Olark Chat</th>\n",
       "      <th>Lead Source_Organic Search</th>\n",
       "      <th>Lead Source_Other Source</th>\n",
       "      <th>Lead Source_Reference</th>\n",
       "      <th>Lead Source_Referral Sites</th>\n",
       "      <th>Lead Source_Welingak Website</th>\n",
       "      <th>What is your current occupation_Student</th>\n",
       "      <th>What is your current occupation_Unemployed</th>\n",
       "      <th>What is your current occupation_Working Professional</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>7927b2df-8bba-4d29-b9a2-b6e0beafe620</td>\n",
       "      <td>660737</td>\n",
       "      <td>API</td>\n",
       "      <td>Olark Chat</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2a272436-5132-4136-86fa-dcc88c88f482</td>\n",
       "      <td>660728</td>\n",
       "      <td>API</td>\n",
       "      <td>Organic Search</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>674</td>\n",
       "      <td>2.5</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8cc8c611-a219-4f35-ad23-fdfd2656bd8a</td>\n",
       "      <td>660727</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1532</td>\n",
       "      <td>2.0</td>\n",
       "      <td>Student</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0cc2df48-7cf4-4e39-9de9-19797f9b38cc</td>\n",
       "      <td>660719</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Direct Traffic</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>3256f628-e534-4826-9d63-4a8b88782852</td>\n",
       "      <td>660681</td>\n",
       "      <td>Landing Page Submission</td>\n",
       "      <td>Google</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1428</td>\n",
       "      <td>1.0</td>\n",
       "      <td>Unemployed</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                            Prospect ID  Lead Number              Lead Origin  \\\n",
       "0  7927b2df-8bba-4d29-b9a2-b6e0beafe620       660737                      API   \n",
       "1  2a272436-5132-4136-86fa-dcc88c88f482       660728                      API   \n",
       "2  8cc8c611-a219-4f35-ad23-fdfd2656bd8a       660727  Landing Page Submission   \n",
       "3  0cc2df48-7cf4-4e39-9de9-19797f9b38cc       660719  Landing Page Submission   \n",
       "4  3256f628-e534-4826-9d63-4a8b88782852       660681  Landing Page Submission   \n",
       "\n",
       "      Lead Source  Do Not Email  Do Not Call  Converted  TotalVisits  \\\n",
       "0      Olark Chat             0            0          0          0.0   \n",
       "1  Organic Search             0            0          0          5.0   \n",
       "2  Direct Traffic             0            0          1          2.0   \n",
       "3  Direct Traffic             0            0          0          1.0   \n",
       "4          Google             0            0          1          2.0   \n",
       "\n",
       "   Total Time Spent on Website  Page Views Per Visit  \\\n",
       "0                            0                   0.0   \n",
       "1                          674                   2.5   \n",
       "2                         1532                   2.0   \n",
       "3                          305                   1.0   \n",
       "4                         1428                   1.0   \n",
       "\n",
       "  What is your current occupation  Search  Digital Advertisement  \\\n",
       "0                      Unemployed       0                      0   \n",
       "1                      Unemployed       0                      0   \n",
       "2                         Student       0                      0   \n",
       "3                      Unemployed       0                      0   \n",
       "4                      Unemployed       0                      0   \n",
       "\n",
       "   Through Recommendations  A free copy of Mastering The Interview  \\\n",
       "0                        0                                       0   \n",
       "1                        0                                       0   \n",
       "2                        0                                       1   \n",
       "3                        0                                       0   \n",
       "4                        0                                       0   \n",
       "\n",
       "   Lead Origin_Landing Page Submission  Lead Origin_Lead Add Form  \\\n",
       "0                                    0                          0   \n",
       "1                                    0                          0   \n",
       "2                                    1                          0   \n",
       "3                                    1                          0   \n",
       "4                                    1                          0   \n",
       "\n",
       "   Lead Origin_Lead Import  Lead Origin_Quick Add Form  Lead Source_Google  \\\n",
       "0                        0                           0                   0   \n",
       "1                        0                           0                   0   \n",
       "2                        0                           0                   0   \n",
       "3                        0                           0                   0   \n",
       "4                        0                           0                   1   \n",
       "\n",
       "   Lead Source_Olark Chat  Lead Source_Organic Search  \\\n",
       "0                       1                           0   \n",
       "1                       0                           1   \n",
       "2                       0                           0   \n",
       "3                       0                           0   \n",
       "4                       0                           0   \n",
       "\n",
       "   Lead Source_Other Source  Lead Source_Reference  \\\n",
       "0                         0                      0   \n",
       "1                         0                      0   \n",
       "2                         0                      0   \n",
       "3                         0                      0   \n",
       "4                         0                      0   \n",
       "\n",
       "   Lead Source_Referral Sites  Lead Source_Welingak Website  \\\n",
       "0                           0                             0   \n",
       "1                           0                             0   \n",
       "2                           0                             0   \n",
       "3                           0                             0   \n",
       "4                           0                             0   \n",
       "\n",
       "   What is your current occupation_Student  \\\n",
       "0                                        0   \n",
       "1                                        0   \n",
       "2                                        1   \n",
       "3                                        0   \n",
       "4                                        0   \n",
       "\n",
       "   What is your current occupation_Unemployed  \\\n",
       "0                                           1   \n",
       "1                                           1   \n",
       "2                                           0   \n",
       "3                                           1   \n",
       "4                                           1   \n",
       "\n",
       "   What is your current occupation_Working Professional  \n",
       "0                                                  0     \n",
       "1                                                  0     \n",
       "2                                                  0     \n",
       "3                                                  0     \n",
       "4                                                  0     "
      ]
     },
     "execution_count": 66,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Creating dummies for the following columns below\n",
    "\n",
    "dummy_ = pd.get_dummies(leadInfo[['Lead Origin', 'Lead Source','What is your current occupation']], drop_first=True)\n",
    "leadInfo = pd.concat([leadInfo, dummy_], axis=1)\n",
    "leadInfo.head()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 67,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove following columns from the leadInfo\n",
    "\n",
    "# a) Prospect ID\n",
    "# b) Lead Numbers\n",
    "# c) Lead Origin\n",
    "# d) Lead Source\n",
    "# e) Last Activity\n",
    "# f) What is your current occupation\n",
    "# g) Last Notable Activity\n",
    "\n",
    "leadInfo = leadInfo.drop(['Prospect ID', 'Lead Number', 'Lead Origin', 'Lead Source',\n",
    "                          'What is your current occupation'], axis=1)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 9029 entries, 0 to 9239\n",
      "Data columns (total 24 columns):\n",
      " #   Column                                                Non-Null Count  Dtype  \n",
      "---  ------                                                --------------  -----  \n",
      " 0   Do Not Email                                          9029 non-null   int64  \n",
      " 1   Do Not Call                                           9029 non-null   int64  \n",
      " 2   Converted                                             9029 non-null   int64  \n",
      " 3   TotalVisits                                           9029 non-null   float64\n",
      " 4   Total Time Spent on Website                           9029 non-null   int64  \n",
      " 5   Page Views Per Visit                                  9029 non-null   float64\n",
      " 6   Search                                                9029 non-null   int64  \n",
      " 7   Digital Advertisement                                 9029 non-null   int64  \n",
      " 8   Through Recommendations                               9029 non-null   int64  \n",
      " 9   A free copy of Mastering The Interview                9029 non-null   int64  \n",
      " 10  Lead Origin_Landing Page Submission                   9029 non-null   uint8  \n",
      " 11  Lead Origin_Lead Add Form                             9029 non-null   uint8  \n",
      " 12  Lead Origin_Lead Import                               9029 non-null   uint8  \n",
      " 13  Lead Origin_Quick Add Form                            9029 non-null   uint8  \n",
      " 14  Lead Source_Google                                    9029 non-null   uint8  \n",
      " 15  Lead Source_Olark Chat                                9029 non-null   uint8  \n",
      " 16  Lead Source_Organic Search                            9029 non-null   uint8  \n",
      " 17  Lead Source_Other Source                              9029 non-null   uint8  \n",
      " 18  Lead Source_Reference                                 9029 non-null   uint8  \n",
      " 19  Lead Source_Referral Sites                            9029 non-null   uint8  \n",
      " 20  Lead Source_Welingak Website                          9029 non-null   uint8  \n",
      " 21  What is your current occupation_Student               9029 non-null   uint8  \n",
      " 22  What is your current occupation_Unemployed            9029 non-null   uint8  \n",
      " 23  What is your current occupation_Working Professional  9029 non-null   uint8  \n",
      "dtypes: float64(2), int64(8), uint8(14)\n",
      "memory usage: 1.1 MB\n"
     ]
    }
   ],
   "source": [
    "leadInfo.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Do Not Email                                            0.0\n",
      "Do Not Call                                             0.0\n",
      "Converted                                               0.0\n",
      "TotalVisits                                             0.0\n",
      "Total Time Spent on Website                             0.0\n",
      "Page Views Per Visit                                    0.0\n",
      "Search                                                  0.0\n",
      "Digital Advertisement                                   0.0\n",
      "Through Recommendations                                 0.0\n",
      "A free copy of Mastering The Interview                  0.0\n",
      "Lead Origin_Landing Page Submission                     0.0\n",
      "Lead Origin_Lead Add Form                               0.0\n",
      "Lead Origin_Lead Import                                 0.0\n",
      "Lead Origin_Quick Add Form                              0.0\n",
      "Lead Source_Google                                      0.0\n",
      "Lead Source_Olark Chat                                  0.0\n",
      "Lead Source_Organic Search                              0.0\n",
      "Lead Source_Other Source                                0.0\n",
      "Lead Source_Reference                                   0.0\n",
      "Lead Source_Referral Sites                              0.0\n",
      "Lead Source_Welingak Website                            0.0\n",
      "What is your current occupation_Student                 0.0\n",
      "What is your current occupation_Unemployed              0.0\n",
      "What is your current occupation_Working Professional    0.0\n",
      "dtype: float64\n"
     ]
    }
   ],
   "source": [
    "# check for percentage of null values in each column\n",
    "\n",
    "percent_missing = round(100*(leadInfo.isnull().sum()/len(leadInfo.index)), 2)\n",
    "print(percent_missing)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 70,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(9029, 24)"
      ]
     },
     "execution_count": 70,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check shape of the data frame\n",
    "\n",
    "leadInfo.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since there are around 24 columns, we will not be looking at the correlation using heat map as we will not be able to infer anything from the heat map due to huge data"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 5: Test-Train Split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 71,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 72,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Do Not Call</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>Search</th>\n",
       "      <th>Digital Advertisement</th>\n",
       "      <th>Through Recommendations</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Lead Origin_Landing Page Submission</th>\n",
       "      <th>Lead Origin_Lead Add Form</th>\n",
       "      <th>Lead Origin_Lead Import</th>\n",
       "      <th>Lead Origin_Quick Add Form</th>\n",
       "      <th>Lead Source_Google</th>\n",
       "      <th>Lead Source_Olark Chat</th>\n",
       "      <th>Lead Source_Organic Search</th>\n",
       "      <th>Lead Source_Other Source</th>\n",
       "      <th>Lead Source_Reference</th>\n",
       "      <th>Lead Source_Referral Sites</th>\n",
       "      <th>Lead Source_Welingak Website</th>\n",
       "      <th>What is your current occupation_Student</th>\n",
       "      <th>What is your current occupation_Unemployed</th>\n",
       "      <th>What is your current occupation_Working Professional</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5.0</td>\n",
       "      <td>674</td>\n",
       "      <td>2.5</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1532</td>\n",
       "      <td>2.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>305</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2.0</td>\n",
       "      <td>1428</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Do Not Email  Do Not Call  TotalVisits  Total Time Spent on Website  \\\n",
       "0             0            0          0.0                            0   \n",
       "1             0            0          5.0                          674   \n",
       "2             0            0          2.0                         1532   \n",
       "3             0            0          1.0                          305   \n",
       "4             0            0          2.0                         1428   \n",
       "\n",
       "   Page Views Per Visit  Search  Digital Advertisement  \\\n",
       "0                   0.0       0                      0   \n",
       "1                   2.5       0                      0   \n",
       "2                   2.0       0                      0   \n",
       "3                   1.0       0                      0   \n",
       "4                   1.0       0                      0   \n",
       "\n",
       "   Through Recommendations  A free copy of Mastering The Interview  \\\n",
       "0                        0                                       0   \n",
       "1                        0                                       0   \n",
       "2                        0                                       1   \n",
       "3                        0                                       0   \n",
       "4                        0                                       0   \n",
       "\n",
       "   Lead Origin_Landing Page Submission  Lead Origin_Lead Add Form  \\\n",
       "0                                    0                          0   \n",
       "1                                    0                          0   \n",
       "2                                    1                          0   \n",
       "3                                    1                          0   \n",
       "4                                    1                          0   \n",
       "\n",
       "   Lead Origin_Lead Import  Lead Origin_Quick Add Form  Lead Source_Google  \\\n",
       "0                        0                           0                   0   \n",
       "1                        0                           0                   0   \n",
       "2                        0                           0                   0   \n",
       "3                        0                           0                   0   \n",
       "4                        0                           0                   1   \n",
       "\n",
       "   Lead Source_Olark Chat  Lead Source_Organic Search  \\\n",
       "0                       1                           0   \n",
       "1                       0                           1   \n",
       "2                       0                           0   \n",
       "3                       0                           0   \n",
       "4                       0                           0   \n",
       "\n",
       "   Lead Source_Other Source  Lead Source_Reference  \\\n",
       "0                         0                      0   \n",
       "1                         0                      0   \n",
       "2                         0                      0   \n",
       "3                         0                      0   \n",
       "4                         0                      0   \n",
       "\n",
       "   Lead Source_Referral Sites  Lead Source_Welingak Website  \\\n",
       "0                           0                             0   \n",
       "1                           0                             0   \n",
       "2                           0                             0   \n",
       "3                           0                             0   \n",
       "4                           0                             0   \n",
       "\n",
       "   What is your current occupation_Student  \\\n",
       "0                                        0   \n",
       "1                                        0   \n",
       "2                                        1   \n",
       "3                                        0   \n",
       "4                                        0   \n",
       "\n",
       "   What is your current occupation_Unemployed  \\\n",
       "0                                           1   \n",
       "1                                           1   \n",
       "2                                           0   \n",
       "3                                           1   \n",
       "4                                           1   \n",
       "\n",
       "   What is your current occupation_Working Professional  \n",
       "0                                                  0     \n",
       "1                                                  0     \n",
       "2                                                  0     \n",
       "3                                                  0     \n",
       "4                                                  0     "
      ]
     },
     "execution_count": 72,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Putting feature variable to X\n",
    "\n",
    "X = leadInfo.drop(['Converted'], axis=1)\n",
    "X.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 73,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0    0\n",
       "1    0\n",
       "2    1\n",
       "3    0\n",
       "4    1\n",
       "Name: Converted, dtype: int64"
      ]
     },
     "execution_count": 73,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Putting response variable to y\n",
    "\n",
    "y = leadInfo['Converted']\n",
    "y.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 74,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Splitting the data into train and test\n",
    "\n",
    "X_train, X_test, y_train, y_test = train_test_split(X, y, train_size=0.7, test_size=0.3, random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 6: Rescaling the features with MinMax Scaling"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>Do Not Call</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Page Views Per Visit</th>\n",
       "      <th>Search</th>\n",
       "      <th>Digital Advertisement</th>\n",
       "      <th>Through Recommendations</th>\n",
       "      <th>A free copy of Mastering The Interview</th>\n",
       "      <th>Lead Origin_Landing Page Submission</th>\n",
       "      <th>Lead Origin_Lead Add Form</th>\n",
       "      <th>Lead Origin_Lead Import</th>\n",
       "      <th>Lead Origin_Quick Add Form</th>\n",
       "      <th>Lead Source_Google</th>\n",
       "      <th>Lead Source_Olark Chat</th>\n",
       "      <th>Lead Source_Organic Search</th>\n",
       "      <th>Lead Source_Other Source</th>\n",
       "      <th>Lead Source_Reference</th>\n",
       "      <th>Lead Source_Referral Sites</th>\n",
       "      <th>Lead Source_Welingak Website</th>\n",
       "      <th>What is your current occupation_Student</th>\n",
       "      <th>What is your current occupation_Unemployed</th>\n",
       "      <th>What is your current occupation_Working Professional</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2240</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.1875</td>\n",
       "      <td>0.898963</td>\n",
       "      <td>0.375</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>113</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.3125</td>\n",
       "      <td>0.706360</td>\n",
       "      <td>0.625</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4132</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.3750</td>\n",
       "      <td>0.768155</td>\n",
       "      <td>0.750</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5573</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.1250</td>\n",
       "      <td>0.028868</td>\n",
       "      <td>0.250</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1109</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0.0625</td>\n",
       "      <td>0.009021</td>\n",
       "      <td>0.125</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Do Not Email  Do Not Call  TotalVisits  Total Time Spent on Website  \\\n",
       "2240             0            0       0.1875                     0.898963   \n",
       "113              0            0       0.3125                     0.706360   \n",
       "4132             0            0       0.3750                     0.768155   \n",
       "5573             0            0       0.1250                     0.028868   \n",
       "1109             0            0       0.0625                     0.009021   \n",
       "\n",
       "      Page Views Per Visit  Search  Digital Advertisement  \\\n",
       "2240                 0.375       0                      0   \n",
       "113                  0.625       0                      0   \n",
       "4132                 0.750       0                      0   \n",
       "5573                 0.250       0                      0   \n",
       "1109                 0.125       0                      0   \n",
       "\n",
       "      Through Recommendations  A free copy of Mastering The Interview  \\\n",
       "2240                        0                                       0   \n",
       "113                         0                                       0   \n",
       "4132                        0                                       1   \n",
       "5573                        0                                       1   \n",
       "1109                        0                                       0   \n",
       "\n",
       "      Lead Origin_Landing Page Submission  Lead Origin_Lead Add Form  \\\n",
       "2240                                    1                          0   \n",
       "113                                     0                          0   \n",
       "4132                                    1                          0   \n",
       "5573                                    1                          0   \n",
       "1109                                    0                          0   \n",
       "\n",
       "      Lead Origin_Lead Import  Lead Origin_Quick Add Form  Lead Source_Google  \\\n",
       "2240                        0                           0                   1   \n",
       "113                         0                           0                   0   \n",
       "4132                        0                           0                   0   \n",
       "5573                        0                           0                   0   \n",
       "1109                        0                           0                   1   \n",
       "\n",
       "      Lead Source_Olark Chat  Lead Source_Organic Search  \\\n",
       "2240                       0                           0   \n",
       "113                        0                           0   \n",
       "4132                       0                           0   \n",
       "5573                       0                           0   \n",
       "1109                       0                           0   \n",
       "\n",
       "      Lead Source_Other Source  Lead Source_Reference  \\\n",
       "2240                         0                      0   \n",
       "113                          0                      0   \n",
       "4132                         0                      0   \n",
       "5573                         0                      0   \n",
       "1109                         0                      0   \n",
       "\n",
       "      Lead Source_Referral Sites  Lead Source_Welingak Website  \\\n",
       "2240                           0                             0   \n",
       "113                            0                             0   \n",
       "4132                           0                             0   \n",
       "5573                           0                             0   \n",
       "1109                           0                             0   \n",
       "\n",
       "      What is your current occupation_Student  \\\n",
       "2240                                        0   \n",
       "113                                         0   \n",
       "4132                                        0   \n",
       "5573                                        0   \n",
       "1109                                        0   \n",
       "\n",
       "      What is your current occupation_Unemployed  \\\n",
       "2240                                           0   \n",
       "113                                            1   \n",
       "4132                                           1   \n",
       "5573                                           1   \n",
       "1109                                           0   \n",
       "\n",
       "      What is your current occupation_Working Professional  \n",
       "2240                                                  0     \n",
       "113                                                   0     \n",
       "4132                                                  0     \n",
       "5573                                                  0     \n",
       "1109                                                  0     "
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn.preprocessing import MinMaxScaler\n",
    "\n",
    "scaler = MinMaxScaler()\n",
    "\n",
    "X_train[['TotalVisits','Total Time Spent on Website','Page Views Per Visit']] = scaler.fit_transform(X_train[['TotalVisits',\n",
    "                                                                        'Total Time Spent on Website','Page Views Per Visit']])\n",
    "\n",
    "X_train.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 76,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "38.50924797873519"
      ]
     },
     "execution_count": 76,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "### Checking the Conversion Rate percentage\n",
    "\n",
    "converted = (sum(leadInfo['Converted'])/len(leadInfo['Converted'].index))*100\n",
    "converted"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### We have almost 39% conversion rate"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 7: Model Building\n",
    "Assessing the model with StatsModels"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Running the Initial Training Model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 77,
   "metadata": {},
   "outputs": [],
   "source": [
    "import statsmodels.api as sm"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 78,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Generalized Linear Model Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Converted</td>    <th>  No. Observations:  </th>  <td>  6320</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                  <td>GLM</td>       <th>  Df Residuals:      </th>  <td>  6296</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model Family:</th>        <td>Binomial</td>     <th>  Df Model:          </th>  <td>    23</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Link Function:</th>         <td>logit</td>      <th>  Scale:             </th> <td>  1.0000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                <td>IRLS</td>       <th>  Log-Likelihood:    </th> <td> -2810.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Tue, 11 Jan 2022</td> <th>  Deviance:          </th> <td>  5620.3</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>12:35:28</td>     <th>  Pearson chi2:      </th> <td>6.85e+03</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Iterations:</th>         <td>20</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                            <td></td>                              <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                                                <td>   -3.4499</td> <td>    0.156</td> <td>  -22.078</td> <td> 0.000</td> <td>   -3.756</td> <td>   -3.144</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Do Not Email</th>                                         <td>   -1.2403</td> <td>    0.162</td> <td>   -7.647</td> <td> 0.000</td> <td>   -1.558</td> <td>   -0.922</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Do Not Call</th>                                          <td>   19.6499</td> <td> 2.05e+04</td> <td>    0.001</td> <td> 0.999</td> <td>-4.02e+04</td> <td> 4.03e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>TotalVisits</th>                                          <td>    1.4107</td> <td>    0.275</td> <td>    5.124</td> <td> 0.000</td> <td>    0.871</td> <td>    1.950</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Total Time Spent on Website</th>                          <td>    4.4810</td> <td>    0.161</td> <td>   27.908</td> <td> 0.000</td> <td>    4.166</td> <td>    4.796</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Page Views Per Visit</th>                                 <td>   -0.2783</td> <td>    0.245</td> <td>   -1.137</td> <td> 0.256</td> <td>   -0.758</td> <td>    0.202</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Search</th>                                               <td>   -1.7792</td> <td>    1.066</td> <td>   -1.669</td> <td> 0.095</td> <td>   -3.868</td> <td>    0.310</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Digital Advertisement</th>                                <td>    0.3012</td> <td>    1.794</td> <td>    0.168</td> <td> 0.867</td> <td>   -3.215</td> <td>    3.817</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Through Recommendations</th>                              <td>    1.2520</td> <td>    2.315</td> <td>    0.541</td> <td> 0.589</td> <td>   -3.285</td> <td>    5.789</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>A free copy of Mastering The Interview</th>               <td>   -0.0992</td> <td>    0.104</td> <td>   -0.952</td> <td> 0.341</td> <td>   -0.304</td> <td>    0.105</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Landing Page Submission</th>                  <td>    0.0377</td> <td>    0.103</td> <td>    0.367</td> <td> 0.714</td> <td>   -0.164</td> <td>    0.239</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Lead Add Form</th>                            <td>    3.4712</td> <td>    0.502</td> <td>    6.915</td> <td> 0.000</td> <td>    2.487</td> <td>    4.455</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Lead Import</th>                              <td>    0.3466</td> <td>    0.908</td> <td>    0.382</td> <td> 0.703</td> <td>   -1.433</td> <td>    2.126</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Quick Add Form</th>                           <td>   19.9149</td> <td> 2.92e+04</td> <td>    0.001</td> <td> 0.999</td> <td>-5.73e+04</td> <td> 5.73e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Google</th>                                   <td>    0.3441</td> <td>    0.111</td> <td>    3.101</td> <td> 0.002</td> <td>    0.127</td> <td>    0.562</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Olark Chat</th>                               <td>    1.4098</td> <td>    0.155</td> <td>    9.091</td> <td> 0.000</td> <td>    1.106</td> <td>    1.714</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Organic Search</th>                           <td>    0.2502</td> <td>    0.126</td> <td>    1.978</td> <td> 0.048</td> <td>    0.002</td> <td>    0.498</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Other Source</th>                             <td>   -0.3065</td> <td>    0.814</td> <td>   -0.376</td> <td> 0.707</td> <td>   -1.902</td> <td>    1.289</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Reference</th>                                <td>    0.5624</td> <td>    0.538</td> <td>    1.046</td> <td> 0.295</td> <td>   -0.491</td> <td>    1.616</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Referral Sites</th>                           <td>   -0.2807</td> <td>    0.338</td> <td>   -0.829</td> <td> 0.407</td> <td>   -0.944</td> <td>    0.383</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Welingak Website</th>                         <td>    2.7491</td> <td>    0.873</td> <td>    3.149</td> <td> 0.002</td> <td>    1.038</td> <td>    4.460</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Student</th>              <td>    1.0015</td> <td>    0.218</td> <td>    4.601</td> <td> 0.000</td> <td>    0.575</td> <td>    1.428</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Unemployed</th>           <td>    1.3214</td> <td>    0.083</td> <td>   15.878</td> <td> 0.000</td> <td>    1.158</td> <td>    1.484</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Working Professional</th> <td>    3.9611</td> <td>    0.204</td> <td>   19.391</td> <td> 0.000</td> <td>    3.561</td> <td>    4.361</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                 Generalized Linear Model Regression Results                  \n",
       "==============================================================================\n",
       "Dep. Variable:              Converted   No. Observations:                 6320\n",
       "Model:                            GLM   Df Residuals:                     6296\n",
       "Model Family:                Binomial   Df Model:                           23\n",
       "Link Function:                  logit   Scale:                          1.0000\n",
       "Method:                          IRLS   Log-Likelihood:                -2810.2\n",
       "Date:                Tue, 11 Jan 2022   Deviance:                       5620.3\n",
       "Time:                        12:35:28   Pearson chi2:                 6.85e+03\n",
       "No. Iterations:                    20                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================================================\n",
       "                                                           coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------------------------------------\n",
       "const                                                   -3.4499      0.156    -22.078      0.000      -3.756      -3.144\n",
       "Do Not Email                                            -1.2403      0.162     -7.647      0.000      -1.558      -0.922\n",
       "Do Not Call                                             19.6499   2.05e+04      0.001      0.999   -4.02e+04    4.03e+04\n",
       "TotalVisits                                              1.4107      0.275      5.124      0.000       0.871       1.950\n",
       "Total Time Spent on Website                              4.4810      0.161     27.908      0.000       4.166       4.796\n",
       "Page Views Per Visit                                    -0.2783      0.245     -1.137      0.256      -0.758       0.202\n",
       "Search                                                  -1.7792      1.066     -1.669      0.095      -3.868       0.310\n",
       "Digital Advertisement                                    0.3012      1.794      0.168      0.867      -3.215       3.817\n",
       "Through Recommendations                                  1.2520      2.315      0.541      0.589      -3.285       5.789\n",
       "A free copy of Mastering The Interview                  -0.0992      0.104     -0.952      0.341      -0.304       0.105\n",
       "Lead Origin_Landing Page Submission                      0.0377      0.103      0.367      0.714      -0.164       0.239\n",
       "Lead Origin_Lead Add Form                                3.4712      0.502      6.915      0.000       2.487       4.455\n",
       "Lead Origin_Lead Import                                  0.3466      0.908      0.382      0.703      -1.433       2.126\n",
       "Lead Origin_Quick Add Form                              19.9149   2.92e+04      0.001      0.999   -5.73e+04    5.73e+04\n",
       "Lead Source_Google                                       0.3441      0.111      3.101      0.002       0.127       0.562\n",
       "Lead Source_Olark Chat                                   1.4098      0.155      9.091      0.000       1.106       1.714\n",
       "Lead Source_Organic Search                               0.2502      0.126      1.978      0.048       0.002       0.498\n",
       "Lead Source_Other Source                                -0.3065      0.814     -0.376      0.707      -1.902       1.289\n",
       "Lead Source_Reference                                    0.5624      0.538      1.046      0.295      -0.491       1.616\n",
       "Lead Source_Referral Sites                              -0.2807      0.338     -0.829      0.407      -0.944       0.383\n",
       "Lead Source_Welingak Website                             2.7491      0.873      3.149      0.002       1.038       4.460\n",
       "What is your current occupation_Student                  1.0015      0.218      4.601      0.000       0.575       1.428\n",
       "What is your current occupation_Unemployed               1.3214      0.083     15.878      0.000       1.158       1.484\n",
       "What is your current occupation_Working Professional     3.9611      0.204     19.391      0.000       3.561       4.361\n",
       "========================================================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 78,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Logistic regression model\n",
    "logm1 = sm.GLM(y_train,(sm.add_constant(X_train)), family = sm.families.Binomial())\n",
    "logm1.fit().summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 8: Feature Selection Using RFE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 79,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "logreg = LogisticRegression()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.feature_selection import RFE\n",
    "\n",
    "# running RFE with 20 variables as output\n",
    "\n",
    "rfe = RFE(logreg, 20)            \n",
    "rfe = rfe.fit(X_train, y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 81,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([ True,  True,  True,  True,  True,  True, False,  True,  True,\n",
       "       False,  True, False,  True,  True,  True,  True,  True,  True,\n",
       "        True,  True,  True,  True,  True])"
      ]
     },
     "execution_count": 81,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rfe.support_"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 82,
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[('Do Not Email', True, 1),\n",
       " ('Do Not Call', True, 1),\n",
       " ('TotalVisits', True, 1),\n",
       " ('Total Time Spent on Website', True, 1),\n",
       " ('Page Views Per Visit', True, 1),\n",
       " ('Search', True, 1),\n",
       " ('Digital Advertisement', False, 3),\n",
       " ('Through Recommendations', True, 1),\n",
       " ('A free copy of Mastering The Interview', True, 1),\n",
       " ('Lead Origin_Landing Page Submission', False, 4),\n",
       " ('Lead Origin_Lead Add Form', True, 1),\n",
       " ('Lead Origin_Lead Import', False, 2),\n",
       " ('Lead Origin_Quick Add Form', True, 1),\n",
       " ('Lead Source_Google', True, 1),\n",
       " ('Lead Source_Olark Chat', True, 1),\n",
       " ('Lead Source_Organic Search', True, 1),\n",
       " ('Lead Source_Other Source', True, 1),\n",
       " ('Lead Source_Reference', True, 1),\n",
       " ('Lead Source_Referral Sites', True, 1),\n",
       " ('Lead Source_Welingak Website', True, 1),\n",
       " ('What is your current occupation_Student', True, 1),\n",
       " ('What is your current occupation_Unemployed', True, 1),\n",
       " ('What is your current occupation_Working Professional', True, 1)]"
      ]
     },
     "execution_count": 82,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "list(zip(X_train.columns, rfe.support_, rfe.ranking_))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 83,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['Do Not Email', 'Do Not Call', 'TotalVisits',\n",
       "       'Total Time Spent on Website', 'Page Views Per Visit', 'Search',\n",
       "       'Through Recommendations', 'A free copy of Mastering The Interview',\n",
       "       'Lead Origin_Lead Add Form', 'Lead Origin_Quick Add Form',\n",
       "       'Lead Source_Google', 'Lead Source_Olark Chat',\n",
       "       'Lead Source_Organic Search', 'Lead Source_Other Source',\n",
       "       'Lead Source_Reference', 'Lead Source_Referral Sites',\n",
       "       'Lead Source_Welingak Website',\n",
       "       'What is your current occupation_Student',\n",
       "       'What is your current occupation_Unemployed',\n",
       "       'What is your current occupation_Working Professional'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 83,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# variables shortlisted by RFE\n",
    "\n",
    "col = X_train.columns[rfe.support_]\n",
    "col"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Rebuilding Model - Model 2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 84,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Generalized Linear Model Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Converted</td>    <th>  No. Observations:  </th>  <td>  6320</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                  <td>GLM</td>       <th>  Df Residuals:      </th>  <td>  6299</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model Family:</th>        <td>Binomial</td>     <th>  Df Model:          </th>  <td>    20</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Link Function:</th>         <td>logit</td>      <th>  Scale:             </th> <td>  1.0000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                <td>IRLS</td>       <th>  Log-Likelihood:    </th> <td> -2810.3</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Tue, 11 Jan 2022</td> <th>  Deviance:          </th> <td>  5620.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>12:35:28</td>     <th>  Pearson chi2:      </th> <td>6.86e+03</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Iterations:</th>         <td>20</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                            <td></td>                              <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                                                <td>   -3.4291</td> <td>    0.147</td> <td>  -23.256</td> <td> 0.000</td> <td>   -3.718</td> <td>   -3.140</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Do Not Email</th>                                         <td>   -1.2367</td> <td>    0.162</td> <td>   -7.636</td> <td> 0.000</td> <td>   -1.554</td> <td>   -0.919</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Do Not Call</th>                                          <td>   19.6364</td> <td> 2.05e+04</td> <td>    0.001</td> <td> 0.999</td> <td>-4.02e+04</td> <td> 4.02e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>TotalVisits</th>                                          <td>    1.4089</td> <td>    0.275</td> <td>    5.119</td> <td> 0.000</td> <td>    0.869</td> <td>    1.948</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Total Time Spent on Website</th>                          <td>    4.4801</td> <td>    0.161</td> <td>   27.909</td> <td> 0.000</td> <td>    4.166</td> <td>    4.795</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Page Views Per Visit</th>                                 <td>   -0.2593</td> <td>    0.238</td> <td>   -1.091</td> <td> 0.275</td> <td>   -0.725</td> <td>    0.206</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Search</th>                                               <td>   -1.7792</td> <td>    1.066</td> <td>   -1.668</td> <td> 0.095</td> <td>   -3.869</td> <td>    0.311</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Through Recommendations</th>                              <td>    1.2506</td> <td>    2.316</td> <td>    0.540</td> <td> 0.589</td> <td>   -3.290</td> <td>    5.791</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>A free copy of Mastering The Interview</th>               <td>   -0.0885</td> <td>    0.099</td> <td>   -0.894</td> <td> 0.371</td> <td>   -0.282</td> <td>    0.105</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Lead Add Form</th>                            <td>    3.4219</td> <td>    0.490</td> <td>    6.988</td> <td> 0.000</td> <td>    2.462</td> <td>    4.382</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Quick Add Form</th>                           <td>   19.8915</td> <td> 2.92e+04</td> <td>    0.001</td> <td> 0.999</td> <td>-5.73e+04</td> <td> 5.73e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Google</th>                                   <td>    0.3380</td> <td>    0.110</td> <td>    3.078</td> <td> 0.002</td> <td>    0.123</td> <td>    0.553</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Olark Chat</th>                               <td>    1.3874</td> <td>    0.145</td> <td>    9.580</td> <td> 0.000</td> <td>    1.104</td> <td>    1.671</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Organic Search</th>                           <td>    0.2363</td> <td>    0.121</td> <td>    1.953</td> <td> 0.051</td> <td>   -0.001</td> <td>    0.473</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Other Source</th>                             <td>   -0.0622</td> <td>    0.420</td> <td>   -0.148</td> <td> 0.882</td> <td>   -0.885</td> <td>    0.760</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Reference</th>                                <td>    0.5887</td> <td>    0.528</td> <td>    1.114</td> <td> 0.265</td> <td>   -0.447</td> <td>    1.624</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Referral Sites</th>                           <td>   -0.3045</td> <td>    0.333</td> <td>   -0.916</td> <td> 0.360</td> <td>   -0.956</td> <td>    0.347</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Welingak Website</th>                         <td>    2.7750</td> <td>    0.867</td> <td>    3.199</td> <td> 0.001</td> <td>    1.075</td> <td>    4.475</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Student</th>              <td>    1.0015</td> <td>    0.218</td> <td>    4.604</td> <td> 0.000</td> <td>    0.575</td> <td>    1.428</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Unemployed</th>           <td>    1.3229</td> <td>    0.083</td> <td>   15.907</td> <td> 0.000</td> <td>    1.160</td> <td>    1.486</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Working Professional</th> <td>    3.9649</td> <td>    0.204</td> <td>   19.424</td> <td> 0.000</td> <td>    3.565</td> <td>    4.365</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                 Generalized Linear Model Regression Results                  \n",
       "==============================================================================\n",
       "Dep. Variable:              Converted   No. Observations:                 6320\n",
       "Model:                            GLM   Df Residuals:                     6299\n",
       "Model Family:                Binomial   Df Model:                           20\n",
       "Link Function:                  logit   Scale:                          1.0000\n",
       "Method:                          IRLS   Log-Likelihood:                -2810.3\n",
       "Date:                Tue, 11 Jan 2022   Deviance:                       5620.6\n",
       "Time:                        12:35:28   Pearson chi2:                 6.86e+03\n",
       "No. Iterations:                    20                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================================================\n",
       "                                                           coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------------------------------------\n",
       "const                                                   -3.4291      0.147    -23.256      0.000      -3.718      -3.140\n",
       "Do Not Email                                            -1.2367      0.162     -7.636      0.000      -1.554      -0.919\n",
       "Do Not Call                                             19.6364   2.05e+04      0.001      0.999   -4.02e+04    4.02e+04\n",
       "TotalVisits                                              1.4089      0.275      5.119      0.000       0.869       1.948\n",
       "Total Time Spent on Website                              4.4801      0.161     27.909      0.000       4.166       4.795\n",
       "Page Views Per Visit                                    -0.2593      0.238     -1.091      0.275      -0.725       0.206\n",
       "Search                                                  -1.7792      1.066     -1.668      0.095      -3.869       0.311\n",
       "Through Recommendations                                  1.2506      2.316      0.540      0.589      -3.290       5.791\n",
       "A free copy of Mastering The Interview                  -0.0885      0.099     -0.894      0.371      -0.282       0.105\n",
       "Lead Origin_Lead Add Form                                3.4219      0.490      6.988      0.000       2.462       4.382\n",
       "Lead Origin_Quick Add Form                              19.8915   2.92e+04      0.001      0.999   -5.73e+04    5.73e+04\n",
       "Lead Source_Google                                       0.3380      0.110      3.078      0.002       0.123       0.553\n",
       "Lead Source_Olark Chat                                   1.3874      0.145      9.580      0.000       1.104       1.671\n",
       "Lead Source_Organic Search                               0.2363      0.121      1.953      0.051      -0.001       0.473\n",
       "Lead Source_Other Source                                -0.0622      0.420     -0.148      0.882      -0.885       0.760\n",
       "Lead Source_Reference                                    0.5887      0.528      1.114      0.265      -0.447       1.624\n",
       "Lead Source_Referral Sites                              -0.3045      0.333     -0.916      0.360      -0.956       0.347\n",
       "Lead Source_Welingak Website                             2.7750      0.867      3.199      0.001       1.075       4.475\n",
       "What is your current occupation_Student                  1.0015      0.218      4.604      0.000       0.575       1.428\n",
       "What is your current occupation_Unemployed               1.3229      0.083     15.907      0.000       1.160       1.486\n",
       "What is your current occupation_Working Professional     3.9649      0.204     19.424      0.000       3.565       4.365\n",
       "========================================================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 84,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_sm = sm.add_constant(X_train[col])\n",
    "logm2 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\n",
    "res = logm2.fit()\n",
    "res.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 85,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Lead Origin_Lead Add Form</td>\n",
       "      <td>17.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Lead Source_Reference</td>\n",
       "      <td>13.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Page Views Per Visit</td>\n",
       "      <td>6.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>TotalVisits</td>\n",
       "      <td>4.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>Lead Source_Welingak Website</td>\n",
       "      <td>4.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>What is your current occupation_Unemployed</td>\n",
       "      <td>2.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Lead Source_Google</td>\n",
       "      <td>2.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Total Time Spent on Website</td>\n",
       "      <td>2.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>A free copy of Mastering The Interview</td>\n",
       "      <td>2.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Lead Source_Organic Search</td>\n",
       "      <td>1.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>What is your current occupation_Working Profes...</td>\n",
       "      <td>1.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lead Source_Olark Chat</td>\n",
       "      <td>1.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Search</td>\n",
       "      <td>1.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Through Recommendations</td>\n",
       "      <td>1.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Do Not Email</td>\n",
       "      <td>1.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Lead Source_Referral Sites</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>What is your current occupation_Student</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Lead Source_Other Source</td>\n",
       "      <td>1.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>Do Not Call</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Lead Origin_Quick Add Form</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Features    VIF\n",
       "8                           Lead Origin_Lead Add Form  17.58\n",
       "14                              Lead Source_Reference  13.81\n",
       "4                                Page Views Per Visit   6.13\n",
       "2                                         TotalVisits   4.93\n",
       "16                       Lead Source_Welingak Website   4.79\n",
       "18         What is your current occupation_Unemployed   2.88\n",
       "10                                 Lead Source_Google   2.47\n",
       "3                         Total Time Spent on Website   2.21\n",
       "7              A free copy of Mastering The Interview   2.10\n",
       "12                         Lead Source_Organic Search   1.53\n",
       "19  What is your current occupation_Working Profes...   1.34\n",
       "11                             Lead Source_Olark Chat   1.21\n",
       "5                                              Search   1.19\n",
       "6                             Through Recommendations   1.18\n",
       "0                                        Do Not Email   1.08\n",
       "15                         Lead Source_Referral Sites   1.06\n",
       "17            What is your current occupation_Student   1.06\n",
       "13                           Lead Source_Other Source   1.03\n",
       "1                                         Do Not Call   1.00\n",
       "9                          Lead Origin_Quick Add Form   1.00"
      ]
     },
     "execution_count": 85,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "\n",
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train[col].columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Removing column 'Do Not Call' as it has a high pvalue and hence is insignificant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 86,
   "metadata": {},
   "outputs": [],
   "source": [
    "col = col.drop('Do Not Call',1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Rebuilding Model - Model 3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Generalized Linear Model Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Converted</td>    <th>  No. Observations:  </th>  <td>  6320</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                  <td>GLM</td>       <th>  Df Residuals:      </th>  <td>  6300</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model Family:</th>        <td>Binomial</td>     <th>  Df Model:          </th>  <td>    19</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Link Function:</th>         <td>logit</td>      <th>  Scale:             </th> <td>  1.0000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                <td>IRLS</td>       <th>  Log-Likelihood:    </th> <td> -2810.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Tue, 11 Jan 2022</td> <th>  Deviance:          </th> <td>  5621.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>12:35:28</td>     <th>  Pearson chi2:      </th> <td>6.86e+03</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Iterations:</th>         <td>19</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                            <td></td>                              <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                                                <td>   -3.4298</td> <td>    0.147</td> <td>  -23.260</td> <td> 0.000</td> <td>   -3.719</td> <td>   -3.141</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Do Not Email</th>                                         <td>   -1.2371</td> <td>    0.162</td> <td>   -7.637</td> <td> 0.000</td> <td>   -1.555</td> <td>   -0.920</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>TotalVisits</th>                                          <td>    1.4118</td> <td>    0.275</td> <td>    5.131</td> <td> 0.000</td> <td>    0.873</td> <td>    1.951</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Total Time Spent on Website</th>                          <td>    4.4813</td> <td>    0.161</td> <td>   27.917</td> <td> 0.000</td> <td>    4.167</td> <td>    4.796</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Page Views Per Visit</th>                                 <td>   -0.2606</td> <td>    0.238</td> <td>   -1.097</td> <td> 0.273</td> <td>   -0.726</td> <td>    0.205</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Search</th>                                               <td>   -1.7801</td> <td>    1.067</td> <td>   -1.669</td> <td> 0.095</td> <td>   -3.871</td> <td>    0.310</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Through Recommendations</th>                              <td>    1.2507</td> <td>    2.317</td> <td>    0.540</td> <td> 0.589</td> <td>   -3.290</td> <td>    5.792</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>A free copy of Mastering The Interview</th>               <td>   -0.0888</td> <td>    0.099</td> <td>   -0.897</td> <td> 0.370</td> <td>   -0.283</td> <td>    0.105</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Lead Add Form</th>                            <td>    3.4221</td> <td>    0.490</td> <td>    6.989</td> <td> 0.000</td> <td>    2.462</td> <td>    4.382</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Quick Add Form</th>                           <td>   18.8907</td> <td> 1.77e+04</td> <td>    0.001</td> <td> 0.999</td> <td>-3.47e+04</td> <td> 3.48e+04</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Google</th>                                   <td>    0.3382</td> <td>    0.110</td> <td>    3.080</td> <td> 0.002</td> <td>    0.123</td> <td>    0.553</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Olark Chat</th>                               <td>    1.3878</td> <td>    0.145</td> <td>    9.582</td> <td> 0.000</td> <td>    1.104</td> <td>    1.672</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Organic Search</th>                           <td>    0.2361</td> <td>    0.121</td> <td>    1.951</td> <td> 0.051</td> <td>   -0.001</td> <td>    0.473</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Other Source</th>                             <td>   -0.0621</td> <td>    0.420</td> <td>   -0.148</td> <td> 0.882</td> <td>   -0.885</td> <td>    0.761</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Reference</th>                                <td>    0.5938</td> <td>    0.528</td> <td>    1.124</td> <td> 0.261</td> <td>   -0.442</td> <td>    1.629</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Referral Sites</th>                           <td>   -0.3048</td> <td>    0.333</td> <td>   -0.917</td> <td> 0.359</td> <td>   -0.957</td> <td>    0.347</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Welingak Website</th>                         <td>    2.7752</td> <td>    0.867</td> <td>    3.199</td> <td> 0.001</td> <td>    1.075</td> <td>    4.475</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Student</th>              <td>    1.0014</td> <td>    0.218</td> <td>    4.602</td> <td> 0.000</td> <td>    0.575</td> <td>    1.428</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Unemployed</th>           <td>    1.3232</td> <td>    0.083</td> <td>   15.910</td> <td> 0.000</td> <td>    1.160</td> <td>    1.486</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Working Professional</th> <td>    3.9650</td> <td>    0.204</td> <td>   19.423</td> <td> 0.000</td> <td>    3.565</td> <td>    4.365</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                 Generalized Linear Model Regression Results                  \n",
       "==============================================================================\n",
       "Dep. Variable:              Converted   No. Observations:                 6320\n",
       "Model:                            GLM   Df Residuals:                     6300\n",
       "Model Family:                Binomial   Df Model:                           19\n",
       "Link Function:                  logit   Scale:                          1.0000\n",
       "Method:                          IRLS   Log-Likelihood:                -2810.6\n",
       "Date:                Tue, 11 Jan 2022   Deviance:                       5621.2\n",
       "Time:                        12:35:28   Pearson chi2:                 6.86e+03\n",
       "No. Iterations:                    19                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================================================\n",
       "                                                           coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------------------------------------\n",
       "const                                                   -3.4298      0.147    -23.260      0.000      -3.719      -3.141\n",
       "Do Not Email                                            -1.2371      0.162     -7.637      0.000      -1.555      -0.920\n",
       "TotalVisits                                              1.4118      0.275      5.131      0.000       0.873       1.951\n",
       "Total Time Spent on Website                              4.4813      0.161     27.917      0.000       4.167       4.796\n",
       "Page Views Per Visit                                    -0.2606      0.238     -1.097      0.273      -0.726       0.205\n",
       "Search                                                  -1.7801      1.067     -1.669      0.095      -3.871       0.310\n",
       "Through Recommendations                                  1.2507      2.317      0.540      0.589      -3.290       5.792\n",
       "A free copy of Mastering The Interview                  -0.0888      0.099     -0.897      0.370      -0.283       0.105\n",
       "Lead Origin_Lead Add Form                                3.4221      0.490      6.989      0.000       2.462       4.382\n",
       "Lead Origin_Quick Add Form                              18.8907   1.77e+04      0.001      0.999   -3.47e+04    3.48e+04\n",
       "Lead Source_Google                                       0.3382      0.110      3.080      0.002       0.123       0.553\n",
       "Lead Source_Olark Chat                                   1.3878      0.145      9.582      0.000       1.104       1.672\n",
       "Lead Source_Organic Search                               0.2361      0.121      1.951      0.051      -0.001       0.473\n",
       "Lead Source_Other Source                                -0.0621      0.420     -0.148      0.882      -0.885       0.761\n",
       "Lead Source_Reference                                    0.5938      0.528      1.124      0.261      -0.442       1.629\n",
       "Lead Source_Referral Sites                              -0.3048      0.333     -0.917      0.359      -0.957       0.347\n",
       "Lead Source_Welingak Website                             2.7752      0.867      3.199      0.001       1.075       4.475\n",
       "What is your current occupation_Student                  1.0014      0.218      4.602      0.000       0.575       1.428\n",
       "What is your current occupation_Unemployed               1.3232      0.083     15.910      0.000       1.160       1.486\n",
       "What is your current occupation_Working Professional     3.9650      0.204     19.423      0.000       3.565       4.365\n",
       "========================================================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 87,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_sm = sm.add_constant(X_train[col])\n",
    "logm3 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\n",
    "res = logm3.fit()\n",
    "res.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Lead Origin_Lead Add Form</td>\n",
       "      <td>17.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Lead Source_Reference</td>\n",
       "      <td>13.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Page Views Per Visit</td>\n",
       "      <td>6.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TotalVisits</td>\n",
       "      <td>4.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>Lead Source_Welingak Website</td>\n",
       "      <td>4.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>What is your current occupation_Unemployed</td>\n",
       "      <td>2.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Lead Source_Google</td>\n",
       "      <td>2.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Total Time Spent on Website</td>\n",
       "      <td>2.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>A free copy of Mastering The Interview</td>\n",
       "      <td>2.10</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lead Source_Organic Search</td>\n",
       "      <td>1.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>What is your current occupation_Working Profes...</td>\n",
       "      <td>1.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Lead Source_Olark Chat</td>\n",
       "      <td>1.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Search</td>\n",
       "      <td>1.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Through Recommendations</td>\n",
       "      <td>1.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Do Not Email</td>\n",
       "      <td>1.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Lead Source_Referral Sites</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>What is your current occupation_Student</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Lead Source_Other Source</td>\n",
       "      <td>1.03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Lead Origin_Quick Add Form</td>\n",
       "      <td>1.00</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Features    VIF\n",
       "7                           Lead Origin_Lead Add Form  17.58\n",
       "13                              Lead Source_Reference  13.81\n",
       "3                                Page Views Per Visit   6.13\n",
       "1                                         TotalVisits   4.93\n",
       "15                       Lead Source_Welingak Website   4.79\n",
       "17         What is your current occupation_Unemployed   2.88\n",
       "9                                  Lead Source_Google   2.47\n",
       "2                         Total Time Spent on Website   2.21\n",
       "6              A free copy of Mastering The Interview   2.10\n",
       "11                         Lead Source_Organic Search   1.53\n",
       "18  What is your current occupation_Working Profes...   1.34\n",
       "10                             Lead Source_Olark Chat   1.21\n",
       "4                                              Search   1.19\n",
       "5                             Through Recommendations   1.18\n",
       "0                                        Do Not Email   1.08\n",
       "14                         Lead Source_Referral Sites   1.06\n",
       "16            What is your current occupation_Student   1.06\n",
       "12                           Lead Source_Other Source   1.03\n",
       "8                          Lead Origin_Quick Add Form   1.00"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train[col].columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Removing column 'Lead Origin_Quick Add Form' as it has a high pvalue and hence is insignificant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 89,
   "metadata": {},
   "outputs": [],
   "source": [
    "col = col.drop('Lead Origin_Quick Add Form',1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Rebuilding Model - Model 4"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 90,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Generalized Linear Model Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Converted</td>    <th>  No. Observations:  </th>  <td>  6320</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                  <td>GLM</td>       <th>  Df Residuals:      </th>  <td>  6301</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model Family:</th>        <td>Binomial</td>     <th>  Df Model:          </th>  <td>    18</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Link Function:</th>         <td>logit</td>      <th>  Scale:             </th> <td>  1.0000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                <td>IRLS</td>       <th>  Log-Likelihood:    </th> <td> -2810.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Tue, 11 Jan 2022</td> <th>  Deviance:          </th> <td>  5621.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>12:35:29</td>     <th>  Pearson chi2:      </th> <td>6.87e+03</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Iterations:</th>          <td>7</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                            <td></td>                              <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                                                <td>   -3.4308</td> <td>    0.147</td> <td>  -23.268</td> <td> 0.000</td> <td>   -3.720</td> <td>   -3.142</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Do Not Email</th>                                         <td>   -1.2332</td> <td>    0.162</td> <td>   -7.631</td> <td> 0.000</td> <td>   -1.550</td> <td>   -0.916</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>TotalVisits</th>                                          <td>    1.4118</td> <td>    0.275</td> <td>    5.130</td> <td> 0.000</td> <td>    0.872</td> <td>    1.951</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Total Time Spent on Website</th>                          <td>    4.4839</td> <td>    0.160</td> <td>   27.949</td> <td> 0.000</td> <td>    4.169</td> <td>    4.798</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Page Views Per Visit</th>                                 <td>   -0.2614</td> <td>    0.238</td> <td>   -1.100</td> <td> 0.271</td> <td>   -0.727</td> <td>    0.204</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Search</th>                                               <td>   -1.7801</td> <td>    1.067</td> <td>   -1.669</td> <td> 0.095</td> <td>   -3.871</td> <td>    0.310</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Through Recommendations</th>                              <td>    1.2512</td> <td>    2.317</td> <td>    0.540</td> <td> 0.589</td> <td>   -3.290</td> <td>    5.793</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>A free copy of Mastering The Interview</th>               <td>   -0.0889</td> <td>    0.099</td> <td>   -0.898</td> <td> 0.369</td> <td>   -0.283</td> <td>    0.105</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Lead Add Form</th>                            <td>    3.4207</td> <td>    0.490</td> <td>    6.987</td> <td> 0.000</td> <td>    2.461</td> <td>    4.380</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Google</th>                                   <td>    0.3388</td> <td>    0.110</td> <td>    3.085</td> <td> 0.002</td> <td>    0.124</td> <td>    0.554</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Olark Chat</th>                               <td>    1.3885</td> <td>    0.145</td> <td>    9.587</td> <td> 0.000</td> <td>    1.105</td> <td>    1.672</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Organic Search</th>                           <td>    0.2363</td> <td>    0.121</td> <td>    1.952</td> <td> 0.051</td> <td>   -0.001</td> <td>    0.473</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Other Source</th>                             <td>   -0.0614</td> <td>    0.420</td> <td>   -0.146</td> <td> 0.884</td> <td>   -0.884</td> <td>    0.761</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Reference</th>                                <td>    0.5956</td> <td>    0.528</td> <td>    1.127</td> <td> 0.260</td> <td>   -0.440</td> <td>    1.631</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Referral Sites</th>                           <td>   -0.3047</td> <td>    0.333</td> <td>   -0.916</td> <td> 0.360</td> <td>   -0.957</td> <td>    0.347</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Welingak Website</th>                         <td>    2.7763</td> <td>    0.867</td> <td>    3.201</td> <td> 0.001</td> <td>    1.076</td> <td>    4.476</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Student</th>              <td>    1.0016</td> <td>    0.218</td> <td>    4.603</td> <td> 0.000</td> <td>    0.575</td> <td>    1.428</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Unemployed</th>           <td>    1.3236</td> <td>    0.083</td> <td>   15.914</td> <td> 0.000</td> <td>    1.161</td> <td>    1.487</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Working Professional</th> <td>    3.9653</td> <td>    0.204</td> <td>   19.424</td> <td> 0.000</td> <td>    3.565</td> <td>    4.365</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                 Generalized Linear Model Regression Results                  \n",
       "==============================================================================\n",
       "Dep. Variable:              Converted   No. Observations:                 6320\n",
       "Model:                            GLM   Df Residuals:                     6301\n",
       "Model Family:                Binomial   Df Model:                           18\n",
       "Link Function:                  logit   Scale:                          1.0000\n",
       "Method:                          IRLS   Log-Likelihood:                -2810.8\n",
       "Date:                Tue, 11 Jan 2022   Deviance:                       5621.5\n",
       "Time:                        12:35:29   Pearson chi2:                 6.87e+03\n",
       "No. Iterations:                     7                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================================================\n",
       "                                                           coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------------------------------------\n",
       "const                                                   -3.4308      0.147    -23.268      0.000      -3.720      -3.142\n",
       "Do Not Email                                            -1.2332      0.162     -7.631      0.000      -1.550      -0.916\n",
       "TotalVisits                                              1.4118      0.275      5.130      0.000       0.872       1.951\n",
       "Total Time Spent on Website                              4.4839      0.160     27.949      0.000       4.169       4.798\n",
       "Page Views Per Visit                                    -0.2614      0.238     -1.100      0.271      -0.727       0.204\n",
       "Search                                                  -1.7801      1.067     -1.669      0.095      -3.871       0.310\n",
       "Through Recommendations                                  1.2512      2.317      0.540      0.589      -3.290       5.793\n",
       "A free copy of Mastering The Interview                  -0.0889      0.099     -0.898      0.369      -0.283       0.105\n",
       "Lead Origin_Lead Add Form                                3.4207      0.490      6.987      0.000       2.461       4.380\n",
       "Lead Source_Google                                       0.3388      0.110      3.085      0.002       0.124       0.554\n",
       "Lead Source_Olark Chat                                   1.3885      0.145      9.587      0.000       1.105       1.672\n",
       "Lead Source_Organic Search                               0.2363      0.121      1.952      0.051      -0.001       0.473\n",
       "Lead Source_Other Source                                -0.0614      0.420     -0.146      0.884      -0.884       0.761\n",
       "Lead Source_Reference                                    0.5956      0.528      1.127      0.260      -0.440       1.631\n",
       "Lead Source_Referral Sites                              -0.3047      0.333     -0.916      0.360      -0.957       0.347\n",
       "Lead Source_Welingak Website                             2.7763      0.867      3.201      0.001       1.076       4.476\n",
       "What is your current occupation_Student                  1.0016      0.218      4.603      0.000       0.575       1.428\n",
       "What is your current occupation_Unemployed               1.3236      0.083     15.914      0.000       1.161       1.487\n",
       "What is your current occupation_Working Professional     3.9653      0.204     19.424      0.000       3.565       4.365\n",
       "========================================================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 90,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_sm = sm.add_constant(X_train[col])\n",
    "logm4 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\n",
    "res = logm4.fit()\n",
    "res.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 91,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Lead Origin_Lead Add Form</td>\n",
       "      <td>17.58</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Lead Source_Reference</td>\n",
       "      <td>13.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Page Views Per Visit</td>\n",
       "      <td>6.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TotalVisits</td>\n",
       "      <td>4.93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>Lead Source_Welingak Website</td>\n",
       "      <td>4.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>What is your current occupation_Unemployed</td>\n",
       "      <td>2.88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Lead Source_Google</td>\n",
       "      <td>2.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Total Time Spent on Website</td>\n",
       "      <td>2.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>A free copy of Mastering The Interview</td>\n",
       "      <td>2.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Lead Source_Organic Search</td>\n",
       "      <td>1.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>What is your current occupation_Working Profes...</td>\n",
       "      <td>1.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Lead Source_Olark Chat</td>\n",
       "      <td>1.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Search</td>\n",
       "      <td>1.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Through Recommendations</td>\n",
       "      <td>1.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Do Not Email</td>\n",
       "      <td>1.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Lead Source_Referral Sites</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>What is your current occupation_Student</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lead Source_Other Source</td>\n",
       "      <td>1.03</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Features    VIF\n",
       "7                           Lead Origin_Lead Add Form  17.58\n",
       "12                              Lead Source_Reference  13.81\n",
       "3                                Page Views Per Visit   6.13\n",
       "1                                         TotalVisits   4.93\n",
       "14                       Lead Source_Welingak Website   4.79\n",
       "16         What is your current occupation_Unemployed   2.88\n",
       "8                                  Lead Source_Google   2.47\n",
       "2                         Total Time Spent on Website   2.21\n",
       "6              A free copy of Mastering The Interview   2.09\n",
       "10                         Lead Source_Organic Search   1.53\n",
       "17  What is your current occupation_Working Profes...   1.34\n",
       "9                              Lead Source_Olark Chat   1.21\n",
       "4                                              Search   1.19\n",
       "5                             Through Recommendations   1.18\n",
       "0                                        Do Not Email   1.08\n",
       "13                         Lead Source_Referral Sites   1.06\n",
       "15            What is your current occupation_Student   1.06\n",
       "11                           Lead Source_Other Source   1.03"
      ]
     },
     "execution_count": 91,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train[col].columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Removing column 'Lead Source_Other Source' as it has high pvalue and hence is insignificant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "metadata": {},
   "outputs": [],
   "source": [
    "col = col.drop('Lead Source_Other Source',1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Rebuilding Model - Model 5"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Generalized Linear Model Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Converted</td>    <th>  No. Observations:  </th>  <td>  6320</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                  <td>GLM</td>       <th>  Df Residuals:      </th>  <td>  6302</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model Family:</th>        <td>Binomial</td>     <th>  Df Model:          </th>  <td>    17</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Link Function:</th>         <td>logit</td>      <th>  Scale:             </th> <td>  1.0000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                <td>IRLS</td>       <th>  Log-Likelihood:    </th> <td> -2810.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Tue, 11 Jan 2022</td> <th>  Deviance:          </th> <td>  5621.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>12:35:29</td>     <th>  Pearson chi2:      </th> <td>6.87e+03</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Iterations:</th>          <td>7</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                            <td></td>                              <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                                                <td>   -3.4352</td> <td>    0.144</td> <td>  -23.781</td> <td> 0.000</td> <td>   -3.718</td> <td>   -3.152</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Do Not Email</th>                                         <td>   -1.2323</td> <td>    0.161</td> <td>   -7.631</td> <td> 0.000</td> <td>   -1.549</td> <td>   -0.916</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>TotalVisits</th>                                          <td>    1.4122</td> <td>    0.275</td> <td>    5.132</td> <td> 0.000</td> <td>    0.873</td> <td>    1.952</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Total Time Spent on Website</th>                          <td>    4.4853</td> <td>    0.160</td> <td>   28.003</td> <td> 0.000</td> <td>    4.171</td> <td>    4.799</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Page Views Per Visit</th>                                 <td>   -0.2600</td> <td>    0.237</td> <td>   -1.095</td> <td> 0.273</td> <td>   -0.725</td> <td>    0.205</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Search</th>                                               <td>   -1.7799</td> <td>    1.067</td> <td>   -1.668</td> <td> 0.095</td> <td>   -3.871</td> <td>    0.311</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Through Recommendations</th>                              <td>    1.2520</td> <td>    2.318</td> <td>    0.540</td> <td> 0.589</td> <td>   -3.291</td> <td>    5.794</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>A free copy of Mastering The Interview</th>               <td>   -0.0865</td> <td>    0.098</td> <td>   -0.886</td> <td> 0.376</td> <td>   -0.278</td> <td>    0.105</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Lead Add Form</th>                            <td>    3.4147</td> <td>    0.488</td> <td>    6.999</td> <td> 0.000</td> <td>    2.459</td> <td>    4.371</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Google</th>                                   <td>    0.3419</td> <td>    0.108</td> <td>    3.174</td> <td> 0.002</td> <td>    0.131</td> <td>    0.553</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Olark Chat</th>                               <td>    1.3927</td> <td>    0.142</td> <td>    9.808</td> <td> 0.000</td> <td>    1.114</td> <td>    1.671</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Organic Search</th>                           <td>    0.2383</td> <td>    0.120</td> <td>    1.982</td> <td> 0.047</td> <td>    0.003</td> <td>    0.474</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Reference</th>                                <td>    0.6057</td> <td>    0.524</td> <td>    1.157</td> <td> 0.247</td> <td>   -0.421</td> <td>    1.632</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Referral Sites</th>                           <td>   -0.3019</td> <td>    0.332</td> <td>   -0.909</td> <td> 0.363</td> <td>   -0.953</td> <td>    0.349</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Welingak Website</th>                         <td>    2.7864</td> <td>    0.865</td> <td>    3.222</td> <td> 0.001</td> <td>    1.092</td> <td>    4.481</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Student</th>              <td>    1.0018</td> <td>    0.218</td> <td>    4.604</td> <td> 0.000</td> <td>    0.575</td> <td>    1.428</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Unemployed</th>           <td>    1.3236</td> <td>    0.083</td> <td>   15.914</td> <td> 0.000</td> <td>    1.161</td> <td>    1.487</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Working Professional</th> <td>    3.9655</td> <td>    0.204</td> <td>   19.426</td> <td> 0.000</td> <td>    3.565</td> <td>    4.366</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                 Generalized Linear Model Regression Results                  \n",
       "==============================================================================\n",
       "Dep. Variable:              Converted   No. Observations:                 6320\n",
       "Model:                            GLM   Df Residuals:                     6302\n",
       "Model Family:                Binomial   Df Model:                           17\n",
       "Link Function:                  logit   Scale:                          1.0000\n",
       "Method:                          IRLS   Log-Likelihood:                -2810.8\n",
       "Date:                Tue, 11 Jan 2022   Deviance:                       5621.5\n",
       "Time:                        12:35:29   Pearson chi2:                 6.87e+03\n",
       "No. Iterations:                     7                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================================================\n",
       "                                                           coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------------------------------------\n",
       "const                                                   -3.4352      0.144    -23.781      0.000      -3.718      -3.152\n",
       "Do Not Email                                            -1.2323      0.161     -7.631      0.000      -1.549      -0.916\n",
       "TotalVisits                                              1.4122      0.275      5.132      0.000       0.873       1.952\n",
       "Total Time Spent on Website                              4.4853      0.160     28.003      0.000       4.171       4.799\n",
       "Page Views Per Visit                                    -0.2600      0.237     -1.095      0.273      -0.725       0.205\n",
       "Search                                                  -1.7799      1.067     -1.668      0.095      -3.871       0.311\n",
       "Through Recommendations                                  1.2520      2.318      0.540      0.589      -3.291       5.794\n",
       "A free copy of Mastering The Interview                  -0.0865      0.098     -0.886      0.376      -0.278       0.105\n",
       "Lead Origin_Lead Add Form                                3.4147      0.488      6.999      0.000       2.459       4.371\n",
       "Lead Source_Google                                       0.3419      0.108      3.174      0.002       0.131       0.553\n",
       "Lead Source_Olark Chat                                   1.3927      0.142      9.808      0.000       1.114       1.671\n",
       "Lead Source_Organic Search                               0.2383      0.120      1.982      0.047       0.003       0.474\n",
       "Lead Source_Reference                                    0.6057      0.524      1.157      0.247      -0.421       1.632\n",
       "Lead Source_Referral Sites                              -0.3019      0.332     -0.909      0.363      -0.953       0.349\n",
       "Lead Source_Welingak Website                             2.7864      0.865      3.222      0.001       1.092       4.481\n",
       "What is your current occupation_Student                  1.0018      0.218      4.604      0.000       0.575       1.428\n",
       "What is your current occupation_Unemployed               1.3236      0.083     15.914      0.000       1.161       1.487\n",
       "What is your current occupation_Working Professional     3.9655      0.204     19.426      0.000       3.565       4.366\n",
       "========================================================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 93,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_sm = sm.add_constant(X_train[col])\n",
    "logm5 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\n",
    "res = logm5.fit()\n",
    "res.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 94,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Lead Origin_Lead Add Form</td>\n",
       "      <td>17.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lead Source_Reference</td>\n",
       "      <td>13.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Page Views Per Visit</td>\n",
       "      <td>6.13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TotalVisits</td>\n",
       "      <td>4.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>Lead Source_Welingak Website</td>\n",
       "      <td>4.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>What is your current occupation_Unemployed</td>\n",
       "      <td>2.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Lead Source_Google</td>\n",
       "      <td>2.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Total Time Spent on Website</td>\n",
       "      <td>2.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>A free copy of Mastering The Interview</td>\n",
       "      <td>2.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Lead Source_Organic Search</td>\n",
       "      <td>1.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>What is your current occupation_Working Profes...</td>\n",
       "      <td>1.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Lead Source_Olark Chat</td>\n",
       "      <td>1.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Search</td>\n",
       "      <td>1.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Through Recommendations</td>\n",
       "      <td>1.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Do Not Email</td>\n",
       "      <td>1.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Lead Source_Referral Sites</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>What is your current occupation_Student</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Features    VIF\n",
       "7                           Lead Origin_Lead Add Form  17.42\n",
       "11                              Lead Source_Reference  13.65\n",
       "3                                Page Views Per Visit   6.13\n",
       "1                                         TotalVisits   4.92\n",
       "13                       Lead Source_Welingak Website   4.74\n",
       "15         What is your current occupation_Unemployed   2.84\n",
       "8                                  Lead Source_Google   2.44\n",
       "2                         Total Time Spent on Website   2.21\n",
       "6              A free copy of Mastering The Interview   2.08\n",
       "10                         Lead Source_Organic Search   1.53\n",
       "16  What is your current occupation_Working Profes...   1.34\n",
       "9                              Lead Source_Olark Chat   1.21\n",
       "4                                              Search   1.19\n",
       "5                             Through Recommendations   1.18\n",
       "0                                        Do Not Email   1.08\n",
       "12                         Lead Source_Referral Sites   1.06\n",
       "14            What is your current occupation_Student   1.06"
      ]
     },
     "execution_count": 94,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train[col].columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Removing column 'Through Recommendations' as it has high pvalue and hence is insignificant "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "metadata": {},
   "outputs": [],
   "source": [
    "col = col.drop('Through Recommendations',1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Rebuilding Model - Model 6"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Generalized Linear Model Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Converted</td>    <th>  No. Observations:  </th>  <td>  6320</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                  <td>GLM</td>       <th>  Df Residuals:      </th>  <td>  6303</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model Family:</th>        <td>Binomial</td>     <th>  Df Model:          </th>  <td>    16</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Link Function:</th>         <td>logit</td>      <th>  Scale:             </th> <td>  1.0000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                <td>IRLS</td>       <th>  Log-Likelihood:    </th> <td> -2810.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Tue, 11 Jan 2022</td> <th>  Deviance:          </th> <td>  5621.9</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>12:35:29</td>     <th>  Pearson chi2:      </th> <td>6.87e+03</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Iterations:</th>          <td>7</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                            <td></td>                              <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                                                <td>   -3.4348</td> <td>    0.144</td> <td>  -23.781</td> <td> 0.000</td> <td>   -3.718</td> <td>   -3.152</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Do Not Email</th>                                         <td>   -1.2325</td> <td>    0.162</td> <td>   -7.631</td> <td> 0.000</td> <td>   -1.549</td> <td>   -0.916</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>TotalVisits</th>                                          <td>    1.4145</td> <td>    0.275</td> <td>    5.141</td> <td> 0.000</td> <td>    0.875</td> <td>    1.954</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Total Time Spent on Website</th>                          <td>    4.4847</td> <td>    0.160</td> <td>   28.007</td> <td> 0.000</td> <td>    4.171</td> <td>    4.799</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Page Views Per Visit</th>                                 <td>   -0.2626</td> <td>    0.237</td> <td>   -1.106</td> <td> 0.269</td> <td>   -0.728</td> <td>    0.203</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Search</th>                                               <td>   -1.6298</td> <td>    1.013</td> <td>   -1.609</td> <td> 0.108</td> <td>   -3.615</td> <td>    0.355</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>A free copy of Mastering The Interview</th>               <td>   -0.0857</td> <td>    0.098</td> <td>   -0.878</td> <td> 0.380</td> <td>   -0.277</td> <td>    0.106</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Origin_Lead Add Form</th>                            <td>    3.4144</td> <td>    0.488</td> <td>    6.998</td> <td> 0.000</td> <td>    2.458</td> <td>    4.371</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Google</th>                                   <td>    0.3418</td> <td>    0.108</td> <td>    3.173</td> <td> 0.002</td> <td>    0.131</td> <td>    0.553</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Olark Chat</th>                               <td>    1.3924</td> <td>    0.142</td> <td>    9.808</td> <td> 0.000</td> <td>    1.114</td> <td>    1.671</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Organic Search</th>                           <td>    0.2374</td> <td>    0.120</td> <td>    1.975</td> <td> 0.048</td> <td>    0.002</td> <td>    0.473</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Reference</th>                                <td>    0.6054</td> <td>    0.524</td> <td>    1.156</td> <td> 0.248</td> <td>   -0.421</td> <td>    1.632</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Referral Sites</th>                           <td>   -0.3021</td> <td>    0.332</td> <td>   -0.910</td> <td> 0.363</td> <td>   -0.953</td> <td>    0.349</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Welingak Website</th>                         <td>    2.7862</td> <td>    0.865</td> <td>    3.222</td> <td> 0.001</td> <td>    1.092</td> <td>    4.481</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Student</th>              <td>    1.0017</td> <td>    0.218</td> <td>    4.604</td> <td> 0.000</td> <td>    0.575</td> <td>    1.428</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Unemployed</th>           <td>    1.3236</td> <td>    0.083</td> <td>   15.915</td> <td> 0.000</td> <td>    1.161</td> <td>    1.487</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Working Professional</th> <td>    3.9703</td> <td>    0.204</td> <td>   19.454</td> <td> 0.000</td> <td>    3.570</td> <td>    4.370</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                 Generalized Linear Model Regression Results                  \n",
       "==============================================================================\n",
       "Dep. Variable:              Converted   No. Observations:                 6320\n",
       "Model:                            GLM   Df Residuals:                     6303\n",
       "Model Family:                Binomial   Df Model:                           16\n",
       "Link Function:                  logit   Scale:                          1.0000\n",
       "Method:                          IRLS   Log-Likelihood:                -2810.9\n",
       "Date:                Tue, 11 Jan 2022   Deviance:                       5621.9\n",
       "Time:                        12:35:29   Pearson chi2:                 6.87e+03\n",
       "No. Iterations:                     7                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================================================\n",
       "                                                           coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------------------------------------\n",
       "const                                                   -3.4348      0.144    -23.781      0.000      -3.718      -3.152\n",
       "Do Not Email                                            -1.2325      0.162     -7.631      0.000      -1.549      -0.916\n",
       "TotalVisits                                              1.4145      0.275      5.141      0.000       0.875       1.954\n",
       "Total Time Spent on Website                              4.4847      0.160     28.007      0.000       4.171       4.799\n",
       "Page Views Per Visit                                    -0.2626      0.237     -1.106      0.269      -0.728       0.203\n",
       "Search                                                  -1.6298      1.013     -1.609      0.108      -3.615       0.355\n",
       "A free copy of Mastering The Interview                  -0.0857      0.098     -0.878      0.380      -0.277       0.106\n",
       "Lead Origin_Lead Add Form                                3.4144      0.488      6.998      0.000       2.458       4.371\n",
       "Lead Source_Google                                       0.3418      0.108      3.173      0.002       0.131       0.553\n",
       "Lead Source_Olark Chat                                   1.3924      0.142      9.808      0.000       1.114       1.671\n",
       "Lead Source_Organic Search                               0.2374      0.120      1.975      0.048       0.002       0.473\n",
       "Lead Source_Reference                                    0.6054      0.524      1.156      0.248      -0.421       1.632\n",
       "Lead Source_Referral Sites                              -0.3021      0.332     -0.910      0.363      -0.953       0.349\n",
       "Lead Source_Welingak Website                             2.7862      0.865      3.222      0.001       1.092       4.481\n",
       "What is your current occupation_Student                  1.0017      0.218      4.604      0.000       0.575       1.428\n",
       "What is your current occupation_Unemployed               1.3236      0.083     15.915      0.000       1.161       1.487\n",
       "What is your current occupation_Working Professional     3.9703      0.204     19.454      0.000       3.570       4.370\n",
       "========================================================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 96,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_sm = sm.add_constant(X_train[col])\n",
    "logm6 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\n",
    "res = logm6.fit()\n",
    "res.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Lead Origin_Lead Add Form</td>\n",
       "      <td>17.42</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Lead Source_Reference</td>\n",
       "      <td>13.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Page Views Per Visit</td>\n",
       "      <td>6.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TotalVisits</td>\n",
       "      <td>4.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>Lead Source_Welingak Website</td>\n",
       "      <td>4.74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>What is your current occupation_Unemployed</td>\n",
       "      <td>2.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Lead Source_Google</td>\n",
       "      <td>2.44</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Total Time Spent on Website</td>\n",
       "      <td>2.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>A free copy of Mastering The Interview</td>\n",
       "      <td>2.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Lead Source_Organic Search</td>\n",
       "      <td>1.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>What is your current occupation_Working Profes...</td>\n",
       "      <td>1.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Lead Source_Olark Chat</td>\n",
       "      <td>1.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Do Not Email</td>\n",
       "      <td>1.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lead Source_Referral Sites</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>What is your current occupation_Student</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Search</td>\n",
       "      <td>1.01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Features    VIF\n",
       "6                           Lead Origin_Lead Add Form  17.42\n",
       "10                              Lead Source_Reference  13.65\n",
       "3                                Page Views Per Visit   6.12\n",
       "1                                         TotalVisits   4.92\n",
       "12                       Lead Source_Welingak Website   4.74\n",
       "14         What is your current occupation_Unemployed   2.84\n",
       "7                                  Lead Source_Google   2.44\n",
       "2                         Total Time Spent on Website   2.21\n",
       "5              A free copy of Mastering The Interview   2.08\n",
       "9                          Lead Source_Organic Search   1.53\n",
       "15  What is your current occupation_Working Profes...   1.34\n",
       "8                              Lead Source_Olark Chat   1.21\n",
       "0                                        Do Not Email   1.08\n",
       "11                         Lead Source_Referral Sites   1.06\n",
       "13            What is your current occupation_Student   1.06\n",
       "4                                              Search   1.01"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train[col].columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Removing column 'Lead Origin_Lead Add Form' as it has high vif and hence insignificant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "metadata": {},
   "outputs": [],
   "source": [
    "col = col.drop('Lead Origin_Lead Add Form',1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Rebuilding Model - Model 7"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Generalized Linear Model Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Converted</td>    <th>  No. Observations:  </th>  <td>  6320</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                  <td>GLM</td>       <th>  Df Residuals:      </th>  <td>  6304</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model Family:</th>        <td>Binomial</td>     <th>  Df Model:          </th>  <td>    15</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Link Function:</th>         <td>logit</td>      <th>  Scale:             </th> <td>  1.0000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                <td>IRLS</td>       <th>  Log-Likelihood:    </th> <td> -2842.8</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Tue, 11 Jan 2022</td> <th>  Deviance:          </th> <td>  5685.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>12:35:29</td>     <th>  Pearson chi2:      </th> <td>6.79e+03</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Iterations:</th>          <td>7</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                            <td></td>                              <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                                                <td>   -3.3136</td> <td>    0.142</td> <td>  -23.372</td> <td> 0.000</td> <td>   -3.591</td> <td>   -3.036</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Do Not Email</th>                                         <td>   -1.1323</td> <td>    0.158</td> <td>   -7.180</td> <td> 0.000</td> <td>   -1.441</td> <td>   -0.823</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>TotalVisits</th>                                          <td>    1.3230</td> <td>    0.272</td> <td>    4.858</td> <td> 0.000</td> <td>    0.789</td> <td>    1.857</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Total Time Spent on Website</th>                          <td>    4.3629</td> <td>    0.158</td> <td>   27.642</td> <td> 0.000</td> <td>    4.054</td> <td>    4.672</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Page Views Per Visit</th>                                 <td>   -0.4649</td> <td>    0.236</td> <td>   -1.973</td> <td> 0.048</td> <td>   -0.927</td> <td>   -0.003</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Search</th>                                               <td>   -1.5170</td> <td>    0.994</td> <td>   -1.526</td> <td> 0.127</td> <td>   -3.465</td> <td>    0.431</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>A free copy of Mastering The Interview</th>               <td>   -0.0926</td> <td>    0.097</td> <td>   -0.956</td> <td> 0.339</td> <td>   -0.282</td> <td>    0.097</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Google</th>                                   <td>    0.3865</td> <td>    0.107</td> <td>    3.622</td> <td> 0.000</td> <td>    0.177</td> <td>    0.596</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Olark Chat</th>                               <td>    1.2664</td> <td>    0.139</td> <td>    9.081</td> <td> 0.000</td> <td>    0.993</td> <td>    1.540</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Organic Search</th>                           <td>    0.2536</td> <td>    0.119</td> <td>    2.125</td> <td> 0.034</td> <td>    0.020</td> <td>    0.488</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Reference</th>                                <td>    3.8776</td> <td>    0.228</td> <td>   16.984</td> <td> 0.000</td> <td>    3.430</td> <td>    4.325</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Referral Sites</th>                           <td>   -0.2907</td> <td>    0.329</td> <td>   -0.883</td> <td> 0.377</td> <td>   -0.936</td> <td>    0.355</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Welingak Website</th>                         <td>    6.0341</td> <td>    0.727</td> <td>    8.300</td> <td> 0.000</td> <td>    4.609</td> <td>    7.459</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Student</th>              <td>    1.0037</td> <td>    0.216</td> <td>    4.643</td> <td> 0.000</td> <td>    0.580</td> <td>    1.427</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Unemployed</th>           <td>    1.3469</td> <td>    0.083</td> <td>   16.293</td> <td> 0.000</td> <td>    1.185</td> <td>    1.509</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Working Professional</th> <td>    3.9661</td> <td>    0.203</td> <td>   19.510</td> <td> 0.000</td> <td>    3.568</td> <td>    4.365</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                 Generalized Linear Model Regression Results                  \n",
       "==============================================================================\n",
       "Dep. Variable:              Converted   No. Observations:                 6320\n",
       "Model:                            GLM   Df Residuals:                     6304\n",
       "Model Family:                Binomial   Df Model:                           15\n",
       "Link Function:                  logit   Scale:                          1.0000\n",
       "Method:                          IRLS   Log-Likelihood:                -2842.8\n",
       "Date:                Tue, 11 Jan 2022   Deviance:                       5685.5\n",
       "Time:                        12:35:29   Pearson chi2:                 6.79e+03\n",
       "No. Iterations:                     7                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================================================\n",
       "                                                           coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------------------------------------\n",
       "const                                                   -3.3136      0.142    -23.372      0.000      -3.591      -3.036\n",
       "Do Not Email                                            -1.1323      0.158     -7.180      0.000      -1.441      -0.823\n",
       "TotalVisits                                              1.3230      0.272      4.858      0.000       0.789       1.857\n",
       "Total Time Spent on Website                              4.3629      0.158     27.642      0.000       4.054       4.672\n",
       "Page Views Per Visit                                    -0.4649      0.236     -1.973      0.048      -0.927      -0.003\n",
       "Search                                                  -1.5170      0.994     -1.526      0.127      -3.465       0.431\n",
       "A free copy of Mastering The Interview                  -0.0926      0.097     -0.956      0.339      -0.282       0.097\n",
       "Lead Source_Google                                       0.3865      0.107      3.622      0.000       0.177       0.596\n",
       "Lead Source_Olark Chat                                   1.2664      0.139      9.081      0.000       0.993       1.540\n",
       "Lead Source_Organic Search                               0.2536      0.119      2.125      0.034       0.020       0.488\n",
       "Lead Source_Reference                                    3.8776      0.228     16.984      0.000       3.430       4.325\n",
       "Lead Source_Referral Sites                              -0.2907      0.329     -0.883      0.377      -0.936       0.355\n",
       "Lead Source_Welingak Website                             6.0341      0.727      8.300      0.000       4.609       7.459\n",
       "What is your current occupation_Student                  1.0037      0.216      4.643      0.000       0.580       1.427\n",
       "What is your current occupation_Unemployed               1.3469      0.083     16.293      0.000       1.185       1.509\n",
       "What is your current occupation_Working Professional     3.9661      0.203     19.510      0.000       3.568       4.365\n",
       "========================================================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 99,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_sm = sm.add_constant(X_train[col])\n",
    "logm7 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\n",
    "res = logm7.fit()\n",
    "res.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 100,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Page Views Per Visit</td>\n",
       "      <td>6.09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TotalVisits</td>\n",
       "      <td>4.92</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>What is your current occupation_Unemployed</td>\n",
       "      <td>2.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Lead Source_Google</td>\n",
       "      <td>2.41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Total Time Spent on Website</td>\n",
       "      <td>2.21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>A free copy of Mastering The Interview</td>\n",
       "      <td>2.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Lead Source_Organic Search</td>\n",
       "      <td>1.53</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>What is your current occupation_Working Profes...</td>\n",
       "      <td>1.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Lead Source_Reference</td>\n",
       "      <td>1.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Lead Source_Olark Chat</td>\n",
       "      <td>1.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>Lead Source_Welingak Website</td>\n",
       "      <td>1.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Do Not Email</td>\n",
       "      <td>1.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Lead Source_Referral Sites</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>What is your current occupation_Student</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Search</td>\n",
       "      <td>1.01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Features   VIF\n",
       "3                                Page Views Per Visit  6.09\n",
       "1                                         TotalVisits  4.92\n",
       "13         What is your current occupation_Unemployed  2.81\n",
       "6                                  Lead Source_Google  2.41\n",
       "2                         Total Time Spent on Website  2.21\n",
       "5              A free copy of Mastering The Interview  2.08\n",
       "8                          Lead Source_Organic Search  1.53\n",
       "14  What is your current occupation_Working Profes...  1.34\n",
       "9                               Lead Source_Reference  1.28\n",
       "7                              Lead Source_Olark Chat  1.20\n",
       "11                       Lead Source_Welingak Website  1.08\n",
       "0                                        Do Not Email  1.07\n",
       "10                         Lead Source_Referral Sites  1.06\n",
       "12            What is your current occupation_Student  1.06\n",
       "4                                              Search  1.01"
      ]
     },
     "execution_count": 100,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train[col].columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Removing column 'Lead Source_Referral Sites' as it has high vif and hence insignificant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 101,
   "metadata": {},
   "outputs": [],
   "source": [
    "col = col.drop('Lead Source_Referral Sites',1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Rebuilding Model - Model 8"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 102,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Generalized Linear Model Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Converted</td>    <th>  No. Observations:  </th>  <td>  6320</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                  <td>GLM</td>       <th>  Df Residuals:      </th>  <td>  6305</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model Family:</th>        <td>Binomial</td>     <th>  Df Model:          </th>  <td>    14</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Link Function:</th>         <td>logit</td>      <th>  Scale:             </th> <td>  1.0000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                <td>IRLS</td>       <th>  Log-Likelihood:    </th> <td> -2843.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Tue, 11 Jan 2022</td> <th>  Deviance:          </th> <td>  5686.3</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>12:35:30</td>     <th>  Pearson chi2:      </th> <td>6.79e+03</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Iterations:</th>          <td>7</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                            <td></td>                              <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                                                <td>   -3.3327</td> <td>    0.140</td> <td>  -23.769</td> <td> 0.000</td> <td>   -3.608</td> <td>   -3.058</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Do Not Email</th>                                         <td>   -1.1301</td> <td>    0.158</td> <td>   -7.167</td> <td> 0.000</td> <td>   -1.439</td> <td>   -0.821</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>TotalVisits</th>                                          <td>    1.3086</td> <td>    0.272</td> <td>    4.815</td> <td> 0.000</td> <td>    0.776</td> <td>    1.841</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Total Time Spent on Website</th>                          <td>    4.3632</td> <td>    0.158</td> <td>   27.641</td> <td> 0.000</td> <td>    4.054</td> <td>    4.673</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Page Views Per Visit</th>                                 <td>   -0.4704</td> <td>    0.235</td> <td>   -1.998</td> <td> 0.046</td> <td>   -0.932</td> <td>   -0.009</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Search</th>                                               <td>   -1.5033</td> <td>    0.994</td> <td>   -1.513</td> <td> 0.130</td> <td>   -3.451</td> <td>    0.444</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>A free copy of Mastering The Interview</th>               <td>   -0.0764</td> <td>    0.095</td> <td>   -0.803</td> <td> 0.422</td> <td>   -0.263</td> <td>    0.110</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Google</th>                                   <td>    0.4090</td> <td>    0.104</td> <td>    3.942</td> <td> 0.000</td> <td>    0.206</td> <td>    0.612</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Olark Chat</th>                               <td>    1.2845</td> <td>    0.138</td> <td>    9.306</td> <td> 0.000</td> <td>    1.014</td> <td>    1.555</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Organic Search</th>                           <td>    0.2716</td> <td>    0.118</td> <td>    2.307</td> <td> 0.021</td> <td>    0.041</td> <td>    0.502</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Reference</th>                                <td>    3.8955</td> <td>    0.227</td> <td>   17.127</td> <td> 0.000</td> <td>    3.450</td> <td>    4.341</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Welingak Website</th>                         <td>    6.0519</td> <td>    0.727</td> <td>    8.327</td> <td> 0.000</td> <td>    4.628</td> <td>    7.476</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Student</th>              <td>    1.0085</td> <td>    0.216</td> <td>    4.666</td> <td> 0.000</td> <td>    0.585</td> <td>    1.432</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Unemployed</th>           <td>    1.3477</td> <td>    0.083</td> <td>   16.306</td> <td> 0.000</td> <td>    1.186</td> <td>    1.510</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Working Professional</th> <td>    3.9690</td> <td>    0.203</td> <td>   19.521</td> <td> 0.000</td> <td>    3.571</td> <td>    4.368</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                 Generalized Linear Model Regression Results                  \n",
       "==============================================================================\n",
       "Dep. Variable:              Converted   No. Observations:                 6320\n",
       "Model:                            GLM   Df Residuals:                     6305\n",
       "Model Family:                Binomial   Df Model:                           14\n",
       "Link Function:                  logit   Scale:                          1.0000\n",
       "Method:                          IRLS   Log-Likelihood:                -2843.2\n",
       "Date:                Tue, 11 Jan 2022   Deviance:                       5686.3\n",
       "Time:                        12:35:30   Pearson chi2:                 6.79e+03\n",
       "No. Iterations:                     7                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================================================\n",
       "                                                           coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------------------------------------\n",
       "const                                                   -3.3327      0.140    -23.769      0.000      -3.608      -3.058\n",
       "Do Not Email                                            -1.1301      0.158     -7.167      0.000      -1.439      -0.821\n",
       "TotalVisits                                              1.3086      0.272      4.815      0.000       0.776       1.841\n",
       "Total Time Spent on Website                              4.3632      0.158     27.641      0.000       4.054       4.673\n",
       "Page Views Per Visit                                    -0.4704      0.235     -1.998      0.046      -0.932      -0.009\n",
       "Search                                                  -1.5033      0.994     -1.513      0.130      -3.451       0.444\n",
       "A free copy of Mastering The Interview                  -0.0764      0.095     -0.803      0.422      -0.263       0.110\n",
       "Lead Source_Google                                       0.4090      0.104      3.942      0.000       0.206       0.612\n",
       "Lead Source_Olark Chat                                   1.2845      0.138      9.306      0.000       1.014       1.555\n",
       "Lead Source_Organic Search                               0.2716      0.118      2.307      0.021       0.041       0.502\n",
       "Lead Source_Reference                                    3.8955      0.227     17.127      0.000       3.450       4.341\n",
       "Lead Source_Welingak Website                             6.0519      0.727      8.327      0.000       4.628       7.476\n",
       "What is your current occupation_Student                  1.0085      0.216      4.666      0.000       0.585       1.432\n",
       "What is your current occupation_Unemployed               1.3477      0.083     16.306      0.000       1.186       1.510\n",
       "What is your current occupation_Working Professional     3.9690      0.203     19.521      0.000       3.571       4.368\n",
       "========================================================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 102,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_sm = sm.add_constant(X_train[col])\n",
    "logm8 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\n",
    "res = logm8.fit()\n",
    "res.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 103,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Page Views Per Visit</td>\n",
       "      <td>6.04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TotalVisits</td>\n",
       "      <td>4.89</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>What is your current occupation_Unemployed</td>\n",
       "      <td>2.81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Lead Source_Google</td>\n",
       "      <td>2.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Total Time Spent on Website</td>\n",
       "      <td>2.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>A free copy of Mastering The Interview</td>\n",
       "      <td>2.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Lead Source_Organic Search</td>\n",
       "      <td>1.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>What is your current occupation_Working Profes...</td>\n",
       "      <td>1.34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Lead Source_Reference</td>\n",
       "      <td>1.28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Lead Source_Olark Chat</td>\n",
       "      <td>1.20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>Lead Source_Welingak Website</td>\n",
       "      <td>1.08</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Do Not Email</td>\n",
       "      <td>1.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>What is your current occupation_Student</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Search</td>\n",
       "      <td>1.01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Features   VIF\n",
       "3                                Page Views Per Visit  6.04\n",
       "1                                         TotalVisits  4.89\n",
       "12         What is your current occupation_Unemployed  2.81\n",
       "6                                  Lead Source_Google  2.34\n",
       "2                         Total Time Spent on Website  2.20\n",
       "5              A free copy of Mastering The Interview  2.05\n",
       "8                          Lead Source_Organic Search  1.50\n",
       "13  What is your current occupation_Working Profes...  1.34\n",
       "9                               Lead Source_Reference  1.28\n",
       "7                              Lead Source_Olark Chat  1.20\n",
       "10                       Lead Source_Welingak Website  1.08\n",
       "0                                        Do Not Email  1.07\n",
       "11            What is your current occupation_Student  1.06\n",
       "4                                              Search  1.01"
      ]
     },
     "execution_count": 103,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train[col].columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Removing column 'A free copy of Mastering The Interview' as it has high vif and hence insignificant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 104,
   "metadata": {},
   "outputs": [],
   "source": [
    "col = col.drop('A free copy of Mastering The Interview',1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Rebuilding Model - Model 9"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Generalized Linear Model Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Converted</td>    <th>  No. Observations:  </th>  <td>  6320</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                  <td>GLM</td>       <th>  Df Residuals:      </th>  <td>  6306</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model Family:</th>        <td>Binomial</td>     <th>  Df Model:          </th>  <td>    13</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Link Function:</th>         <td>logit</td>      <th>  Scale:             </th> <td>  1.0000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                <td>IRLS</td>       <th>  Log-Likelihood:    </th> <td> -2843.5</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Tue, 11 Jan 2022</td> <th>  Deviance:          </th> <td>  5687.0</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>12:35:30</td>     <th>  Pearson chi2:      </th> <td>6.78e+03</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Iterations:</th>          <td>7</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                            <td></td>                              <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                                                <td>   -3.3775</td> <td>    0.129</td> <td>  -26.196</td> <td> 0.000</td> <td>   -3.630</td> <td>   -3.125</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Do Not Email</th>                                         <td>   -1.1287</td> <td>    0.158</td> <td>   -7.162</td> <td> 0.000</td> <td>   -1.438</td> <td>   -0.820</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>TotalVisits</th>                                          <td>    1.2898</td> <td>    0.271</td> <td>    4.764</td> <td> 0.000</td> <td>    0.759</td> <td>    1.820</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Total Time Spent on Website</th>                          <td>    4.3580</td> <td>    0.158</td> <td>   27.642</td> <td> 0.000</td> <td>    4.049</td> <td>    4.667</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Page Views Per Visit</th>                                 <td>   -0.4807</td> <td>    0.235</td> <td>   -2.045</td> <td> 0.041</td> <td>   -0.941</td> <td>   -0.020</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Search</th>                                               <td>   -1.4781</td> <td>    0.994</td> <td>   -1.488</td> <td> 0.137</td> <td>   -3.426</td> <td>    0.469</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Google</th>                                   <td>    0.4583</td> <td>    0.084</td> <td>    5.474</td> <td> 0.000</td> <td>    0.294</td> <td>    0.622</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Olark Chat</th>                               <td>    1.3282</td> <td>    0.127</td> <td>   10.453</td> <td> 0.000</td> <td>    1.079</td> <td>    1.577</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Organic Search</th>                           <td>    0.2948</td> <td>    0.114</td> <td>    2.583</td> <td> 0.010</td> <td>    0.071</td> <td>    0.518</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Reference</th>                                <td>    3.9407</td> <td>    0.220</td> <td>   17.877</td> <td> 0.000</td> <td>    3.509</td> <td>    4.373</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Welingak Website</th>                         <td>    6.0979</td> <td>    0.725</td> <td>    8.417</td> <td> 0.000</td> <td>    4.678</td> <td>    7.518</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Student</th>              <td>    1.0088</td> <td>    0.216</td> <td>    4.670</td> <td> 0.000</td> <td>    0.585</td> <td>    1.432</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Unemployed</th>           <td>    1.3463</td> <td>    0.083</td> <td>   16.294</td> <td> 0.000</td> <td>    1.184</td> <td>    1.508</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Working Professional</th> <td>    3.9687</td> <td>    0.203</td> <td>   19.512</td> <td> 0.000</td> <td>    3.570</td> <td>    4.367</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                 Generalized Linear Model Regression Results                  \n",
       "==============================================================================\n",
       "Dep. Variable:              Converted   No. Observations:                 6320\n",
       "Model:                            GLM   Df Residuals:                     6306\n",
       "Model Family:                Binomial   Df Model:                           13\n",
       "Link Function:                  logit   Scale:                          1.0000\n",
       "Method:                          IRLS   Log-Likelihood:                -2843.5\n",
       "Date:                Tue, 11 Jan 2022   Deviance:                       5687.0\n",
       "Time:                        12:35:30   Pearson chi2:                 6.78e+03\n",
       "No. Iterations:                     7                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================================================\n",
       "                                                           coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------------------------------------\n",
       "const                                                   -3.3775      0.129    -26.196      0.000      -3.630      -3.125\n",
       "Do Not Email                                            -1.1287      0.158     -7.162      0.000      -1.438      -0.820\n",
       "TotalVisits                                              1.2898      0.271      4.764      0.000       0.759       1.820\n",
       "Total Time Spent on Website                              4.3580      0.158     27.642      0.000       4.049       4.667\n",
       "Page Views Per Visit                                    -0.4807      0.235     -2.045      0.041      -0.941      -0.020\n",
       "Search                                                  -1.4781      0.994     -1.488      0.137      -3.426       0.469\n",
       "Lead Source_Google                                       0.4583      0.084      5.474      0.000       0.294       0.622\n",
       "Lead Source_Olark Chat                                   1.3282      0.127     10.453      0.000       1.079       1.577\n",
       "Lead Source_Organic Search                               0.2948      0.114      2.583      0.010       0.071       0.518\n",
       "Lead Source_Reference                                    3.9407      0.220     17.877      0.000       3.509       4.373\n",
       "Lead Source_Welingak Website                             6.0979      0.725      8.417      0.000       4.678       7.518\n",
       "What is your current occupation_Student                  1.0088      0.216      4.670      0.000       0.585       1.432\n",
       "What is your current occupation_Unemployed               1.3463      0.083     16.294      0.000       1.184       1.508\n",
       "What is your current occupation_Working Professional     3.9687      0.203     19.512      0.000       3.570       4.367\n",
       "========================================================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_sm = sm.add_constant(X_train[col])\n",
    "logm9 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\n",
    "res = logm9.fit()\n",
    "res.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Page Views Per Visit</td>\n",
       "      <td>5.66</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TotalVisits</td>\n",
       "      <td>4.79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>What is your current occupation_Unemployed</td>\n",
       "      <td>2.65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Total Time Spent on Website</td>\n",
       "      <td>2.16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Lead Source_Google</td>\n",
       "      <td>1.84</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Lead Source_Organic Search</td>\n",
       "      <td>1.47</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>What is your current occupation_Working Profes...</td>\n",
       "      <td>1.32</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Lead Source_Reference</td>\n",
       "      <td>1.25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Lead Source_Olark Chat</td>\n",
       "      <td>1.19</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Do Not Email</td>\n",
       "      <td>1.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>Lead Source_Welingak Website</td>\n",
       "      <td>1.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>What is your current occupation_Student</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Search</td>\n",
       "      <td>1.01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Features   VIF\n",
       "3                                Page Views Per Visit  5.66\n",
       "1                                         TotalVisits  4.79\n",
       "11         What is your current occupation_Unemployed  2.65\n",
       "2                         Total Time Spent on Website  2.16\n",
       "5                                  Lead Source_Google  1.84\n",
       "7                          Lead Source_Organic Search  1.47\n",
       "12  What is your current occupation_Working Profes...  1.32\n",
       "8                               Lead Source_Reference  1.25\n",
       "6                              Lead Source_Olark Chat  1.19\n",
       "0                                        Do Not Email  1.07\n",
       "9                        Lead Source_Welingak Website  1.07\n",
       "10            What is your current occupation_Student  1.06\n",
       "4                                              Search  1.01"
      ]
     },
     "execution_count": 106,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train[col].columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "- Removing column 'Page Views Per Visit' as it has high vif and hence insignificant"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "metadata": {},
   "outputs": [],
   "source": [
    "col = col.drop('Page Views Per Visit',1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Rebuilding Model - Model 10 (Final Model)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<table class=\"simpletable\">\n",
       "<caption>Generalized Linear Model Regression Results</caption>\n",
       "<tr>\n",
       "  <th>Dep. Variable:</th>       <td>Converted</td>    <th>  No. Observations:  </th>  <td>  6320</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model:</th>                  <td>GLM</td>       <th>  Df Residuals:      </th>  <td>  6307</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Model Family:</th>        <td>Binomial</td>     <th>  Df Model:          </th>  <td>    12</td> \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Link Function:</th>         <td>logit</td>      <th>  Scale:             </th> <td>  1.0000</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Method:</th>                <td>IRLS</td>       <th>  Log-Likelihood:    </th> <td> -2845.6</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Date:</th>            <td>Tue, 11 Jan 2022</td> <th>  Deviance:          </th> <td>  5691.2</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Time:</th>                <td>12:35:30</td>     <th>  Pearson chi2:      </th> <td>6.82e+03</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>No. Iterations:</th>          <td>7</td>        <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Covariance Type:</th>     <td>nonrobust</td>    <th>                     </th>     <td> </td>   \n",
       "</tr>\n",
       "</table>\n",
       "<table class=\"simpletable\">\n",
       "<tr>\n",
       "                            <td></td>                              <th>coef</th>     <th>std err</th>      <th>z</th>      <th>P>|z|</th>  <th>[0.025</th>    <th>0.975]</th>  \n",
       "</tr>\n",
       "<tr>\n",
       "  <th>const</th>                                                <td>   -3.4680</td> <td>    0.122</td> <td>  -28.512</td> <td> 0.000</td> <td>   -3.706</td> <td>   -3.230</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Do Not Email</th>                                         <td>   -1.1266</td> <td>    0.157</td> <td>   -7.154</td> <td> 0.000</td> <td>   -1.435</td> <td>   -0.818</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>TotalVisits</th>                                          <td>    1.0094</td> <td>    0.234</td> <td>    4.317</td> <td> 0.000</td> <td>    0.551</td> <td>    1.468</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Total Time Spent on Website</th>                          <td>    4.3496</td> <td>    0.158</td> <td>   27.608</td> <td> 0.000</td> <td>    4.041</td> <td>    4.658</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Search</th>                                               <td>   -1.5197</td> <td>    0.996</td> <td>   -1.526</td> <td> 0.127</td> <td>   -3.472</td> <td>    0.433</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Google</th>                                   <td>    0.4516</td> <td>    0.084</td> <td>    5.400</td> <td> 0.000</td> <td>    0.288</td> <td>    0.615</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Olark Chat</th>                               <td>    1.4207</td> <td>    0.119</td> <td>   11.915</td> <td> 0.000</td> <td>    1.187</td> <td>    1.654</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Organic Search</th>                           <td>    0.2646</td> <td>    0.113</td> <td>    2.342</td> <td> 0.019</td> <td>    0.043</td> <td>    0.486</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Reference</th>                                <td>    4.0333</td> <td>    0.216</td> <td>   18.666</td> <td> 0.000</td> <td>    3.610</td> <td>    4.457</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>Lead Source_Welingak Website</th>                         <td>    6.1932</td> <td>    0.723</td> <td>    8.564</td> <td> 0.000</td> <td>    4.776</td> <td>    7.610</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Student</th>              <td>    1.0028</td> <td>    0.216</td> <td>    4.641</td> <td> 0.000</td> <td>    0.579</td> <td>    1.426</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Unemployed</th>           <td>    1.3389</td> <td>    0.082</td> <td>   16.237</td> <td> 0.000</td> <td>    1.177</td> <td>    1.501</td>\n",
       "</tr>\n",
       "<tr>\n",
       "  <th>What is your current occupation_Working Professional</th> <td>    3.9607</td> <td>    0.203</td> <td>   19.486</td> <td> 0.000</td> <td>    3.562</td> <td>    4.359</td>\n",
       "</tr>\n",
       "</table>"
      ],
      "text/plain": [
       "<class 'statsmodels.iolib.summary.Summary'>\n",
       "\"\"\"\n",
       "                 Generalized Linear Model Regression Results                  \n",
       "==============================================================================\n",
       "Dep. Variable:              Converted   No. Observations:                 6320\n",
       "Model:                            GLM   Df Residuals:                     6307\n",
       "Model Family:                Binomial   Df Model:                           12\n",
       "Link Function:                  logit   Scale:                          1.0000\n",
       "Method:                          IRLS   Log-Likelihood:                -2845.6\n",
       "Date:                Tue, 11 Jan 2022   Deviance:                       5691.2\n",
       "Time:                        12:35:30   Pearson chi2:                 6.82e+03\n",
       "No. Iterations:                     7                                         \n",
       "Covariance Type:            nonrobust                                         \n",
       "========================================================================================================================\n",
       "                                                           coef    std err          z      P>|z|      [0.025      0.975]\n",
       "------------------------------------------------------------------------------------------------------------------------\n",
       "const                                                   -3.4680      0.122    -28.512      0.000      -3.706      -3.230\n",
       "Do Not Email                                            -1.1266      0.157     -7.154      0.000      -1.435      -0.818\n",
       "TotalVisits                                              1.0094      0.234      4.317      0.000       0.551       1.468\n",
       "Total Time Spent on Website                              4.3496      0.158     27.608      0.000       4.041       4.658\n",
       "Search                                                  -1.5197      0.996     -1.526      0.127      -3.472       0.433\n",
       "Lead Source_Google                                       0.4516      0.084      5.400      0.000       0.288       0.615\n",
       "Lead Source_Olark Chat                                   1.4207      0.119     11.915      0.000       1.187       1.654\n",
       "Lead Source_Organic Search                               0.2646      0.113      2.342      0.019       0.043       0.486\n",
       "Lead Source_Reference                                    4.0333      0.216     18.666      0.000       3.610       4.457\n",
       "Lead Source_Welingak Website                             6.1932      0.723      8.564      0.000       4.776       7.610\n",
       "What is your current occupation_Student                  1.0028      0.216      4.641      0.000       0.579       1.426\n",
       "What is your current occupation_Unemployed               1.3389      0.082     16.237      0.000       1.177       1.501\n",
       "What is your current occupation_Working Professional     3.9607      0.203     19.486      0.000       3.562       4.359\n",
       "========================================================================================================================\n",
       "\"\"\""
      ]
     },
     "execution_count": 108,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train_sm = sm.add_constant(X_train[col])\n",
    "logm10 = sm.GLM(y_train,X_train_sm, family = sm.families.Binomial())\n",
    "res = logm10.fit()\n",
    "res.summary()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Features</th>\n",
       "      <th>VIF</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>TotalVisits</td>\n",
       "      <td>2.77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>What is your current occupation_Unemployed</td>\n",
       "      <td>2.50</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Total Time Spent on Website</td>\n",
       "      <td>2.12</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>Lead Source_Google</td>\n",
       "      <td>1.76</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>Lead Source_Organic Search</td>\n",
       "      <td>1.40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>What is your current occupation_Working Profes...</td>\n",
       "      <td>1.31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>Lead Source_Reference</td>\n",
       "      <td>1.24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>Lead Source_Olark Chat</td>\n",
       "      <td>1.18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>Lead Source_Welingak Website</td>\n",
       "      <td>1.07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>Do Not Email</td>\n",
       "      <td>1.06</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>What is your current occupation_Student</td>\n",
       "      <td>1.05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>Search</td>\n",
       "      <td>1.01</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                                             Features   VIF\n",
       "1                                         TotalVisits  2.77\n",
       "10         What is your current occupation_Unemployed  2.50\n",
       "2                         Total Time Spent on Website  2.12\n",
       "4                                  Lead Source_Google  1.76\n",
       "6                          Lead Source_Organic Search  1.40\n",
       "11  What is your current occupation_Working Profes...  1.31\n",
       "7                               Lead Source_Reference  1.24\n",
       "5                              Lead Source_Olark Chat  1.18\n",
       "8                        Lead Source_Welingak Website  1.07\n",
       "0                                        Do Not Email  1.06\n",
       "9             What is your current occupation_Student  1.05\n",
       "3                                              Search  1.01"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Create a dataframe that will contain the names of all the feature variables and their respective VIFs\n",
    "\n",
    "vif = pd.DataFrame()\n",
    "vif['Features'] = X_train[col].columns\n",
    "vif['VIF'] = [variance_inflation_factor(X_train[col].values, i) for i in range(X_train[col].shape[1])]\n",
    "vif['VIF'] = round(vif['VIF'], 2)\n",
    "vif = vif.sort_values(by = \"VIF\", ascending = False)\n",
    "vif"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since the Model 7 seems to be stable with significant pvalues, we shall go ahead with this model for further analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2240    0.747052\n",
       "113     0.778814\n",
       "4132    0.830706\n",
       "5573    0.132698\n",
       "1109    0.051461\n",
       "2282    0.065369\n",
       "2976    0.958404\n",
       "8431    0.248018\n",
       "2770    0.870372\n",
       "5790    0.989292\n",
       "dtype: float64"
      ]
     },
     "execution_count": 110,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Getting the predicted values on the train set\n",
    "\n",
    "y_train_pred = res.predict(X_train_sm)\n",
    "y_train_pred[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([0.74705246, 0.77881389, 0.83070628, 0.13269755, 0.05146055,\n",
       "       0.06536946, 0.95840389, 0.24801779, 0.87037169, 0.98929208])"
      ]
     },
     "execution_count": 111,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Reshape\n",
    "\n",
    "y_train_pred = y_train_pred.values.reshape(-1)\n",
    "y_train_pred[:10]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Creating a dataframe with the actual converted flag and the predicted probabilities"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Converted</th>\n",
       "      <th>Converted_Prob</th>\n",
       "      <th>LeadId</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.747052</td>\n",
       "      <td>2240</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0.778814</td>\n",
       "      <td>113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0.830706</td>\n",
       "      <td>4132</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0.132698</td>\n",
       "      <td>5573</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0.051461</td>\n",
       "      <td>1109</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Converted  Converted_Prob  LeadId\n",
       "0          0        0.747052    2240\n",
       "1          0        0.778814     113\n",
       "2          1        0.830706    4132\n",
       "3          0        0.132698    5573\n",
       "4          0        0.051461    1109"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_pred_final = pd.DataFrame({'Converted':y_train.values, 'Converted_Prob':y_train_pred})\n",
    "y_train_pred_final['LeadId'] = y_train.index\n",
    "y_train_pred_final.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Creating new column 'predicted' with 1 if Converted_Prob > 0.5 else 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Converted</th>\n",
       "      <th>Converted_Prob</th>\n",
       "      <th>LeadId</th>\n",
       "      <th>predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.747052</td>\n",
       "      <td>2240</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0.778814</td>\n",
       "      <td>113</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0.830706</td>\n",
       "      <td>4132</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0.132698</td>\n",
       "      <td>5573</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0.051461</td>\n",
       "      <td>1109</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Converted  Converted_Prob  LeadId  predicted\n",
       "0          0        0.747052    2240          1\n",
       "1          0        0.778814     113          1\n",
       "2          1        0.830706    4132          1\n",
       "3          0        0.132698    5573          0\n",
       "4          0        0.051461    1109          0"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_pred_final['predicted'] = y_train_pred_final.Converted_Prob.map(lambda x: 1 if x > 0.5 else 0)\n",
    "y_train_pred_final.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Lets check the confusion metrics and accuracy"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 114,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn import metrics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 115,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[[3454  404]\n",
      " [ 869 1593]]\n"
     ]
    }
   ],
   "source": [
    "# Confusion matrix \n",
    "\n",
    "confusion = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final.predicted )\n",
    "print(confusion)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Predicted     not_converted    converted\n",
    "# Actual\n",
    "# not_converted        3454      404\n",
    "# converted            869       1593"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7985759493670886\n"
     ]
    }
   ],
   "source": [
    "# Let's check the overall accuracy.\n",
    "\n",
    "print(metrics.accuracy_score(y_train_pred_final.Converted, y_train_pred_final.predicted))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Accuracy rate is around 80% which is good. However we will also need to calculate the other metrics as we cannot depend only \n",
    "on the accuracy metrics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Metrics - Sensitivity, Specificity, False Positive Rate, Postitive Predictive Value and Negative Predictive Value"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "metadata": {},
   "outputs": [],
   "source": [
    "TP = confusion[1,1] # true positive \n",
    "TN = confusion[0,0] # true negatives\n",
    "FP = confusion[0,1] # false positives\n",
    "FN = confusion[1,0] # false negatives"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6470349309504468"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's see the sensitivity of our logistic regression model\n",
    "\n",
    "TP / float(TP+FN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.8952825298081908"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let us calculate specificity\n",
    "\n",
    "TN / float(TN+FP)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.10471747019180923\n"
     ]
    }
   ],
   "source": [
    "# Calculate false postive rate - predicting non conversion when leads have converted\n",
    "\n",
    "print(FP/ float(TN+FP))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7976965448172258\n"
     ]
    }
   ],
   "source": [
    "# positive predictive value \n",
    "\n",
    "print(TP / float(TP+FP))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.7989821882951654\n"
     ]
    }
   ],
   "source": [
    "# Negative predictive value\n",
    "\n",
    "print(TN / float(TN+ FN))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 9: Plotting the ROC Curve"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "An ROC curve demonstrates several things:\n",
    "\n",
    "- It shows the tradeoff between sensitivity and specificity (any increase in sensitivity will be accompanied by a decrease in specificity).\n",
    "- The closer the curve follows the left-hand border and then the top border of the ROC space, the more accurate the test.\n",
    "- The closer the curve comes to the 45-degree diagonal of the ROC space, the less accurate the test."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "def draw_roc( actual, probs ):\n",
    "    fpr, tpr, thresholds = metrics.roc_curve( actual, probs,\n",
    "                                              drop_intermediate = False )\n",
    "    auc_score = metrics.roc_auc_score( actual, probs )\n",
    "    plt.figure(figsize=(5, 5))\n",
    "    plt.plot( fpr, tpr, label='ROC curve (area = %0.2f)' % auc_score )\n",
    "    plt.plot([0, 1], [0, 1], 'k--')\n",
    "    plt.xlim([0.0, 1.0])\n",
    "    plt.ylim([0.0, 1.05])\n",
    "    plt.xlabel('False Positive Rate or [1 - True Negative Rate]')\n",
    "    plt.ylabel('True Positive Rate')\n",
    "    plt.title('Receiver operating characteristic example')\n",
    "    plt.legend(loc=\"lower right\")\n",
    "    plt.show()\n",
    "\n",
    "    return None"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "fpr, tpr, thresholds = metrics.roc_curve( y_train_pred_final.Converted, y_train_pred_final.Converted_Prob, \n",
    "                                         drop_intermediate = False )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 360x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "draw_roc(y_train_pred_final.Converted, y_train_pred_final.Converted_Prob)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 10: Finding Optimal Cutoff Point"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Optimal cut off probability is that prob where we get balanced sensitivity and specificity"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Converted</th>\n",
       "      <th>Converted_Prob</th>\n",
       "      <th>LeadId</th>\n",
       "      <th>predicted</th>\n",
       "      <th>0.0</th>\n",
       "      <th>0.1</th>\n",
       "      <th>0.2</th>\n",
       "      <th>0.3</th>\n",
       "      <th>0.4</th>\n",
       "      <th>0.5</th>\n",
       "      <th>0.6</th>\n",
       "      <th>0.7</th>\n",
       "      <th>0.8</th>\n",
       "      <th>0.9</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.747052</td>\n",
       "      <td>2240</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0.778814</td>\n",
       "      <td>113</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0.830706</td>\n",
       "      <td>4132</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0.132698</td>\n",
       "      <td>5573</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0.051461</td>\n",
       "      <td>1109</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Converted  Converted_Prob  LeadId  predicted  0.0  0.1  0.2  0.3  0.4  0.5  \\\n",
       "0          0        0.747052    2240          1    1    1    1    1    1    1   \n",
       "1          0        0.778814     113          1    1    1    1    1    1    1   \n",
       "2          1        0.830706    4132          1    1    1    1    1    1    1   \n",
       "3          0        0.132698    5573          0    1    1    0    0    0    0   \n",
       "4          0        0.051461    1109          0    1    0    0    0    0    0   \n",
       "\n",
       "   0.6  0.7  0.8  0.9  \n",
       "0    1    1    0    0  \n",
       "1    1    1    0    0  \n",
       "2    1    1    1    0  \n",
       "3    0    0    0    0  \n",
       "4    0    0    0    0  "
      ]
     },
     "execution_count": 127,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's create columns with different probability cutoffs \n",
    "numbers = [float(x)/10 for x in range(10)]\n",
    "for i in numbers:\n",
    "    y_train_pred_final[i]= y_train_pred_final.Converted_Prob.map(lambda x: 1 if x > i else 0)\n",
    "y_train_pred_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 128,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     prob  accuracy     sensi     speci\n",
      "0.0   0.0  0.389557  1.000000  0.000000\n",
      "0.1   0.1  0.517563  0.981722  0.221358\n",
      "0.2   0.2  0.683861  0.904549  0.543027\n",
      "0.3   0.3  0.768987  0.836718  0.725765\n",
      "0.4   0.4  0.797943  0.704712  0.857439\n",
      "0.5   0.5  0.798576  0.647035  0.895283\n",
      "0.6   0.6  0.785918  0.581641  0.916278\n",
      "0.7   0.7  0.764873  0.482941  0.944790\n",
      "0.8   0.8  0.737500  0.374898  0.968896\n",
      "0.9   0.9  0.690348  0.214054  0.994298\n"
     ]
    }
   ],
   "source": [
    "# Now let's calculate accuracy sensitivity and specificity for various probability cutoffs.\n",
    "\n",
    "cutoff_df = pd.DataFrame( columns = ['prob','accuracy','sensi','speci'])\n",
    "from sklearn.metrics import confusion_matrix\n",
    "\n",
    "# TP = confusion[1,1] # true positive \n",
    "# TN = confusion[0,0] # true negatives\n",
    "# FP = confusion[0,1] # false positives\n",
    "# FN = confusion[1,0] # false negatives\n",
    "\n",
    "num = [0.0,0.1,0.2,0.3,0.4,0.5,0.6,0.7,0.8,0.9]\n",
    "for i in num:\n",
    "    cm1 = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final[i] )\n",
    "    total1=sum(sum(cm1))\n",
    "    accuracy = (cm1[0,0]+cm1[1,1])/total1\n",
    "    \n",
    "    speci = cm1[0,0]/(cm1[0,0]+cm1[0,1])\n",
    "    sensi = cm1[1,1]/(cm1[1,0]+cm1[1,1])\n",
    "    cutoff_df.loc[i] =[ i ,accuracy,sensi,speci]\n",
    "print(cutoff_df)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# Let's plot accuracy sensitivity and specificity for various probabilities.\n",
    "\n",
    "cutoff_df.plot.line(x='prob', y=['accuracy','sensi','speci'])\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### From the curve above, 0.329 is the optimum point to take it as a cutoff probability."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 130,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Converted</th>\n",
       "      <th>Converted_Prob</th>\n",
       "      <th>LeadId</th>\n",
       "      <th>predicted</th>\n",
       "      <th>0.0</th>\n",
       "      <th>0.1</th>\n",
       "      <th>0.2</th>\n",
       "      <th>0.3</th>\n",
       "      <th>0.4</th>\n",
       "      <th>0.5</th>\n",
       "      <th>0.6</th>\n",
       "      <th>0.7</th>\n",
       "      <th>0.8</th>\n",
       "      <th>0.9</th>\n",
       "      <th>final_predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.747052</td>\n",
       "      <td>2240</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0.778814</td>\n",
       "      <td>113</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0.830706</td>\n",
       "      <td>4132</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0.132698</td>\n",
       "      <td>5573</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0.051461</td>\n",
       "      <td>1109</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Converted  Converted_Prob  LeadId  predicted  0.0  0.1  0.2  0.3  0.4  0.5  \\\n",
       "0          0        0.747052    2240          1    1    1    1    1    1    1   \n",
       "1          0        0.778814     113          1    1    1    1    1    1    1   \n",
       "2          1        0.830706    4132          1    1    1    1    1    1    1   \n",
       "3          0        0.132698    5573          0    1    1    0    0    0    0   \n",
       "4          0        0.051461    1109          0    1    0    0    0    0    0   \n",
       "\n",
       "   0.6  0.7  0.8  0.9  final_predicted  \n",
       "0    1    1    0    0                1  \n",
       "1    1    1    0    0                1  \n",
       "2    1    1    1    0                1  \n",
       "3    0    0    0    0                0  \n",
       "4    0    0    0    0                0  "
      ]
     },
     "execution_count": 130,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let us make the final prediction using 0.32 as the cut off\n",
    "\n",
    "y_train_pred_final['final_predicted'] = y_train_pred_final.Converted_Prob.map( lambda x: 1 if x > 0.32 else 0)\n",
    "y_train_pred_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Converted</th>\n",
       "      <th>Converted_Prob</th>\n",
       "      <th>LeadId</th>\n",
       "      <th>predicted</th>\n",
       "      <th>0.0</th>\n",
       "      <th>0.1</th>\n",
       "      <th>0.2</th>\n",
       "      <th>0.3</th>\n",
       "      <th>0.4</th>\n",
       "      <th>0.5</th>\n",
       "      <th>0.6</th>\n",
       "      <th>0.7</th>\n",
       "      <th>0.8</th>\n",
       "      <th>0.9</th>\n",
       "      <th>final_predicted</th>\n",
       "      <th>lead_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>0.747052</td>\n",
       "      <td>2240</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>0.778814</td>\n",
       "      <td>113</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>0.830706</td>\n",
       "      <td>4132</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>0.132698</td>\n",
       "      <td>5573</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>0</td>\n",
       "      <td>0.051461</td>\n",
       "      <td>1109</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>0.065369</td>\n",
       "      <td>2282</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>7</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>1</td>\n",
       "      <td>0.958404</td>\n",
       "      <td>2976</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>96</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>0.248018</td>\n",
       "      <td>8431</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>25</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>1</td>\n",
       "      <td>0.870372</td>\n",
       "      <td>2770</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>0.989292</td>\n",
       "      <td>5790</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>99</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>1</td>\n",
       "      <td>0.901150</td>\n",
       "      <td>2943</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>0</td>\n",
       "      <td>0.313849</td>\n",
       "      <td>1196</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>31</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>1</td>\n",
       "      <td>0.329967</td>\n",
       "      <td>8874</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0</td>\n",
       "      <td>0.144153</td>\n",
       "      <td>1491</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "      <td>0.329967</td>\n",
       "      <td>7676</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1</td>\n",
       "      <td>0.343561</td>\n",
       "      <td>8750</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>34</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>1</td>\n",
       "      <td>0.870372</td>\n",
       "      <td>5049</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>0</td>\n",
       "      <td>0.329967</td>\n",
       "      <td>5691</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>1</td>\n",
       "      <td>0.204227</td>\n",
       "      <td>5773</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>0</td>\n",
       "      <td>0.114328</td>\n",
       "      <td>3906</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Converted  Converted_Prob  LeadId  predicted  0.0  0.1  0.2  0.3  0.4  \\\n",
       "0           0        0.747052    2240          1    1    1    1    1    1   \n",
       "1           0        0.778814     113          1    1    1    1    1    1   \n",
       "2           1        0.830706    4132          1    1    1    1    1    1   \n",
       "3           0        0.132698    5573          0    1    1    0    0    0   \n",
       "4           0        0.051461    1109          0    1    0    0    0    0   \n",
       "5           0        0.065369    2282          0    1    0    0    0    0   \n",
       "6           1        0.958404    2976          1    1    1    1    1    1   \n",
       "7           0        0.248018    8431          0    1    1    1    0    0   \n",
       "8           1        0.870372    2770          1    1    1    1    1    1   \n",
       "9           1        0.989292    5790          1    1    1    1    1    1   \n",
       "10          1        0.901150    2943          1    1    1    1    1    1   \n",
       "11          0        0.313849    1196          0    1    1    1    1    0   \n",
       "12          1        0.329967    8874          0    1    1    1    1    0   \n",
       "13          0        0.144153    1491          0    1    1    0    0    0   \n",
       "14          0        0.329967    7676          0    1    1    1    1    0   \n",
       "15          1        0.343561    8750          0    1    1    1    1    0   \n",
       "16          1        0.870372    5049          1    1    1    1    1    1   \n",
       "17          0        0.329967    5691          0    1    1    1    1    0   \n",
       "18          1        0.204227    5773          0    1    1    1    0    0   \n",
       "19          0        0.114328    3906          0    1    1    0    0    0   \n",
       "\n",
       "    0.5  0.6  0.7  0.8  0.9  final_predicted  lead_score  \n",
       "0     1    1    1    0    0                1          75  \n",
       "1     1    1    1    0    0                1          78  \n",
       "2     1    1    1    1    0                1          83  \n",
       "3     0    0    0    0    0                0          13  \n",
       "4     0    0    0    0    0                0           5  \n",
       "5     0    0    0    0    0                0           7  \n",
       "6     1    1    1    1    1                1          96  \n",
       "7     0    0    0    0    0                0          25  \n",
       "8     1    1    1    1    0                1          87  \n",
       "9     1    1    1    1    1                1          99  \n",
       "10    1    1    1    1    1                1          90  \n",
       "11    0    0    0    0    0                0          31  \n",
       "12    0    0    0    0    0                1          33  \n",
       "13    0    0    0    0    0                0          14  \n",
       "14    0    0    0    0    0                1          33  \n",
       "15    0    0    0    0    0                1          34  \n",
       "16    1    1    1    1    0                1          87  \n",
       "17    0    0    0    0    0                1          33  \n",
       "18    0    0    0    0    0                0          20  \n",
       "19    0    0    0    0    0                0          11  "
      ]
     },
     "execution_count": 131,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now let us calculate the lead score\n",
    "\n",
    "y_train_pred_final['lead_score'] = y_train_pred_final.Converted_Prob.map(lambda x: round(x*100))\n",
    "y_train_pred_final.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 132,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    2025\n",
       "0     437\n",
       "Name: final_predicted, dtype: int64"
      ]
     },
     "execution_count": 132,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking if 80% cases are correctly predicted based on the converted column.\n",
    "\n",
    "# get the total of final predicted conversion / non conversion counts from the actual converted rates\n",
    "\n",
    "checking_df = y_train_pred_final.loc[y_train_pred_final['Converted']==1,['Converted','final_predicted']]\n",
    "checking_df['final_predicted'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 179,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.822502030869212"
      ]
     },
     "execution_count": 179,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check the precentage of final_predicted conversions\n",
    "\n",
    "2025/float(2025+437)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Hence we can see that the final prediction of conversions have a target of 82% (82.25%) conversion as per the X Educations CEO's requirement . Hence this is a good model."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Overall Metrics - Accuracy, Confusion Metrics, Sensitivity, Specificity, False Postive Rate, Positive Predictive Value, Negative Predicitive Value  on final prediction on train set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7735759493670886"
      ]
     },
     "execution_count": 134,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's check the overall accuracy.\n",
    "\n",
    "metrics.accuracy_score(y_train_pred_final.Converted, y_train_pred_final.final_predicted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[2864,  994],\n",
       "       [ 437, 2025]])"
      ]
     },
     "execution_count": 135,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion2 = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final.final_predicted )\n",
    "confusion2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 136,
   "metadata": {},
   "outputs": [],
   "source": [
    "TP = confusion2[1,1] # true positive \n",
    "TN = confusion2[0,0] # true negatives\n",
    "FP = confusion2[0,1] # false positives\n",
    "FN = confusion2[1,0] # false negatives"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.822502030869212"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's see the sensitivity of our logistic regression model\n",
    "\n",
    "TP / float(TP+FN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7423535510627268"
      ]
     },
     "execution_count": 138,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let us calculate specificity\n",
    "\n",
    "TN / float(TN+FP)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.2576464489372732\n"
     ]
    }
   ],
   "source": [
    "# Calculate false postive rate - predicting conversions when leads has not converted\n",
    "\n",
    "print(FP/ float(TN+FP))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.6707519046041736\n"
     ]
    }
   ],
   "source": [
    "# Positive predictive value \n",
    "\n",
    "print (TP / float(TP+FP))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.8676158739775826\n"
     ]
    }
   ],
   "source": [
    "# Negative predictive value\n",
    "\n",
    "print (TN / float(TN+ FN))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Metrics - Precision and Recall"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[3454,  404],\n",
       "       [ 869, 1593]])"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#Looking at the confusion matrix again\n",
    "\n",
    "confusion = metrics.confusion_matrix(y_train_pred_final.Converted, y_train_pred_final.predicted )\n",
    "confusion"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import precision_score, recall_score"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 144,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7976965448172258"
      ]
     },
     "execution_count": 144,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# precision\n",
    "\n",
    "precision_score(y_train_pred_final.Converted, y_train_pred_final.predicted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.6470349309504468"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# recall\n",
    "\n",
    "recall_score(y_train_pred_final.Converted, y_train_pred_final.predicted)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Precision and recall tradeoff"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.metrics import precision_recall_curve"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 147,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(0       0\n",
       " 1       0\n",
       " 2       1\n",
       " 3       0\n",
       " 4       0\n",
       "        ..\n",
       " 6315    1\n",
       " 6316    1\n",
       " 6317    0\n",
       " 6318    0\n",
       " 6319    0\n",
       " Name: Converted, Length: 6320, dtype: int64,\n",
       " 0       1\n",
       " 1       1\n",
       " 2       1\n",
       " 3       0\n",
       " 4       0\n",
       "        ..\n",
       " 6315    0\n",
       " 6316    1\n",
       " 6317    0\n",
       " 6318    0\n",
       " 6319    0\n",
       " Name: predicted, Length: 6320, dtype: int64)"
      ]
     },
     "execution_count": 147,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train_pred_final.Converted, y_train_pred_final.predicted"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 148,
   "metadata": {},
   "outputs": [],
   "source": [
    "p, r, thresholds = precision_recall_curve(y_train_pred_final.Converted, y_train_pred_final.Converted_Prob)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 149,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "plt.plot(thresholds, p[:-1], \"g-\")\n",
    "plt.plot(thresholds, r[:-1], \"r-\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Step 11: Making predictions on the test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 150,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test[['TotalVisits','Total Time Spent on Website','Page Views Per Visit']] = scaler.transform(X_test[['TotalVisits',\n",
    "                                                                        'Total Time Spent on Website','Page Views Per Visit']])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 151,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Do Not Email</th>\n",
       "      <th>TotalVisits</th>\n",
       "      <th>Total Time Spent on Website</th>\n",
       "      <th>Search</th>\n",
       "      <th>Lead Source_Google</th>\n",
       "      <th>Lead Source_Olark Chat</th>\n",
       "      <th>Lead Source_Organic Search</th>\n",
       "      <th>Lead Source_Reference</th>\n",
       "      <th>Lead Source_Welingak Website</th>\n",
       "      <th>What is your current occupation_Student</th>\n",
       "      <th>What is your current occupation_Unemployed</th>\n",
       "      <th>What is your current occupation_Working Professional</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2296</th>\n",
       "      <td>0</td>\n",
       "      <td>0.1875</td>\n",
       "      <td>0.665313</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8697</th>\n",
       "      <td>0</td>\n",
       "      <td>0.4375</td>\n",
       "      <td>0.184032</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7378</th>\n",
       "      <td>0</td>\n",
       "      <td>0.1250</td>\n",
       "      <td>0.163284</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8631</th>\n",
       "      <td>0</td>\n",
       "      <td>0.3125</td>\n",
       "      <td>0.407307</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4799</th>\n",
       "      <td>0</td>\n",
       "      <td>0.5000</td>\n",
       "      <td>0.744700</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "      Do Not Email  TotalVisits  Total Time Spent on Website  Search  \\\n",
       "2296             0       0.1875                     0.665313       0   \n",
       "8697             0       0.4375                     0.184032       0   \n",
       "7378             0       0.1250                     0.163284       0   \n",
       "8631             0       0.3125                     0.407307       0   \n",
       "4799             0       0.5000                     0.744700       0   \n",
       "\n",
       "      Lead Source_Google  Lead Source_Olark Chat  Lead Source_Organic Search  \\\n",
       "2296                   1                       0                           0   \n",
       "8697                   0                       0                           0   \n",
       "7378                   0                       0                           0   \n",
       "8631                   0                       0                           1   \n",
       "4799                   0                       0                           1   \n",
       "\n",
       "      Lead Source_Reference  Lead Source_Welingak Website  \\\n",
       "2296                      0                             0   \n",
       "8697                      0                             0   \n",
       "7378                      0                             0   \n",
       "8631                      0                             0   \n",
       "4799                      0                             0   \n",
       "\n",
       "      What is your current occupation_Student  \\\n",
       "2296                                        0   \n",
       "8697                                        0   \n",
       "7378                                        0   \n",
       "8631                                        0   \n",
       "4799                                        0   \n",
       "\n",
       "      What is your current occupation_Unemployed  \\\n",
       "2296                                           1   \n",
       "8697                                           1   \n",
       "7378                                           1   \n",
       "8631                                           1   \n",
       "4799                                           1   \n",
       "\n",
       "      What is your current occupation_Working Professional  \n",
       "2296                                                  0     \n",
       "8697                                                  0     \n",
       "7378                                                  0     \n",
       "8631                                                  0     \n",
       "4799                                                  0     "
      ]
     },
     "execution_count": 151,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test = X_test[col]\n",
    "X_test.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_test_sm = sm.add_constant(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Making predictions on the test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_test_pred = res.predict(X_test_sm)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 154,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "2296    0.803074\n",
       "8697    0.291736\n",
       "7378    0.215403\n",
       "8631    0.555428\n",
       "4799    0.867544\n",
       "4503    0.114328\n",
       "7129    0.932015\n",
       "1717    0.114328\n",
       "8398    0.901161\n",
       "5116    0.329967\n",
       "dtype: float64"
      ]
     },
     "execution_count": 154,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test_pred[:10]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 155,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Converting y_pred to a dataframe which is an array\n",
    "\n",
    "y_pred_1 = pd.DataFrame(y_test_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 156,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>2296</th>\n",
       "      <td>0.803074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8697</th>\n",
       "      <td>0.291736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7378</th>\n",
       "      <td>0.215403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8631</th>\n",
       "      <td>0.555428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4799</th>\n",
       "      <td>0.867544</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "             0\n",
       "2296  0.803074\n",
       "8697  0.291736\n",
       "7378  0.215403\n",
       "8631  0.555428\n",
       "4799  0.867544"
      ]
     },
     "execution_count": 156,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's see the head\n",
    "\n",
    "y_pred_1.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Converting y_test to dataframe\n",
    "\n",
    "y_test_df = pd.DataFrame(y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Putting LeadId to index\n",
    "\n",
    "y_test_df['LeadId'] = y_test_df.index"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Removing index for both dataframes to append them side by side \n",
    "\n",
    "y_pred_1.reset_index(drop=True, inplace=True)\n",
    "y_test_df.reset_index(drop=True, inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 160,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Appending y_test_df and y_pred_1\n",
    "\n",
    "y_pred_final = pd.concat([y_test_df, y_pred_1],axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 161,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Converted</th>\n",
       "      <th>LeadId</th>\n",
       "      <th>0</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2296</td>\n",
       "      <td>0.803074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>8697</td>\n",
       "      <td>0.291736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>7378</td>\n",
       "      <td>0.215403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>8631</td>\n",
       "      <td>0.555428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>4799</td>\n",
       "      <td>0.867544</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Converted  LeadId         0\n",
       "0          1    2296  0.803074\n",
       "1          0    8697  0.291736\n",
       "2          0    7378  0.215403\n",
       "3          0    8631  0.555428\n",
       "4          1    4799  0.867544"
      ]
     },
     "execution_count": 161,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Renaming the column \n",
    "\n",
    "y_pred_final= y_pred_final.rename(columns={ 0 : 'Converted_Prob'})"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Converted</th>\n",
       "      <th>LeadId</th>\n",
       "      <th>Converted_Prob</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2296</td>\n",
       "      <td>0.803074</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>8697</td>\n",
       "      <td>0.291736</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>7378</td>\n",
       "      <td>0.215403</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>8631</td>\n",
       "      <td>0.555428</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>4799</td>\n",
       "      <td>0.867544</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Converted  LeadId  Converted_Prob\n",
       "0          1    2296        0.803074\n",
       "1          0    8697        0.291736\n",
       "2          0    7378        0.215403\n",
       "3          0    8631        0.555428\n",
       "4          1    4799        0.867544"
      ]
     },
     "execution_count": 164,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Based on cut off threshold using accuracy, sensitivity and specificity of 0.32%\n",
    "\n",
    "y_pred_final['final_predicted'] = y_pred_final.Converted_Prob.map(lambda x: 1 if x > 0.32 else 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Converted</th>\n",
       "      <th>LeadId</th>\n",
       "      <th>Converted_Prob</th>\n",
       "      <th>final_predicted</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2296</td>\n",
       "      <td>0.803074</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>8697</td>\n",
       "      <td>0.291736</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>7378</td>\n",
       "      <td>0.215403</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>8631</td>\n",
       "      <td>0.555428</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>4799</td>\n",
       "      <td>0.867544</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   Converted  LeadId  Converted_Prob  final_predicted\n",
       "0          1    2296        0.803074                1\n",
       "1          0    8697        0.291736                0\n",
       "2          0    7378        0.215403                0\n",
       "3          0    8631        0.555428                1\n",
       "4          1    4799        0.867544                1"
      ]
     },
     "execution_count": 166,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_pred_final.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Converted</th>\n",
       "      <th>LeadId</th>\n",
       "      <th>Converted_Prob</th>\n",
       "      <th>final_predicted</th>\n",
       "      <th>lead_score</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>2296</td>\n",
       "      <td>0.803074</td>\n",
       "      <td>1</td>\n",
       "      <td>80</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>0</td>\n",
       "      <td>8697</td>\n",
       "      <td>0.291736</td>\n",
       "      <td>0</td>\n",
       "      <td>29</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>0</td>\n",
       "      <td>7378</td>\n",
       "      <td>0.215403</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>0</td>\n",
       "      <td>8631</td>\n",
       "      <td>0.555428</td>\n",
       "      <td>1</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>4799</td>\n",
       "      <td>0.867544</td>\n",
       "      <td>1</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>0</td>\n",
       "      <td>4503</td>\n",
       "      <td>0.114328</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>0</td>\n",
       "      <td>7129</td>\n",
       "      <td>0.932015</td>\n",
       "      <td>1</td>\n",
       "      <td>93</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>0</td>\n",
       "      <td>1717</td>\n",
       "      <td>0.114328</td>\n",
       "      <td>0</td>\n",
       "      <td>11</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>0</td>\n",
       "      <td>8398</td>\n",
       "      <td>0.901161</td>\n",
       "      <td>1</td>\n",
       "      <td>90</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>1</td>\n",
       "      <td>5116</td>\n",
       "      <td>0.329967</td>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>0</td>\n",
       "      <td>1838</td>\n",
       "      <td>0.258512</td>\n",
       "      <td>0</td>\n",
       "      <td>26</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>1</td>\n",
       "      <td>5057</td>\n",
       "      <td>0.742553</td>\n",
       "      <td>1</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>0</td>\n",
       "      <td>7015</td>\n",
       "      <td>0.040161</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>0</td>\n",
       "      <td>6352</td>\n",
       "      <td>0.401773</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>0</td>\n",
       "      <td>575</td>\n",
       "      <td>0.329967</td>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>1</td>\n",
       "      <td>4597</td>\n",
       "      <td>0.238804</td>\n",
       "      <td>0</td>\n",
       "      <td>24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>0</td>\n",
       "      <td>8355</td>\n",
       "      <td>0.560195</td>\n",
       "      <td>1</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>1</td>\n",
       "      <td>8574</td>\n",
       "      <td>0.331482</td>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>0</td>\n",
       "      <td>4207</td>\n",
       "      <td>0.040161</td>\n",
       "      <td>0</td>\n",
       "      <td>4</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>19</th>\n",
       "      <td>1</td>\n",
       "      <td>4420</td>\n",
       "      <td>0.794440</td>\n",
       "      <td>1</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    Converted  LeadId  Converted_Prob  final_predicted  lead_score\n",
       "0           1    2296        0.803074                1          80\n",
       "1           0    8697        0.291736                0          29\n",
       "2           0    7378        0.215403                0          22\n",
       "3           0    8631        0.555428                1          56\n",
       "4           1    4799        0.867544                1          87\n",
       "5           0    4503        0.114328                0          11\n",
       "6           0    7129        0.932015                1          93\n",
       "7           0    1717        0.114328                0          11\n",
       "8           0    8398        0.901161                1          90\n",
       "9           1    5116        0.329967                1          33\n",
       "10          0    1838        0.258512                0          26\n",
       "11          1    5057        0.742553                1          74\n",
       "12          0    7015        0.040161                0           4\n",
       "13          0    6352        0.401773                1          40\n",
       "14          0     575        0.329967                1          33\n",
       "15          1    4597        0.238804                0          24\n",
       "16          0    8355        0.560195                1          56\n",
       "17          1    8574        0.331482                1          33\n",
       "18          0    4207        0.040161                0           4\n",
       "19          1    4420        0.794440                1          79"
      ]
     },
     "execution_count": 167,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Now let us calculate the lead score\n",
    "\n",
    "y_pred_final['lead_score'] = y_pred_final.Converted_Prob.map(lambda x: round(x*100))\n",
    "y_pred_final.head(20)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1    831\n",
       "0    184\n",
       "Name: final_predicted, dtype: int64"
      ]
     },
     "execution_count": 168,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# checking if 80% cases are correctly predicted based on the converted column.\n",
    "\n",
    "# get the total of final predicted conversion or non conversion counts from the actual converted rates\n",
    "\n",
    "checking_test_df = y_pred_final.loc[y_pred_final['Converted']==1,['Converted','final_predicted']]\n",
    "checking_test_df['final_predicted'].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 178,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.81871921182266"
      ]
     },
     "execution_count": 178,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# check the precentage of final_predicted conversions on test data\n",
    "\n",
    "831/float(831+184)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Hence we can see that the final prediction of conversions have a target rate of 82% (81.8%)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Overall Metrics - Accuracy, Confusion Metrics, Sensitivity, Specificity  on test set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7689184200812108"
      ]
     },
     "execution_count": 171,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's check the accuracy.\n",
    "\n",
    "metrics.accuracy_score(y_pred_final.Converted, y_pred_final.final_predicted)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[1252,  442],\n",
       "       [ 184,  831]])"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion2 = metrics.confusion_matrix(y_pred_final.Converted, y_pred_final.final_predicted )\n",
    "confusion2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "metadata": {},
   "outputs": [],
   "source": [
    "TP = confusion2[1,1] # true positive \n",
    "TN = confusion2[0,0] # true negatives\n",
    "FP = confusion2[0,1] # false positives\n",
    "FN = confusion2[1,0] # false negatives"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.81871921182266"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let's see the sensitivity of our logistic regression model\n",
    "TP / float(TP+FN)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7390791027154664"
      ]
     },
     "execution_count": 175,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Let us calculate specificity\n",
    "TN / float(TN+FP)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Precision and Recall metrics for the test set "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "precision  0.6527886881382561\n",
      "recall  0.81871921182266\n"
     ]
    }
   ],
   "source": [
    "# precision\n",
    "print('precision ',precision_score(y_pred_final.Converted, y_pred_final.final_predicted))\n",
    "\n",
    "# recall\n",
    "print('recall ',recall_score(y_pred_final.Converted, y_pred_final.final_predicted))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 177,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAXQAAAD4CAYAAAD8Zh1EAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjMuNCwgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy8QVMy6AAAACXBIWXMAAAsTAAALEwEAmpwYAAAs6klEQVR4nO3dd3hUxRrH8e8kJKGFhIROCD1ILwakCoIIKMWChSpFQaWIoliv6AUVG0VQEREFRbiogKhIUXrTUEIn9EDoCT2BhCRz/5iAIYSwJLt7Nrvv53nyZM/Zkz3vofwY5syZUVprhBBC5H5eVhcghBDCPiTQhRDCTUigCyGEm5BAF0IINyGBLoQQbiKPVScuUqSILleunFWnF0KIXGnDhg2xWuuimb1nWaCXK1eO9evXW3V6IYTIlZRS0Td7T7pchBDCTUigCyGEm5BAF0IINyGBLoQQbkICXQgh3MQtA10pNUUpdVIpte0m7yul1KdKqb1KqS1KqXr2L1MIIcSt2NJC/xZom8X77YDKaV/9gC9yXpYQQojbdctA11qvAE5ncUgnYJo21gGBSqmS9irwBtu2waBBsGEDHDoEJ0447FRCCGFPqTqVsevGsmjfIod8vj360EsDh9Ntx6Ttu4FSqp9Sar1Sav2pU6eyd7YDB2DCBAgPh7JloUQJ8PODIkXgscdg1iyYMwfOn8/e5wshhINExUbxwsIXGL12tEM+3x5PiqpM9mW6aobWehIwCSA8PDx7K2u0aQM//ACXLkFKCmzcCN7e8Nln8OOP5uuqF1+EOnVu/AxfX2je3PxjIIQQTnIl9QoAT9d72iGfb49AjwHKpNsOAY7a4XMz5+sLXbrcuP+99yAmxrz+8UcYMQJG3+JfQR8f89W6NXTsaMK/XDkICrJ31UIIwdUV4ryUYwYY2iPQ5wEDlVIzgbuAc1rrY3b43NtTqBBUq2ZeDx8Ob74J0dGQ2RJ7O3ZARARcuWL65H/5xXxd9corMGqUc+oWQniMVJ0KgFKZdWzk3C0DXSk1A2gBFFFKxQDDAR8ArfVEYD5wP7AXSAB6O6TS2+XtDRUqZP5exYrQocO/2/Hx8PffcPw4dOsGMmmYEMIBNBa30LXWmfRvXPe+BgbYrSIrFCgALVua1z/8YIJdCCHs7GoL3VGBLk+KZhQYaIZEjh1rWu5CCGEn17pcMh1LknMS6BnVrWu+v/CCuTlasqT5KlUKXnst8z55IYRHS0pJIuFKwnX7tNZcSblybXv2ztk0/rox4LgWutIWBVR4eLh22QUuLlyAefNg1SpINf+iMmmS+V6sGOzaBYULW1efEMIyH67+kK82fkXZgLJUCqrE3WXv5q2lb7HvzD5ebPgiYcFhbD25lWIFijF82XAODTlEmYAy5Hs3H5eTLwPwR7c/aFspqwfwb04ptUFrHZ7pexLoNjp1Cp59Fn7+2Wx/8AG8/DI46G61EMK1LD+4nMC8gXT5uQvnE88TUiiEXbG7OJd4LsufuxrelcdXZu/pvQAs7L6Q+yrel606sgp06XKxVdGiZnz7s89C6dJmaGOpUvD225CUZHV1QggHOhV/ihZTW1DnyzrsjN1Jn7p9WPfUOuKGxbH+6fWMaTOG7c9tZ0nPJZQPLE/jMo0pWdDMgLL0wFIAygeWv/Z5jupDlxZ6dqSmQt++ZoqBc2n/Ot97L/zxB+SxbJlWIYQDjFwxkm8iv2H/mf08Wu1RwoLD6H9nf8oElMny5+KT4gn+MJjElETebv425xLPMWbdGAD+7PEnrSq0ylY90uXiKFqbvvZXXoGoKPOUaYcO8NxzcMcdVlcnhMihI+ePEDImBIBaxWux/un1+Hj72Pzzp+JP0XFmR9bFrCMwbyBnL58F4K+ef9GyfMts1SRdLo6iFHTqZJ42rVcPDh6E8eOhalUIDYUlS6yuUAiRA59HfA7AzgE72fzM5tsKc4CiBYryZfsvAa6FOcg4dNeWJ48Zu56cDJGR5mnTw4ehVSsYOtT0vWd3dkkhhCWGLhzKe6veA6BKcJVsf06ZQjd2zbjyXC7iKm9vqF0bvv8emjWDd9+9foKwe++FIUPggQcsK1EIcXNnLp1hzLox7IzdyU87fgLg1y6/5mjulcC8gXaq7takhe4o/fubBTjOnIGpU6F6dfjzT2jf3kwcJoRwGQfOHODL9V8S9GEQI1aMuBbmq/uspn1Y+xx9tlKKoHzXz+B6dTy6vUkL3dECA6FnT/N1/DjUrGla7itWwNKlplUvhHCqi0kXGb12NBUKV6BqkaqEf/XvPcaXG7/M4LsGk5icSMWginY530N3PMTXm76+th2f5JhpRSTQnalECdi7F554AhYsgCZNoHdvMzqmTRurqxPCrWit2X5qO4fPHWbrya3UL1WfsOAwSvmXwv99/xuOH9RgEF1rdqVB6QZ27+NuFNLoukDPOE2AvUigO1tAAPz+u1kxadUqM20vmGAfPtwsqyeEyBatNYkpiRw6d4gqE259I3PzM5v5a/9fFCtQjG61ujmsrhblWgDgrbxJ0SnEX3FMC13GoVvp5EnzlGnPnqb7BeCNN+C//wUvub0hhK06zujI8YvHiTgaccN7rzV9jfKB5SlfuDxRsVFEHo/kxx0/EvF0BJWDKzutxoQrCZxPPM/gPwYzpdMUCvoWzNbnyINFrk5r+PpreDptncHwcPPUaZEi1tYlhAtKuJLA6kOr0WhWH1rNjtgd125iXvVA5Qd4tNqjPFnnSYuqdBwJ9NwiNRU++ghefRXy5YOvvjKrLjVqZHVlQlhu/p75DFkwhD2n99zwXtPQpizpuYThy4bTrlI7mpVtZkGFziGBntuMH29Gwpw4YbZLlIB166R/XXikk/En2Xd6H22nt+V84nnaVGxDWHAYjcs05nLyZTpV6URB34K3/RRnbiWBnhtdvAg7d5qumC/No8M0b27CvmZNa2sTwkGSU5NZF7MOX29fFu5dyNebvib6XPS199f2XUvDkIYWVmi9rAJdRrm4qoIFoX5981W9OowaBcuXm+6XDz80k381bgx581pdqRB2kZKags+IzFvZefPkZcYjMzw+zG9FWui5SWSkWcz6zBmzXa0aDBsGXbuCj2f8d1O4j9iEWN5Z9g4TIibQLLQZ8Vfi2XhsIwDPhj9LgF8A79zzDr7evhZX6lqky8WdxMdDTAz8739meGNKChQoAOXLm9cvvAD33Sf97cKlJacmX9ca9/f150LSBXy9fTn50kkC8gZYWJ1rk0B3V/HxZiKwRYtM633//n/fq14dpk0z0/oK4QKiz0Yz6I9BrDy08tpUshULV2Rt37UULVCUhCsJ5PfJb22RuYAEuqc4ehQ2bYJPPzUhD/D++/DUUzKmXVji6XlPM3nTZJqGNmXVoVUA+Hj5cCX1CpWCKrGx30b8/W58DF/cnAS6J1qzBjp3hmPHzHa5cmbumHffle4Y4TBXUq4QfS6aAL8A+szrw2+7fwOgeIHinIg/Qa86vZjcYTJeyitHU9J6Mhnl4okaNzbT9/74o5kILCrKvP79d/PAUufOVlcoXFSqTmXria0E5g3k0LlD3P3t3QTlC6JmsZrUKVGHubvmEhoQSmDeQA6cPUD3mt0p6FuQDcc28E3kNzd83r7B+6hQuIIFV+J5pIXuSfbtg0cegc2bzZwxI0daXZGwyPaT25m+dTohhUKoWqQqtUvUJuZ8DKNWjWLGthk3HJ83T17KBpQlKi4KgAI+BW46wVTloMo0CW3ChcQLTGw/kSL5pbvPnqSFLoyKFc3sjvfcY7peliyBBg3MA0sPPWR1dcJJjpw/Qo0vamR5TJ86fahQuAJ7z+ylfeX2tA9rj6+3L+cSzxGYN5BUncqxC8co4FuAlNQUos9Fk5yaTL2S9cjjJbFiFWmhe6K9e+GLL65fHq9RI5gyBapUMYtfC7ehtSZVp/Lp35+y5OCSa/3ak9pP4v7K9/P3kb/5c/+f+Pv6U71YdR664yG5UenC5KaoyNyVK7BtGwwcaG6iAoSEQIsWkD+/2V+jhgR8LrMnbg/Tt07ncvJlqgRXoc+8Pte936RME7rU6MKABgMsqlDkhAS6uLXNm81N09mz4fJlOHDA7M+f33TLLFokT6O6KK01kccjKVagGFFxUbSa1uqGY8oHlqdGsRqMazuO8oXLW1ClsJccB7pSqi0wDvAGJmutR2V4PwD4HgjF9Mt/rLW+8XZ3OhLoLu7QITMaZuFCiIgwMz8WK2Z1VR4nOTUZb+V93RC/QfMHMSFiAt1rdadi4YosObCElYdWXvdz49qOo1vNbhy7eIyw4DB5fN6N5OimqFLKG/gMaA3EABFKqXla6x3pDhsA7NBad1BKFQWilFLTtdZJdqhfWCE0FEaMgJIlTaBb9D85T7Bg7wIe/+lxLl25RKMyjYhLiCM4fzAroldcO6a0f2n8/fzZFbvr2r7vt3x/7fXzdz1P+cDyJKUk8fSdTxOYNxCA4PzBTrsOYT1bbkc3APZqrfcDKKVmAp2A9IGuAX9lmhEFgdNAsp1rFVa42jKUQHeIPXF7aDe9HQB3lrwTrTXlAstx6Nyha8c8XPVhCvkVYt/pfRzMc5B7yt3D1AenUrRAUS4mXcRLeckj8wKwLdBLA4fTbccAd2U4ZgIwDzgK+AOPa61TM36QUqof0A8gNDQ0O/UKZ5NAz5bTl06z/OBywoLDKBNQhvw++flkzSfsittFsfzFuJR8ifOJ55m6eSoA87vOp13ldrd9nuyuSyncky2BntkQh4x/u9sAkUBLoCKwWCm1Umt9/rof0noSMAlMH/ptVyucTwLdJldSrrD39F4W7VvEntN7mLp5KheTLmZ6rK+377WhhABzH5+brTAXIiNbAj0GKJNuOwTTEk+vNzBKmzuse5VSB4A7gH/sUqWwjgR6ls5ePst3m7/j7eVvc/rS6Wv7C/kVYlCDQYSXCuf4xePEnI+hdvHa9KnbB40mOTX5WrDLnCbCXmwJ9AigslKqPHAEeALomuGYQ0ArYKVSqjhQBdiPyP08JNC11hy9cJR8PvkIyhd03XspqSkcOHuAtYfXElIohLKBZfn070+Zs2vOtb5uP28/xrcbj5+3H01Cm1AluAreXt6Znkuhro06kTAX9nTLQNdaJyulBgILMcMWp2ittyulnkl7fyIwAvhWKbUV00XzitY61oF1C2dxo0C/kHiB6HPRbDy2kd/3/M7Zy2cp5V+KyOORRB6PvHZcfp/8FPIrRIBfALEJscRdisv084LzBdOlRhfuq3gfTUObUimokpOuRIjM2TTpgtZ6PjA/w76J6V4fBe6zb2nCJeSyQE9JTWHT8U1EHo9k2OJhaDQFfApw5MKRTI8v5V+KU/GnAHi8+uPUKVGHuIQ4ziWe4+zlsxw4e4DyhcvTtUZXWpZvSdylOA6ePcjve35n6oNT5aakcCkyi47ImgsHutaa+CvxFPApwJ/7/yTiaARj1o0hNuHf/xx2qdEFL+XFXwf+wlt50+/OftQuXpvwUuGULlQ62+fuU7fPrQ8Swskk0EXWvLzMd4sCPTk1mbOXz3Ix6SIbj20kVacyc9tMDp49yN7TezmXeO66qVyD8wXzWtPXaFKmCU1Cm1x7wEYITyCBLrLmhBZ6UkoSl65cwi+PH2sOr2H+nvmMXjsafcPoWMPP24/QgFAalWlE45DGHLt4jHol61E2oCzNyzWXx9yFx5JAF1m7GuipNzwnlm3HLx4nKjaKFJ3ClE1TWBuzlv1n/h0U5eftR1hwGBpN1SJViU2IpU3FNtQuUZvE5ETaVGpDIb9CdqtHCHchgS6yZscW+rKDy+j/W392x+2+bn9QviC61+pOiH8IgXkDGXTXIHmUXYhskEAXWcthoJ+9fJZP1nzCrB2z2B23Gx8vHwbWH0iHKh04cOYARy8c5dWmr5LPJ58dixbCM0mgi6z5pvVHt20LQ4ZAhw5Qpgx4Z/7QjNaaYxeP8c+Rf3hn+TvXxnfXKVGH/nf258VGLxIWHOac2oXwMLLAhchafDyMGmWWq0tIMPt8fGDAAHjpJShdmpTUFNbFrOOziM9YsHcBZy6fufbjRfMX5c2732TwXYMtugAh3IusWCRyLjUVVq+GFSvgzTev7T5yZxhfVkvgmyIxxARAu0rtaFepHWHBYZT0L0mt4rUsLFoI9yOBLuxKp6ay44sRHJv4EZUOx1PunNl/uVY18taqB0WKmPHrFSua9UmrVbO0XiHcSY5WLBIivY3HNtLnlz5sjt0MnWFs69EMPFcF7zlzyRsVZZasS0w0C1BfumR+qGZNaNrUrIJUurTphw8MtPQ6hHBHEujilvad3seifYtYf3Q9UyKnAPDW3W/RP7w/pfxLmYPa3X/9D2kN0dHw228wc6b5OvNv3zoFC8L998Nzz0Hz5k66EiHcm3S5iCytjF7J3d/eDUC+PPloGtqU/9z9H5qVbXb7H3b+PGzcaPrhIyNhzhyz/5FHTLfMm2/+O6pGCJEp6XIR2RZ9LhqAqQ9OpXut7ngpr+x/WKFCpk+9RQuzvXEj/Pe/8Pff8PPPMGuWCfmqVXNctxCeKAd/O4UnuLpMWtPQpjkL88zUqwdz58KhQ9CtG0RFwZ13wtSpphXvgjM8CuHKJNBFlq4Gusp0aVk7UQq+/x6WLjU3S3v1Mv3qzZrB4MGwapXjzi2EG5FAF1m6eo/F7q3zzLRoAfv2wT//wMiRcOECfP65Cfb+/WHsWDiacTlbIcRVEugiS1db6E4JdIB8+aB+fXjjDdi8GfbvhwcfhBkz4IUXoEoVaNUKJkyA5GTn1CRELiGBLrLk9EDPKDTU3Cg9fx62b4cHHoD162HQIDMFQYsWJvSFEBLoImvX+tBdYXX6atXMePbYWNMV06YNLF8Odeuam6kfffTvfDNCeCAJdJEly1vomfHxgWefhQULYOVKuPdeyJsXhg2DAgWgVi2YP9+06oXwIC70t1S4mpPxJ/nzwJ+AiwV6ek2bmjHsq1ebaQd694YdO0zXTFCQacXLA2zCQ8iTooJ9p/cRfyWeI+ePsPTgUnbH7WbDsQ3EnI8BwN/Xn+MvHc89qwidP2+GOr79NkREmH3du5tuGn9/S0sTIqfkSVGRqcvJl3n292f5NvLb6/ZXLVKVRiGNCA0I5Y4id9C5WufcE+Zgnki9/35o187MJzN0qBnnHhlpxrjXrWtG0ki4Czcjge5hUnUqv+/+nc8iPmPzic0cv3icgfUH0qJcC5JSkuhYpSMFfAtYXaZ9KAXlypkumTFjYPx4sygHmAeYhg0zAV+ypIVFCmE/0uXiIQ6cOUCPOT1YfXj1tX1tKrahW81u9Kjdw8LKnOzUKfjzT+ja1WwrBXffDe3bmyX28kgbR7g26XLxcIv3Lab7nO6cjD9JpaBKVA6qzFvN36JhSEOrS3O+okWhSxdo2RKWLDFj3H/80Qx/DAiAp5+2ukIhsk1a6G4sLiGO91a+x+h1owH456l/qF+6vsVVuaBz58wTqCdOmLD/z3/MtpeLjuwRHi2rFrr8iXVTRy8cpcYXNRi9bjRB+YJY23ethPnNBATArl1mPvZZs8wDTAUKQO3a8OSTMn+MyDUk0N3QlhNbaDm1JccvHmdyh8nEDYvzzO6V2xEYCCNGwJYt8NVXMGAAlCoF06aZZfPuvNO8L1P6ChdmUx+6UqotMA7wBiZrrUdlckwLYCzgA8RqrWVdMQt8t/k7es7tCcB7Ld+jb72+FleUy1Srdv2i1qtWwcSJsHgxvPWWmSSsWzfo0cPMMyOEC7llH7pSyhvYDbQGYoAIoIvWeke6YwKBNUBbrfUhpVQxrfXJrD5X+tDt68TFEzzx8xMsO7iMwnkL82uXX2kS2sTqstxHaipMngyvvw5xcWZfkyZmdEytWnDffTJCRjhFTvvQGwB7tdb7tdZJwEygU4ZjugKztdaHAG4V5sL+3l/1PiujV/J287eJeTFGwtzevLygXz84eRI2bTIBfuIEvPaamWYgIMC8/vlnmdZXWMaWQC8NHE63HZO2L70woLBSaplSaoNSqmdmH6SU6qeUWq+UWn/q1KnsVSyus/rQanrM6cG4v8fRvVZ3hrcYnrue6sxtvLygTh0zb8yePaa1/vnnZt6YUaOgc2fTZTN4sFkzVQgnsiXQM5s3NWM/TR7gTuABoA3wH6VU2A0/pPUkrXW41jq8aNGit12s+Ne+0/sYsmAILaa24Pst39OtZjfGtBljdVmeJyjIzPx4+LAZ/vj++6aFPn68uZH6+eemu0YIJ7Al0GOAMum2Q4CM47higAVa63itdSywAqhtnxJFRksPLKXepHqM+3sc/r7+LHtyGd8//D2F8xW2ujTPVqgQvPqqWUZv82aoUcOMlgkNNastLV0Kly9bXaVwY7YEegRQWSlVXinlCzwBzMtwzC9AM6VUHqVUfuAuYKd9SxWJyYl0ntWZltNakjdPXiY+MJHjLx2neTkZUORSlDI3SjduhOnTITzctNRbtjR97f37w4YNkJRkdaXCzdwy0LXWycBAYCEmpGdprbcrpZ5RSj2TdsxOYAGwBfgHM7Rxm+PK9jzTNk+j/Ljy/LzzZ+qVrMf+wfvpH94fX29fq0sTN+PjY+aMmTvX3EydNcsE/aRJJuQLFYKHH4affoKUFKurFW5AHv13ccsPLmfkypH8uf9PwkuF83S9p+lVp5cEeW6ltZnSNyLCjG3/6iuzP39+c0P1229NC1+Im8hq2KIEugv7bfdvdJjRAT9vP4Y0HMJ/7/mvBLm7iYkxLfiRI80wyObNoWNH6NvXdM8IkYHM5ZILbT2xlZ5zzOjPqIFRjLp3lIS5OwoJgYEDzXwxI0eaBbCHDjVT+v76q4yQEbdFAt3FbD2xlbDxYdSaWAulFFEDoygbWNbqsoSjeXnBG2/Atm0myI8eNS31pk1lZIywmQS6izgZf5JB8wdR98u67Dm9h+Zlm7Op/ybCgm8Yzi/cXfv2cOAAPP88rF0LlSvDd9/B2bNWVyZcnEw+YaFUncrrf73Ojzt+ZP+Z/QB0rdmVUa1GUSagzC1+Wri1ggVh7FgICzPT+vbsCRUqwCuvmNd581pdoXBB0kK3gNaarSe2ctfku/hg9QcU9C1Io5BGrOq9iukPT5cwF/967jnTr75okRna2L+/Cftvv7W6MuGCpIXuZBcSL/DIrEdYvH8xAKPvG83zDZ/HS8m/reImvLygdWvTDTNnjgn1554zqyo1amR1dcKFSKA7yb7T+3j8p8eJioviYtJFAJb3Ws7dZe+2uDKRayhlHkSqVw8aNIDGjc3wxr59JdgFIF0uDhd9Npqn5j1FpfGV2HBsA60rtGZt37Xo4VrCXGRPuXJm4Y0+fczUAo0bm8Wve/SAS5esrk5YSB4scgCtNbN3zubLDV9e61rpVacXgxoMol7JehZXJ9xKXJwZARMRAT/8YPY9+SQMGWKm+RVuR54UdaLdcbsZ9McgFu1bBEDDkIZM6TiFqkWrWlyZcHsTJ8IXX5h1Ub29zbDHTz6xuiphZxLoDnb43GG+ifyGn3f+zJYTWwB4venrvNjoRYLzB1tcnfA427ebyb8uXzY3U1u3NjdSCxWyujJhB1kFutwUzYbziefZdnIbEUciGL1uNIfOHUKhaBLahI9bf8yj1R8lNEAWEBYWqV4dzpyBl182T50uXgwrV8K8jLNeC3cjLfTboLXm7WVvM3LlSFK1mWPjjiJ30LpCa4Y2GiqP6AvX1KsXTJ0Kf/1l5mQXuZq00HMoVaey9vBaRqwYwcJ9C3ms+mN0rdGVakWrUTm4stXlCZG10aNNS71DB3jrLTO1QLVqMk2vG5IWehbiEuL4POJzPov4jBPxJwjwC6D/nf0Zde8olPxlELnJ1q1m9MumTWY7IMAsat23r1mIQ+QaclP0Nmit2XBsA2PWjWHurrkkXEmgaWhTetfpzWPVH6Ogb0GrSxQi+6Ki4Ouv4aOPzHaxYqZLZsQI8JXpmXMD6XK5DSNWjGD4suH4efvRrnI7hjcfTp0SdawuSwj7qFIFPvwQXnoJ1qyBL78025cuwaefWl2dyCEJ9AwOnD0AwLGhxyicr7DF1QjhIMWKwYMPQqdOpm99/HjTeg8Ph3vvhRYtpI89F5JH/zNITE6kUlAlCXPhGZQyS+C9+qpZVOODD8xImAoV4D//MWugilxDAj2DxJRE/Lz9rC5DCOfJkwfef9/cOL1wwUzNGxJilsTr2xd27LC6QmEjCfQMEpMT8csjgS48VL58ZjTM0qVmeOM335g5YbZssboyYQMJ9AykhS4EptU+bx4sWGC6ZWrXhhdegORkqysTWZBAz0Ba6EKkUQratIENG6B7d7MkXq9eZqEN6Vt3SRLo6aSkpnAq4ZS00IVIr0YNmDbNrGU6fbq5Ydqvn9VViUxIoGNa5W/89QYlPynJrthdFMlfxOqShHAtSsHkyWZETJEi5vWiRVZXJTLw6HHoUbFRjF47ml+ifuFE/AkeuuMh2lVqx2PVH7O6NCFcj4+PGbderRo0a2a6Y15/Hd591+rKRBqPDPTtJ7fz8dqPmbZ5Gr7evrSt1JYB9Qdwb4V7rS5NCNdXuTLs3w8dO8J775mgf/NNcyNVWMqjulyOXzzOsMXDqD2xNv/b9j8GNxhM9JBo5jw+R8JciNuRP79Z8u6hh+CddyAoCN54Q26WWswjJueKTYhl7LqxjFk3hoQrCfSu05sPW38ofeVC5JTW8NtvMGWK6V8vWNCMgikif7ccJavJudy6hR6bEMvHaz6m0qeVeHflu3Ss0pHtz21nSqcpEuZC2INSZi6Yn36CRx6Bixehfn343/+ktW4BmwJdKdVWKRWllNqrlHo1i+PqK6VSlFKd7Vfi7TsVf4pB8wdRenRpXl78Mo3KNGLzM5uZ8cgMqhWtZmVpQrgnb28T6l9/DQcPwhNPyCgYC9wy0JVS3sBnQDugGtBFKXVDKqYd9wGw0N5F2kprzfQt0yn2cTEmREygXsl6rO6zmj+6/UGt4rWsKksIz9GnD5w6BaVLw+OPm0U0EhKsrspj2NJCbwDs1Vrv11onATOBTpkcNwj4GThpx/pstmjfIppMaUL3Od0p7V+auY/PZU2fNTQu09iKcoTwXEWKwOrVULYsvPYaPPOM1RV5DFvGGZUGDqfbjgHuSn+AUqo08BDQEqh/sw9SSvUD+gGEhobebq03SExOZPbO2UzcMJEV0SsAGNd2HAPqD8DbyzvHny+EyKayZSEy0kzF+913sH07vPgidO0q86w7kC0t9Mx+9TPe7RgLvKK1Tsnqg7TWk7TW4Vrr8KJFi9pY4o1OXDzBiOUjCB0bStfZXTly/gh96/Ylekg0g+8aLGEuhCtQyoyAGTkSjhwx88G0a/fvuqbC7mxpoccAZdJthwBHMxwTDsxMWzi5CHC/UipZaz3XHkWmt+nYJhp93YjElERaV2jNS41f4t4K9+Kl3HrAjhC5U4ECZnz6K69A797w/fewcKGZE6ZrV6urczu2pGAEUFkpVV4p5Qs8AcxLf4DWurzWupzWuhzwE/CcI8Ic4MiFIxT0LchvXX5jUY9F3FfxPglzIVxdnjym62XnTvOkabduZiRMUpLVlbmVW7bQtdbJSqmBmNEr3sAUrfV2pdQzae9PdHCN12kf1p7YYbHOPKUQwl7uuMNMx9u/P8yYAYcPw6BBJtxFjtk0+YLWej4wP8O+TINca90r52UJIdyWv7/pcqlbF4YNgzVrwNcXHn7Y6spyPemrEEI4n1Lw8suwcaPZ7trVrJAkckQCXQhhnbp1zSLUFSrAgw+a6QNOn7a6qlxLAl0IYa2qVWHVKtNKnz3bBLvIFgl0IYT1goLMkMb774eVK82UAbIg9W2TQBdCuI7vvjPdL6+9Bs2bw9mzVleUq0igCyFcR1CQmTKgQwcz+iU4GMaOtbqqXEMCXQjhWvz94auvYOJEqF0bXngBJkywuqpcQQJdCOF6ihc3Dx+tXWsWzBg0CFq1go8+koUzsiCBLoRwXX5+sGAB9OgBS5aYB5HKljUrIslN0xtIoAshXFtQEEybBikpMHq0CfInnjBT80ZGWl2dS5FAF0LkDl5epj/98GGz1N3KlebBpKZNoWdPs1C1h7faJdCFELmLt7dZ6m7PHtMF4+UFixdD377Qqxdcvmx1hZaRQBdC5E6VKsEHH8CKFXD0KLz6qpn064svrK7MMhLoQojcTykYMcK8jo+3thYLSaALIdyDV1qcpWS5EqZbk0AXQrgHCXQJdCGEG/HygtRUq6uwjAS6EMJ9eHtLC10IIdyCt7e00IUQwi14eUkLXQgh3IK00IUQwk2kpkJCgtVVWEYCXQjhPpQy65J6KAl0IYT7qF7dTNC1aZPVlVhCAl0I4T7efdcsgFGvHlStCn/8YXVFTiWBLoRwH61awcGD8MYbsGuXmZUxIsLqqpxGAl0I4V4CAmDkSFi2DBIToUEDePJJj5grXQJdCOGemjc3rfRHHzUrHhUvDv36mbnT3TTcJdCFEO6rWDGz/ugvv0CbNjBjBtx3H9Sp45bT7EqgCyHcm1LQsSP88AOcPGnmTd++3axJumuX1dXZlU2BrpRqq5SKUkrtVUq9msn73ZRSW9K+1iilatu/VCGEyKF8+eDNN+HLL2HHDqhVyyxdFxtrdWV2cctAV0p5A58B7YBqQBelVLUMhx0AmmutawEjgEn2LlQIIeymXz/Yu/ffxaWLFTNdMZ99lqvngrGlhd4A2Ku13q+1TgJmAp3SH6C1XqO1PpO2uQ4IsW+ZQghhZ8WLw+TJsGgRPPaY6X4ZOBAKFjTrkiYlWV3hbbMl0EsDh9Ntx6Ttu5m+gGeN5hdC5F6tW8PMmRAdDYMGmQeSnnsOSpWCDRusru625LHhGJXJPp3pgUrdgwn0pjd5vx/QDyA0NNTGEoUQwgmUgk8/NU+azp4NnTtDeLgZ4ujtbXV1NrGlhR4DlEm3HQIczXiQUqoWMBnopLWOy+yDtNaTtNbhWuvwokWLZqdeIYRwLKXgkUdMKx0gMBCGDoUrVywtyxa2BHoEUFkpVV4p5Qs8AcxLf4BSKhSYDfTQWu+2f5lCCOFkY8ear5o1YfRo0+f+++9WV5WlWwa61joZGAgsBHYCs7TW25VSzyilnkk77C0gGPhcKRWplFrvsIqFEMIZfHzg+edhzRr47Tc4cwa6dYMPPjDdMi5IaYsKCw8P1+vXS+4LIXKJlSuhf3/YuRMaNoT33oMWLUwXjRMppTZorcMze0+eFBVCCFs0awZbt5qhjvv3mydNa9aEY8esruwaCXQhhLCVt7d5snT3bvjkEzN2vWFDl5miVwJdCCFuV0AAvPiiWUDjyhXT9fLrr1ZXJYEuhBDZ1rq1uWlaurSZAGz1akvLkUAXQoicKFcOVqwALy8YN87SUiTQhRAip0qUME+W/vijpVPySqALIYQ9fPSRmZ53wADLxqlLoAshhD2EhpobpUuWwJw5lpQggS6EEPYybBgULgwffmjJ6SXQhRDCXgoVMisi/f03zJrl9NNLoAshhD316QNly5p5X6KjnXpqCXQhhLCnwECYO9fMo/7oo069QSqBLoQQ9lanjlmvNCLCzP/iJBLoQgjhCE89Zb6fPOm0U0qgCyGEI+TLZ75fuuS0U0qgCyGEI0igCyGEm7ga6OfOOe2UEuhCCOEIgYHm+9tvQ1KSU04pgS6EEI4QFGSeGD16FNq1M/OmO5gEuhBCOMrLL8PQoWZ+l40bHX46CXQhhHCkBx803y9ccPipJNCFEMKR/P3N9/PnHX4qCXQhhHCkQoXMdwl0IYTI5STQhRDCTVztcpE+dCGEyOV8fcHPT1roQgjhFvz9JdCFEMItlCgBixY5fF4XCXQhhHC099+H/fvh888dehoJdCGEcLQHHjCP/7/yCpw44bDTSKALIYSjKWUWj05JgUmTHHYamwJdKdVWKRWllNqrlHo1k/eVUurTtPe3KKXq2b9UIYTIxRo1gvbtYexYiI93yCluGehKKW/gM6AdUA3oopSqluGwdkDltK9+wBd2rlMIIXI3pWDAADh9GtasccgpbGmhNwD2aq33a62TgJlApwzHdAKmaWMdEKiUKmnnWoUQIndr0MB8d9DMi7YEemngcLrtmLR9t3sMSql+Sqn1Sqn1p06dut1ahRAidwsKgq5dISTEIR+fx4ZjVCb7dDaOQWs9CZgEEB4efsP7Qgjh9qZPd9hH29JCjwHKpNsOAY5m4xghhBAOZEugRwCVlVLllVK+wBPAvAzHzAN6po12aQic01ofs3OtQgghsnDLLhetdbJSaiCwEPAGpmittyulnkl7fyIwH7gf2AskAL0dV7IQQojM2NKHjtZ6Pia00++bmO61BgbYtzQhhBC3Q54UFUIINyGBLoQQbkICXQgh3IQEuhBCuAll7mdacGKlTgHRaZtFgFhLCrGeJ187ePb1y7V7rpxcf1mtddHM3rAs0K8rQqn1Wutwq+uwgidfO3j29cu1e+a1g+OuX7pchBDCTUigCyGEm3CVQHfcEh6uz5OvHTz7+uXaPZdDrt8l+tCFEELknKu00IUQQuSQBLoQQrgJpwW6py80bcP1d0u77i1KqTVKqdpW1OkIt7r2dMfVV0qlKKU6O7M+R7Pl+pVSLZRSkUqp7Uqp5c6u0VFs+HMfoJT6VSm1Oe3a3WamVqXUFKXUSaXUtpu8b//M01o7/Asz7e4+oALgC2wGqmU45n7gD8zqRw2Bv51Rmwtdf2OgcNrrdu5y/bZce7rjlmBm9exsdd1O/r0PBHYAoWnbxayu24nX/jrwQdrrosBpwNfq2u10/XcD9YBtN3nf7pnnrBa6py80fcvr11qv0VqfSdtch1n1yR3Y8nsPMAj4GTjpzOKcwJbr7wrM1lofAtBau8uvgS3XrgF/pZQCCmICPdm5ZTqG1noF5npuxu6Z56xAt9tC07nU7V5bX8y/3O7glteulCoNPARMxP3Y8nsfBhRWSi1TSm1QSvV0WnWOZcu1TwCqYpas3Ao8r7VOdU55lrN75tm0wIUd2G2h6VzK5mtTSt2DCfSmDq3IeWy59rHAK1rrFNNQcyu2XH8e4E6gFZAPWKuUWqe13u3o4hzMlmtvA0QCLYGKwGKl1Eqt9XkH1+YK7J55zgp0T19o2qZrU0rVAiYD7bTWcU6qzdFsufZwYGZamBcB7ldKJWut5zqlQsey9c9+rNY6HohXSq0AagO5PdBtufbewChtOpX3KqUOAHcA/zinREvZPfOc1eXi6QtN3/L6lVKhwGyghxu0zNK75bVrrctrrctprcsBPwHPuUmYg21/9n8Bmiml8iil8gN3ATudXKcj2HLthzD/M0EpVRyoAux3apXWsXvmOaWFrj18oWkbr/8tIBj4PK2lmqzdYDY6G6/dbdly/VrrnUqpBcAWIBWYrLXOdKhbbmLj7/0I4Ful1FZMF8QrWmu3mFZXKTUDaAEUUUrFAMMBH3Bc5smj/0II4SbkSVEhhHATEuhCCOEmJNCFEMJNSKALIYSbkEAXQgg3IYEuhBBuQgJdCCHcxP8Bd8T3l6+RFdcAAAAASUVORK5CYII=\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "p, r, thresholds = precision_recall_curve(y_pred_final.Converted, y_pred_final.Converted_Prob)\n",
    "\n",
    "plt.plot(thresholds, p[:-1], \"g-\")\n",
    "plt.plot(thresholds, r[:-1], \"r-\")\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Conclusion :\n",
    "    \n",
    "   \n",
    "   - While we have checked both Sensitivity-Specificity as well as Precision and Recall Metrics, we have considered the optimal cut off based on Sensitivity and Specificity for calculating the final prediction.\n",
    "   \n",
    "   - Accuracy, Sensitivity and Specificity values of test set are around 77%, 82% and 74% which are approximately closer to the respective values calculated using trained set.\n",
    "   - Also the lead score calculated in the trained set of data shows the conversion rate on the final predicted model is 82%\n",
    "   - Hence overall this model seems to be good.   "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
